{
  "$comment": "Generated at Tue Jan 04 2022 14:10:09 GMT+0100 (Central European Standard Time)",
  "testCases": [
    {
      "title": "all - allows to specify the variable name for the current value and to access the outer context",
      "logic": {
        "all": [
          {
            "var": "elements"
          },
          {
            "and": [
              {
                "var": "it"
              },
              {
                "var": "outer"
              }
            ]
          },
          "it"
        ]
      },
      "data": {
        "elements": [
          true,
          1,
          "hello"
        ],
        "outer": true
      },
      "exp": true
    },
    {
      "title": "all - data types - if first parameter is a boolean (false), returns false",
      "logic": {
        "all": [
          {
            "var": "elements"
          },
          {
            "var": ""
          }
        ]
      },
      "data": {
        "elements": false
      },
      "exp": false
    },
    {
      "title": "all - data types - if first parameter is a boolean (true), returns false",
      "logic": {
        "all": [
          {
            "var": "elements"
          },
          {
            "var": ""
          }
        ]
      },
      "data": {
        "elements": true
      },
      "exp": false
    },
    {
      "title": "all - data types - if first parameter is a number, returns false",
      "logic": {
        "all": [
          {
            "var": "elements"
          },
          {
            "var": ""
          }
        ]
      },
      "data": {
        "elements": 5
      },
      "exp": false
    },
    {
      "title": "all - data types - if first parameter is a string, returns false",
      "logic": {
        "all": [
          {
            "var": "elements"
          },
          {
            "var": ""
          }
        ]
      },
      "data": {
        "elements": "not-an-array"
      },
      "exp": false
    },
    {
      "title": "all - data types - if first parameter is an object, returns false",
      "logic": {
        "all": [
          {
            "var": "elements"
          },
          {
            "var": ""
          }
        ]
      },
      "data": {
        "elements": {}
      },
      "exp": false
    },
    {
      "title": "all - data types - if first parameter is null, returns false",
      "logic": {
        "all": [
          {
            "var": "elements"
          },
          {
            "var": ""
          }
        ]
      },
      "data": {
        "elements": null
      },
      "exp": false
    },
    {
      "title": "all - returns false if the closure returns falsy for at least one element (negative test)",
      "logic": {
        "all": [
          {
            "var": "elements"
          },
          {
            "var": ""
          }
        ]
      },
      "data": {
        "elements": [
          true,
          1,
          "hello",
          false
        ]
      },
      "exp": false
    },
    {
      "title": "all - returns true if the closure returns truthy for all elements (positive test)",
      "logic": {
        "all": [
          {
            "var": "elements"
          },
          {
            "var": ""
          }
        ]
      },
      "data": {
        "elements": [
          true,
          1,
          "hello"
        ]
      },
      "exp": true
    },
    {
      "title": "and operation - should work as binary operator - #1 with [true,false]",
      "logic": {
        "and": [
          {
            "var": "0"
          },
          {
            "var": "1"
          }
        ]
      },
      "data": [
        true,
        false
      ],
      "exp": false
    },
    {
      "title": "and operation - should work as binary operator - #2 with [null,true]",
      "logic": {
        "and": [
          {
            "var": "0"
          },
          {
            "var": "1"
          }
        ]
      },
      "data": [
        null,
        true
      ],
      "exp": null
    },
    {
      "title": "and operation - should work as binary operator - #3 with [true,{}]",
      "logic": {
        "and": [
          {
            "var": "0"
          },
          {
            "var": "1"
          }
        ]
      },
      "data": [
        true,
        {}
      ],
      "exp": {}
    },
    {
      "title": "and operation - should work as ternary operator - #1 with [true,null,false]",
      "logic": {
        "and": [
          {
            "var": "0"
          },
          {
            "var": "1"
          },
          {
            "var": "2"
          }
        ]
      },
      "data": [
        true,
        null,
        false
      ],
      "exp": null
    },
    {
      "title": "assign - can be used in a script",
      "logic": {
        "script": [
          {
            "assign": [
              "greeting",
              "hello"
            ]
          }
        ]
      },
      "data": {
        "greeting": "hola!"
      },
      "exp": null
    },
    {
      "title": "assign - changes nested properties",
      "logic": {
        "script": [
          {
            "assign": [
              "people.0.gn",
              "John M."
            ]
          },
          {
            "assign": [
              "people.0.interests.0",
              "fun"
            ]
          },
          {
            "assign": [
              "people.0.interests.1",
              "books"
            ]
          },
          {
            "assign": [
              "greetings.short",
              []
            ]
          },
          {
            "assign": [
              "greetings.short.0",
              "Hi"
            ]
          },
          {
            "assign": [
              "greetings.informal",
              "Hello"
            ]
          },
          {
            "return": [
              {
                "var": ""
              }
            ]
          }
        ]
      },
      "data": {
        "people": [
          {
            "gn": "John",
            "fn": "Doe",
            "interests": [
              "games"
            ]
          }
        ],
        "greetings": {
          "formal": [
            "Good Morning"
          ],
          "informal": [
            "Hello"
          ]
        }
      },
      "exp": {
        "people": [
          {
            "gn": "John M.",
            "fn": "Doe",
            "interests": [
              "fun",
              "books"
            ]
          }
        ],
        "greetings": {
          "formal": [
            "Good Morning"
          ],
          "informal": "Hello",
          "short": [
            "Hi"
          ]
        }
      }
    },
    {
      "title": "assign - changes properties of an array",
      "logic": {
        "script": [
          {
            "assign": [
              "greetings.0",
              "hello"
            ]
          },
          {
            "return": [
              {
                "var": "greetings"
              }
            ]
          }
        ]
      },
      "data": {
        "greetings": [
          "Good Morning",
          "hola"
        ]
      },
      "exp": [
        "hello",
        "hola"
      ]
    },
    {
      "title": "assign - changes properties of an object",
      "logic": {
        "script": [
          {
            "assign": [
              "greetings.en",
              "hello"
            ]
          },
          {
            "return": [
              {
                "var": "greetings"
              }
            ]
          }
        ]
      },
      "data": {
        "greetings": {
          "en": "Good Morning",
          "es": "hola"
        }
      },
      "exp": {
        "en": "hello",
        "es": "hola"
      }
    },
    {
      "title": "assign - changes the value of a variable",
      "logic": {
        "script": [
          {
            "assign": [
              "greeting",
              "hello"
            ]
          },
          {
            "return": [
              {
                "var": "greeting"
              }
            ]
          }
        ]
      },
      "data": {
        "greeting": "hola!"
      },
      "exp": "hello"
    },
    {
      "title": "assign - data types - if first parameter is a boolean (false), throws an exception",
      "logic": {
        "script": [
          {
            "assign": [
              {
                "var": "param"
              },
              "hello"
            ]
          },
          {
            "return": [
              {
                "var": "greeting"
              }
            ]
          }
        ]
      },
      "data": {
        "greeting": "Good Morning",
        "param": false
      },
      "throws": true
    },
    {
      "title": "assign - data types - if first parameter is a boolean (true), throws an exception",
      "logic": {
        "script": [
          {
            "assign": [
              {
                "var": "param"
              },
              "hello"
            ]
          },
          {
            "return": [
              {
                "var": "greeting"
              }
            ]
          }
        ]
      },
      "data": {
        "greeting": "Good Morning",
        "param": true
      },
      "throws": true
    },
    {
      "title": "assign - data types - if first parameter is a number, throws an exception",
      "logic": {
        "script": [
          {
            "assign": [
              {
                "var": "param"
              },
              "hello"
            ]
          },
          {
            "return": [
              {
                "var": "greeting"
              }
            ]
          }
        ]
      },
      "data": {
        "greeting": "Good Morning",
        "param": 5
      },
      "throws": true
    },
    {
      "title": "assign - data types - if first parameter is a string, updates the variable with the given name",
      "logic": {
        "script": [
          {
            "assign": [
              {
                "var": "param"
              },
              "hello"
            ]
          },
          {
            "return": [
              {
                "var": "greeting"
              }
            ]
          }
        ]
      },
      "data": {
        "greeting": "Good Morning",
        "param": "greeting"
      },
      "exp": "hello"
    },
    {
      "title": "assign - data types - if first parameter is an array, throws an exception",
      "logic": {
        "script": [
          {
            "assign": [
              {
                "var": "param"
              },
              "hello"
            ]
          },
          {
            "return": [
              {
                "var": "greeting"
              }
            ]
          }
        ]
      },
      "data": {
        "greeting": "Good Morning",
        "param": []
      },
      "throws": true
    },
    {
      "title": "assign - data types - if first parameter is an object, throws an exception",
      "logic": {
        "script": [
          {
            "assign": [
              {
                "var": "param"
              },
              "hello"
            ]
          },
          {
            "return": [
              {
                "var": "greeting"
              }
            ]
          }
        ]
      },
      "data": {
        "greeting": "Good Morning",
        "param": {}
      },
      "throws": true
    },
    {
      "title": "assign - data types - if first parameter is null, throws an exception",
      "logic": {
        "script": [
          {
            "assign": [
              {
                "var": "param"
              },
              "hello"
            ]
          },
          {
            "return": [
              {
                "var": "greeting"
              }
            ]
          }
        ]
      },
      "data": {
        "greeting": "Good Morning",
        "param": null
      },
      "throws": true
    },
    {
      "title": "assign - supports var statements for the identifier",
      "logic": {
        "script": [
          {
            "assign": [
              {
                "var": "param"
              },
              "hello"
            ]
          },
          {
            "return": [
              {
                "var": "greetings"
              }
            ]
          }
        ]
      },
      "data": {
        "greetings": [
          "Good Morning",
          "hola"
        ],
        "param": "greetings.0"
      },
      "exp": [
        "hello",
        "hola"
      ]
    },
    {
      "title": "assign - supports var statements for the value",
      "logic": {
        "script": [
          {
            "assign": [
              "greetings.0",
              {
                "var": "value"
              }
            ]
          },
          {
            "return": [
              {
                "var": "greetings"
              }
            ]
          }
        ]
      },
      "data": {
        "greetings": [
          "Good Morning",
          "hola"
        ],
        "value": "hello"
      },
      "exp": [
        "hello",
        "hola"
      ]
    },
    {
      "title": "call - allows to call other functions with array",
      "functions": [
        {
          "name": "echo",
          "definition": {
            "parameters": [
              {
                "name": "a"
              }
            ],
            "logic": [
              {
                "return": [
                  {
                    "var": "a"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "main",
          "definition": {
            "parameters": [
              {
                "name": "a"
              }
            ],
            "logic": [
              {
                "return": [
                  {
                    "call": [
                      "echo",
                      {
                        "a": [
                          "hello",
                          1,
                          true
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "main",
        "parameters": {}
      },
      "exp": [
        "hello",
        1,
        true
      ]
    },
    {
      "title": "call - allows to call other functions with boolean (false)",
      "functions": [
        {
          "name": "echo",
          "definition": {
            "parameters": [
              {
                "name": "a"
              }
            ],
            "logic": [
              {
                "return": [
                  {
                    "var": "a"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "main",
          "definition": {
            "parameters": [
              {
                "name": "a"
              }
            ],
            "logic": [
              {
                "return": [
                  {
                    "call": [
                      "echo",
                      {
                        "a": false
                      }
                    ]
                  }
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "main",
        "parameters": {}
      },
      "exp": false
    },
    {
      "title": "call - allows to call other functions with boolean (true)",
      "functions": [
        {
          "name": "echo",
          "definition": {
            "parameters": [
              {
                "name": "a"
              }
            ],
            "logic": [
              {
                "return": [
                  {
                    "var": "a"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "main",
          "definition": {
            "parameters": [
              {
                "name": "a"
              }
            ],
            "logic": [
              {
                "return": [
                  {
                    "call": [
                      "echo",
                      {
                        "a": true
                      }
                    ]
                  }
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "main",
        "parameters": {}
      },
      "exp": true
    },
    {
      "title": "call - allows to call other functions with null",
      "functions": [
        {
          "name": "echo",
          "definition": {
            "parameters": [
              {
                "name": "a"
              }
            ],
            "logic": [
              {
                "return": [
                  {
                    "var": "a"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "main",
          "definition": {
            "parameters": [
              {
                "name": "a"
              }
            ],
            "logic": [
              {
                "return": [
                  {
                    "call": [
                      "echo",
                      {
                        "a": null
                      }
                    ]
                  }
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "main",
        "parameters": {}
      },
      "exp": null
    },
    {
      "title": "call - allows to call other functions with numbers (float)",
      "functions": [
        {
          "name": "echo",
          "definition": {
            "parameters": [
              {
                "name": "a"
              }
            ],
            "logic": [
              {
                "return": [
                  {
                    "var": "a"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "main",
          "definition": {
            "parameters": [
              {
                "name": "a"
              }
            ],
            "logic": [
              {
                "return": [
                  {
                    "call": [
                      "echo",
                      {
                        "a": 5.5
                      }
                    ]
                  }
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "main",
        "parameters": {}
      },
      "exp": 5.5
    },
    {
      "title": "call - allows to call other functions with numbers (integer)",
      "functions": [
        {
          "name": "echo",
          "definition": {
            "parameters": [
              {
                "name": "a"
              }
            ],
            "logic": [
              {
                "return": [
                  {
                    "var": "a"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "main",
          "definition": {
            "parameters": [
              {
                "name": "a"
              }
            ],
            "logic": [
              {
                "return": [
                  {
                    "call": [
                      "echo",
                      {
                        "a": 5
                      }
                    ]
                  }
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "main",
        "parameters": {}
      },
      "exp": 5
    },
    {
      "title": "call - allows to call other functions with object",
      "functions": [
        {
          "name": "echo",
          "definition": {
            "parameters": [
              {
                "name": "a"
              }
            ],
            "logic": [
              {
                "return": [
                  {
                    "var": "a"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "main",
          "definition": {
            "parameters": [
              {
                "name": "a"
              }
            ],
            "logic": [
              {
                "return": [
                  {
                    "call": [
                      "echo",
                      {
                        "a": {
                          "1": true,
                          "hello": "world",
                          "more": {
                            "1": true,
                            "hello": "world"
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "main",
        "parameters": {}
      },
      "exp": {
        "1": true,
        "hello": "world",
        "more": {
          "1": true,
          "hello": "world"
        }
      }
    },
    {
      "title": "call - allows to call other functions with parameters",
      "functions": [
        {
          "name": "multiply",
          "definition": {
            "parameters": [
              {
                "name": "a"
              },
              {
                "name": "b",
                "default": 9
              }
            ],
            "logic": [
              {
                "return": [
                  {
                    "*": [
                      {
                        "var": "a"
                      },
                      {
                        "var": "b"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "square",
          "definition": {
            "parameters": [
              {
                "name": "a"
              }
            ],
            "logic": [
              {
                "return": [
                  {
                    "call": [
                      "multiply",
                      {
                        "a": {
                          "var": "a"
                        },
                        "b": {
                          "var": "a"
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "square",
        "parameters": {
          "a": 4
        }
      },
      "exp": 16
    },
    {
      "title": "call - allows to call other functions with strings",
      "functions": [
        {
          "name": "echo",
          "definition": {
            "parameters": [
              {
                "name": "a"
              }
            ],
            "logic": [
              {
                "return": [
                  {
                    "var": "a"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "main",
          "definition": {
            "parameters": [
              {
                "name": "a"
              }
            ],
            "logic": [
              {
                "return": [
                  {
                    "call": [
                      "echo",
                      {
                        "a": "hello"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "main",
        "parameters": {}
      },
      "exp": "hello"
    },
    {
      "title": "call - allows to call other functions without parameters",
      "functions": [
        {
          "name": "pi",
          "definition": {
            "parameters": [],
            "logic": [
              {
                "return": [
                  3.1416
                ]
              }
            ]
          }
        },
        {
          "name": "n-pi",
          "definition": {
            "parameters": [
              {
                "name": "n",
                "default": 2
              }
            ],
            "logic": [
              {
                "return": [
                  {
                    "*": [
                      {
                        "call": [
                          "pi"
                        ]
                      },
                      {
                        "var": "n"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "n-pi",
        "parameters": {
          "n": 2
        }
      },
      "exp": 6.2832
    },
    {
      "title": "call - data types - if first parameter is a boolean (false), throws an exception",
      "functions": [
        {
          "name": "false",
          "definition": {
            "parameters": [],
            "logic": [
              {
                "return": [
                  "hello"
                ]
              }
            ]
          }
        },
        {
          "name": "main",
          "definition": {
            "parameters": [],
            "logic": [
              {
                "return": [
                  {
                    "call": [
                      false
                    ]
                  }
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "main",
        "parameters": {}
      },
      "throws": true
    },
    {
      "title": "call - data types - if first parameter is a boolean (true), throws an exception",
      "functions": [
        {
          "name": "true",
          "definition": {
            "parameters": [],
            "logic": [
              {
                "return": [
                  "hello"
                ]
              }
            ]
          }
        },
        {
          "name": "main",
          "definition": {
            "parameters": [],
            "logic": [
              {
                "return": [
                  {
                    "call": [
                      true
                    ]
                  }
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "main",
        "parameters": {}
      },
      "throws": true
    },
    {
      "title": "call - data types - if first parameter is a number, throws an exception",
      "functions": [
        {
          "name": "5",
          "definition": {
            "parameters": [],
            "logic": [
              {
                "return": [
                  "hello"
                ]
              }
            ]
          }
        },
        {
          "name": "main",
          "definition": {
            "parameters": [],
            "logic": [
              {
                "return": [
                  {
                    "call": [
                      5
                    ]
                  }
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "main",
        "parameters": {}
      },
      "throws": true
    },
    {
      "title": "call - data types - if first parameter is an array, throws an exception",
      "functions": [
        {
          "name": "hello",
          "definition": {
            "parameters": [],
            "logic": [
              {
                "return": [
                  "hello"
                ]
              }
            ]
          }
        },
        {
          "name": "main",
          "definition": {
            "parameters": [],
            "logic": [
              {
                "return": [
                  {
                    "call": [
                      [
                        "hello"
                      ]
                    ]
                  }
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "main",
        "parameters": {}
      },
      "throws": true
    },
    {
      "title": "call - data types - if first parameter is an object, throws an exception",
      "functions": [
        {
          "name": "[object Object]",
          "definition": {
            "parameters": [],
            "logic": [
              {
                "return": [
                  "hello"
                ]
              }
            ]
          }
        },
        {
          "name": "main",
          "definition": {
            "parameters": [],
            "logic": [
              {
                "return": [
                  {
                    "call": [
                      {}
                    ]
                  }
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "main",
        "parameters": {}
      },
      "throws": true
    },
    {
      "title": "call - data types - if first parameter is null, throws an exception",
      "functions": [
        {
          "name": "null",
          "definition": {
            "parameters": [],
            "logic": [
              {
                "return": [
                  "hello"
                ]
              }
            ]
          }
        },
        {
          "name": "main",
          "definition": {
            "parameters": [],
            "logic": [
              {
                "return": [
                  {
                    "call": [
                      null
                    ]
                  }
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "main",
        "parameters": {}
      },
      "throws": true
    },
    {
      "title": "call - data types - if second parameter is a boolean (false), throws an exception",
      "functions": [
        {
          "name": "greet",
          "definition": {
            "parameters": [
              {
                "name": "greeting",
                "default": "hi"
              }
            ],
            "logic": [
              {
                "return": [
                  {
                    "var": "greeting"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "main",
          "definition": {
            "parameters": [],
            "logic": [
              {
                "return": [
                  {
                    "call": [
                      "greet",
                      false
                    ]
                  }
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "main",
        "parameters": {}
      },
      "throws": true
    },
    {
      "title": "call - data types - if second parameter is a boolean (true), throws an exception",
      "functions": [
        {
          "name": "greet",
          "definition": {
            "parameters": [
              {
                "name": "greeting",
                "default": "hi"
              }
            ],
            "logic": [
              {
                "return": [
                  {
                    "var": "greeting"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "main",
          "definition": {
            "parameters": [],
            "logic": [
              {
                "return": [
                  {
                    "call": [
                      "greet",
                      true
                    ]
                  }
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "main",
        "parameters": {}
      },
      "throws": true
    },
    {
      "title": "call - data types - if second parameter is a number, throws an exception",
      "functions": [
        {
          "name": "greet",
          "definition": {
            "parameters": [
              {
                "name": "greeting",
                "default": "hi"
              }
            ],
            "logic": [
              {
                "return": [
                  {
                    "var": "greeting"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "main",
          "definition": {
            "parameters": [],
            "logic": [
              {
                "return": [
                  {
                    "call": [
                      "greet",
                      5
                    ]
                  }
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "main",
        "parameters": {}
      },
      "throws": true
    },
    {
      "title": "call - data types - if second parameter is a string, throws an exception",
      "functions": [
        {
          "name": "greet",
          "definition": {
            "parameters": [
              {
                "name": "greeting",
                "default": "hi"
              }
            ],
            "logic": [
              {
                "return": [
                  {
                    "var": "greeting"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "main",
          "definition": {
            "parameters": [],
            "logic": [
              {
                "return": [
                  {
                    "call": [
                      "greet",
                      "hello"
                    ]
                  }
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "main",
        "parameters": {}
      },
      "throws": true
    },
    {
      "title": "call - data types - if second parameter is absent, calls the function with empty parameters",
      "functions": [
        {
          "name": "greet",
          "definition": {
            "parameters": [
              {
                "name": "greeting",
                "default": "hi"
              }
            ],
            "logic": [
              {
                "return": [
                  {
                    "var": "greeting"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "main",
          "definition": {
            "parameters": [],
            "logic": [
              {
                "return": [
                  {
                    "call": [
                      "greet"
                    ]
                  }
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "main",
        "parameters": {}
      },
      "exp": "hi"
    },
    {
      "title": "call - data types - if second parameter is an array, throws an exception",
      "functions": [
        {
          "name": "greet",
          "definition": {
            "parameters": [
              {
                "name": "greeting",
                "default": "hi"
              }
            ],
            "logic": [
              {
                "return": [
                  {
                    "var": "greeting"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "main",
          "definition": {
            "parameters": [],
            "logic": [
              {
                "return": [
                  {
                    "call": [
                      "greet",
                      [
                        "hello"
                      ]
                    ]
                  }
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "main",
        "parameters": {}
      },
      "throws": true
    },
    {
      "title": "call - data types - if second parameter is null, calls the function with empty parameters",
      "functions": [
        {
          "name": "greet",
          "definition": {
            "parameters": [
              {
                "name": "greeting",
                "default": "hi"
              }
            ],
            "logic": [
              {
                "return": [
                  {
                    "var": "greeting"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "main",
          "definition": {
            "parameters": [],
            "logic": [
              {
                "return": [
                  {
                    "call": [
                      "greet",
                      null
                    ]
                  }
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "main",
        "parameters": {}
      },
      "exp": "hi"
    },
    {
      "title": "call - throws an exception if the function does not exist",
      "functions": [
        {
          "name": "main",
          "definition": {
            "parameters": [],
            "logic": [
              {
                "return": [
                  {
                    "call": [
                      "noSuchFunction",
                      {}
                    ]
                  }
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "main",
        "parameters": {}
      },
      "throws": true
    },
    {
      "title": "comparison - should work as binary - #1 with [0,0]",
      "logic": {
        "<=": [
          {
            "var": "0"
          },
          {
            "var": "1"
          }
        ]
      },
      "data": [
        0,
        0
      ],
      "exp": true
    },
    {
      "title": "comparison - should work as binary - #2 with [0,1]",
      "logic": {
        "<=": [
          {
            "var": "0"
          },
          {
            "var": "1"
          }
        ]
      },
      "data": [
        0,
        1
      ],
      "exp": true
    },
    {
      "title": "comparison - should work as binary - #3 with [1,1]",
      "logic": {
        "<=": [
          {
            "var": "0"
          },
          {
            "var": "1"
          }
        ]
      },
      "data": [
        1,
        1
      ],
      "exp": true
    },
    {
      "title": "comparison - should work as binary - #4 with [1,0]",
      "logic": {
        "<=": [
          {
            "var": "0"
          },
          {
            "var": "1"
          }
        ]
      },
      "data": [
        1,
        0
      ],
      "exp": false
    },
    {
      "title": "comparison - should work as ternary ('between') - #1 with [0,1,2]",
      "logic": {
        "<=": [
          {
            "var": "0"
          },
          {
            "var": "1"
          },
          {
            "var": "2"
          }
        ]
      },
      "data": [
        0,
        1,
        2
      ],
      "exp": true
    },
    {
      "title": "comparison - should work as ternary ('between') - #2 with [0,2,1]",
      "logic": {
        "<=": [
          {
            "var": "0"
          },
          {
            "var": "1"
          },
          {
            "var": "2"
          }
        ]
      },
      "data": [
        0,
        2,
        1
      ],
      "exp": false
    },
    {
      "title": "comparison - should work as ternary ('between') - #3 with [1,2,0]",
      "logic": {
        "<=": [
          {
            "var": "0"
          },
          {
            "var": "1"
          },
          {
            "var": "2"
          }
        ]
      },
      "data": [
        1,
        2,
        0
      ],
      "exp": false
    },
    {
      "title": "comparison - should work as ternary ('between') - #4 with [1,0,2]",
      "logic": {
        "<=": [
          {
            "var": "0"
          },
          {
            "var": "1"
          },
          {
            "var": "2"
          }
        ]
      },
      "data": [
        1,
        0,
        2
      ],
      "exp": false
    },
    {
      "title": "comparison - should work as ternary ('between') - #5 with [2,0,1]",
      "logic": {
        "<=": [
          {
            "var": "0"
          },
          {
            "var": "1"
          },
          {
            "var": "2"
          }
        ]
      },
      "data": [
        2,
        0,
        1
      ],
      "exp": false
    },
    {
      "title": "comparison - should work as ternary ('between') - #6 with [2,1,0]",
      "logic": {
        "<=": [
          {
            "var": "0"
          },
          {
            "var": "1"
          },
          {
            "var": "2"
          }
        ]
      },
      "data": [
        2,
        1,
        0
      ],
      "exp": false
    },
    {
      "title": "concatenate - concatenates any number of arguments",
      "logic": {
        "concatenate": [
          {
            "var": "one"
          },
          {
            "var": "two"
          },
          "hello",
          "world"
        ]
      },
      "data": {
        "one": "one",
        "two": 2
      },
      "exp": "one2helloworld"
    },
    {
      "title": "concatenate - concatenates strings",
      "logic": {
        "concatenate": [
          {
            "var": "greeting"
          },
          " ",
          {
            "var": "name"
          },
          "!"
        ]
      },
      "data": {
        "greeting": "Hello",
        "name": "John"
      },
      "exp": "Hello John!"
    },
    {
      "title": "concatenate - concatenates strings and numbers",
      "logic": {
        "concatenate": [
          {
            "var": "greeting"
          },
          {
            "var": "number"
          }
        ]
      },
      "data": {
        "greeting": "Hello",
        "number": 123
      },
      "exp": "Hello123"
    },
    {
      "title": "concatenate - concatenates two numbers instead of adding them",
      "logic": {
        "concatenate": [
          {
            "var": "one"
          },
          {
            "var": "two"
          }
        ]
      },
      "data": {
        "one": 1,
        "two": 2
      },
      "exp": "12"
    },
    {
      "title": "concatenate - data types - if parameter is a boolean (false), treats it as a string",
      "logic": {
        "concatenate": [
          "hello",
          {
            "var": "param"
          }
        ]
      },
      "data": {
        "param": false
      },
      "exp": "hellofalse"
    },
    {
      "title": "concatenate - data types - if parameter is a boolean (true), treats it as a string",
      "logic": {
        "concatenate": [
          "hello",
          {
            "var": "param"
          }
        ]
      },
      "data": {
        "param": true
      },
      "exp": "hellotrue"
    },
    {
      "title": "concatenate - data types - if parameter is a number (float), treats it as a string",
      "logic": {
        "concatenate": [
          "hello",
          {
            "var": "param"
          }
        ]
      },
      "data": {
        "param": 1.1
      },
      "exp": "hello1.1"
    },
    {
      "title": "concatenate - data types - if parameter is a number (integer), treats it as a string",
      "logic": {
        "concatenate": [
          "hello",
          {
            "var": "param"
          }
        ]
      },
      "data": {
        "param": 1
      },
      "exp": "hello1"
    },
    {
      "title": "concatenate - data types - if parameter is an array, treats it as an empty string",
      "logic": {
        "concatenate": [
          "hello",
          {
            "var": "param"
          }
        ]
      },
      "data": {
        "param": [
          "world"
        ]
      },
      "exp": "hello"
    },
    {
      "title": "concatenate - data types - if parameter is an object, treats it as an empty string",
      "logic": {
        "concatenate": [
          "hello",
          {
            "var": "param"
          }
        ]
      },
      "data": {
        "param": {
          "target": "World"
        }
      },
      "exp": "hello"
    },
    {
      "title": "concatenate - data types - if parameter is null, treats it as an empty string",
      "logic": {
        "concatenate": [
          "hello",
          {
            "var": "param"
          }
        ]
      },
      "data": {
        "param": null
      },
      "exp": "hello"
    },
    {
      "title": "construction and comparing of date-times  - comparison of date-times constructed using plusTime - #1 with \"2021-06-02T16:00:00+00:00\"",
      "logic": {
        "before": [
          {
            "plusTime": [
              {
                "var": ""
              },
              0,
              "day"
            ]
          },
          {
            "plusTime": [
              "2021-06-01T00:00:00+00:00",
              40,
              "hour"
            ]
          }
        ]
      },
      "data": "2021-06-02T16:00:00+00:00",
      "exp": false
    },
    {
      "title": "construction and comparing of date-times  - comparison of date-times constructed using plusTime - #2 with \"2021-06-02T15:59:59+00:00\"",
      "logic": {
        "before": [
          {
            "plusTime": [
              {
                "var": ""
              },
              0,
              "day"
            ]
          },
          {
            "plusTime": [
              "2021-06-01T00:00:00+00:00",
              40,
              "hour"
            ]
          }
        ]
      },
      "data": "2021-06-02T15:59:59+00:00",
      "exp": true
    },
    {
      "title": "construction and comparing of date-times  - comparison of date-times constructed using plusTime - #3 with \"2021-06-02T00:00:00+00:00\"",
      "logic": {
        "before": [
          {
            "plusTime": [
              {
                "var": ""
              },
              0,
              "day"
            ]
          },
          {
            "plusTime": [
              "2021-06-01T00:00:00+00:00",
              40,
              "hour"
            ]
          }
        ]
      },
      "data": "2021-06-02T00:00:00+00:00",
      "exp": true
    },
    {
      "title": "construction and comparing of date-times  - comparisons of date-times constructed using plusTime across DST transitions - #1 with {\"d1\":\"2020-12-24\",\"d2\":\"2021-06-23T00:00:00Z\"}",
      "logic": {
        "not-before": [
          {
            "plusTime": [
              {
                "var": "d1"
              },
              0,
              "day"
            ]
          },
          {
            "plusTime": [
              {
                "var": "d2"
              },
              -180,
              "day"
            ]
          }
        ]
      },
      "data": {
        "d1": "2020-12-24",
        "d2": "2021-06-23T00:00:00Z"
      },
      "exp": false
    },
    {
      "title": "construction and comparing of date-times  - comparisons of date-times constructed using plusTime across DST transitions - #2 with {\"d1\":\"2020-12-25\",\"d2\":\"2021-06-23T00:00:00Z\"}",
      "logic": {
        "not-before": [
          {
            "plusTime": [
              {
                "var": "d1"
              },
              0,
              "day"
            ]
          },
          {
            "plusTime": [
              {
                "var": "d2"
              },
              -180,
              "day"
            ]
          }
        ]
      },
      "data": {
        "d1": "2020-12-25",
        "d2": "2021-06-23T00:00:00Z"
      },
      "exp": true
    },
    {
      "title": "construction and comparing of date-times  - comparisons of date-times constructed using plusTime across DST transitions - #3 with {\"d1\":\"2020-12-26\",\"d2\":\"2021-06-23T00:00:00Z\"}",
      "logic": {
        "not-before": [
          {
            "plusTime": [
              {
                "var": "d1"
              },
              0,
              "day"
            ]
          },
          {
            "plusTime": [
              {
                "var": "d2"
              },
              -180,
              "day"
            ]
          }
        ]
      },
      "data": {
        "d1": "2020-12-26",
        "d2": "2021-06-23T00:00:00Z"
      },
      "exp": true
    },
    {
      "title": "construction and comparing of date-times  - tri-comparison of dates (e.g., for VR-EU-0003) - #1 with {\"dateObject\":{\"current\":\"2021-05-02T00:00:00+00:00\"},\"vaccination\":{\"date\":\"2021-05-01T00:00:00+00:00\"}}",
      "logic": {
        "not-after": [
          {
            "plusTime": [
              {
                "var": "vaccination.date"
              },
              14,
              "day"
            ]
          },
          {
            "plusTime": [
              {
                "var": "dateObject.current"
              },
              0,
              "day"
            ]
          },
          {
            "plusTime": [
              {
                "var": "vaccination.date"
              },
              365,
              "day"
            ]
          }
        ]
      },
      "data": {
        "dateObject": {
          "current": "2021-05-02T00:00:00+00:00"
        },
        "vaccination": {
          "date": "2021-05-01T00:00:00+00:00"
        }
      },
      "exp": false
    },
    {
      "title": "construction and comparing of date-times  - tri-comparison of dates (e.g., for VR-EU-0003) - #2 with {\"dateObject\":{\"current\":\"2021-05-14T00:00:00+00:00\"},\"vaccination\":{\"date\":\"2021-05-01T00:00:00+00:00\"}}",
      "logic": {
        "not-after": [
          {
            "plusTime": [
              {
                "var": "vaccination.date"
              },
              14,
              "day"
            ]
          },
          {
            "plusTime": [
              {
                "var": "dateObject.current"
              },
              0,
              "day"
            ]
          },
          {
            "plusTime": [
              {
                "var": "vaccination.date"
              },
              365,
              "day"
            ]
          }
        ]
      },
      "data": {
        "dateObject": {
          "current": "2021-05-14T00:00:00+00:00"
        },
        "vaccination": {
          "date": "2021-05-01T00:00:00+00:00"
        }
      },
      "exp": false
    },
    {
      "title": "construction and comparing of date-times  - tri-comparison of dates (e.g., for VR-EU-0003) - #3 with {\"dateObject\":{\"current\":\"2021-05-15T00:00:00+00:00\"},\"vaccination\":{\"date\":\"2021-05-01T00:00:00+00:00\"}}",
      "logic": {
        "not-after": [
          {
            "plusTime": [
              {
                "var": "vaccination.date"
              },
              14,
              "day"
            ]
          },
          {
            "plusTime": [
              {
                "var": "dateObject.current"
              },
              0,
              "day"
            ]
          },
          {
            "plusTime": [
              {
                "var": "vaccination.date"
              },
              365,
              "day"
            ]
          }
        ]
      },
      "data": {
        "dateObject": {
          "current": "2021-05-15T00:00:00+00:00"
        },
        "vaccination": {
          "date": "2021-05-01T00:00:00+00:00"
        }
      },
      "exp": true
    },
    {
      "title": "construction and comparing of date-times  - tri-comparison of dates (e.g., for VR-EU-0003) - #4 with {\"dateObject\":{\"current\":\"2022-04-30T00:00:00+00:00\"},\"vaccination\":{\"date\":\"2021-05-01T00:00:00+00:00\"}}",
      "logic": {
        "not-after": [
          {
            "plusTime": [
              {
                "var": "vaccination.date"
              },
              14,
              "day"
            ]
          },
          {
            "plusTime": [
              {
                "var": "dateObject.current"
              },
              0,
              "day"
            ]
          },
          {
            "plusTime": [
              {
                "var": "vaccination.date"
              },
              365,
              "day"
            ]
          }
        ]
      },
      "data": {
        "dateObject": {
          "current": "2022-04-30T00:00:00+00:00"
        },
        "vaccination": {
          "date": "2021-05-01T00:00:00+00:00"
        }
      },
      "exp": true
    },
    {
      "title": "construction and comparing of date-times  - tri-comparison of dates (e.g., for VR-EU-0003) - #5 with {\"dateObject\":{\"current\":\"2022-05-01T00:00:00+00:00\"},\"vaccination\":{\"date\":\"2021-05-01T00:00:00+00:00\"}}",
      "logic": {
        "not-after": [
          {
            "plusTime": [
              {
                "var": "vaccination.date"
              },
              14,
              "day"
            ]
          },
          {
            "plusTime": [
              {
                "var": "dateObject.current"
              },
              0,
              "day"
            ]
          },
          {
            "plusTime": [
              {
                "var": "vaccination.date"
              },
              365,
              "day"
            ]
          }
        ]
      },
      "data": {
        "dateObject": {
          "current": "2022-05-01T00:00:00+00:00"
        },
        "vaccination": {
          "date": "2021-05-01T00:00:00+00:00"
        }
      },
      "exp": true
    },
    {
      "title": "construction and comparing of date-times  - tri-comparison of dates (e.g., for VR-EU-0003) - #6 with {\"dateObject\":{\"current\":\"2022-05-02T00:00:00+00:00\"},\"vaccination\":{\"date\":\"2021-05-01T00:00:00+00:00\"}}",
      "logic": {
        "not-after": [
          {
            "plusTime": [
              {
                "var": "vaccination.date"
              },
              14,
              "day"
            ]
          },
          {
            "plusTime": [
              {
                "var": "dateObject.current"
              },
              0,
              "day"
            ]
          },
          {
            "plusTime": [
              {
                "var": "vaccination.date"
              },
              365,
              "day"
            ]
          }
        ]
      },
      "data": {
        "dateObject": {
          "current": "2022-05-02T00:00:00+00:00"
        },
        "vaccination": {
          "date": "2021-05-01T00:00:00+00:00"
        }
      },
      "exp": false
    },
    {
      "title": "count - counts the number of elements in an array",
      "logic": {
        "count": [
          {
            "var": "elements"
          }
        ]
      },
      "data": {
        "elements": [
          3,
          4,
          5
        ]
      },
      "exp": 3
    },
    {
      "title": "count - data types - if first parameter is a boolean (false), returns 0",
      "logic": {
        "count": [
          {
            "var": "elements"
          }
        ]
      },
      "data": {
        "elements": false
      },
      "exp": 0
    },
    {
      "title": "count - data types - if first parameter is a boolean (true), returns 0",
      "logic": {
        "count": [
          {
            "var": "elements"
          }
        ]
      },
      "data": {
        "elements": true
      },
      "exp": 0
    },
    {
      "title": "count - data types - if first parameter is a number, returns 0",
      "logic": {
        "count": [
          {
            "var": "elements"
          }
        ]
      },
      "data": {
        "elements": 5
      },
      "exp": 0
    },
    {
      "title": "count - data types - if first parameter is a string, returns 0",
      "logic": {
        "count": [
          {
            "var": "elements"
          }
        ]
      },
      "data": {
        "elements": "not-an-array"
      },
      "exp": 0
    },
    {
      "title": "count - data types - if first parameter is an object, returns 0",
      "logic": {
        "count": [
          {
            "var": "elements"
          }
        ]
      },
      "data": {
        "elements": {}
      },
      "exp": 0
    },
    {
      "title": "count - data types - if first parameter is null, returns 0",
      "logic": {
        "count": [
          {
            "var": "elements"
          }
        ]
      },
      "data": {
        "elements": null
      },
      "exp": 0
    },
    {
      "title": "declare - can be used in a script",
      "logic": {
        "script": [
          {
            "declare": [
              "greeting",
              "hello"
            ]
          }
        ]
      },
      "data": {},
      "exp": null
    },
    {
      "title": "declare - data types - if first parameter is a boolean (false), throws an exception",
      "logic": {
        "script": [
          {
            "declare": [
              {
                "var": "param"
              },
              "hello"
            ]
          },
          {
            "return": [
              {
                "var": "greeting"
              }
            ]
          }
        ]
      },
      "data": {
        "param": false
      },
      "throws": true
    },
    {
      "title": "declare - data types - if first parameter is a boolean (true), throws an exception",
      "logic": {
        "script": [
          {
            "declare": [
              {
                "var": "param"
              },
              "hello"
            ]
          },
          {
            "return": [
              {
                "var": "greeting"
              }
            ]
          }
        ]
      },
      "data": {
        "param": true
      },
      "throws": true
    },
    {
      "title": "declare - data types - if first parameter is a number, throws an exception",
      "logic": {
        "script": [
          {
            "declare": [
              {
                "var": "param"
              },
              "hello"
            ]
          },
          {
            "return": [
              {
                "var": "greeting"
              }
            ]
          }
        ]
      },
      "data": {
        "param": 5
      },
      "throws": true
    },
    {
      "title": "declare - data types - if first parameter is a string, creates a variable with the given name",
      "logic": {
        "script": [
          {
            "declare": [
              {
                "var": "param"
              },
              "hello"
            ]
          },
          {
            "return": [
              {
                "var": "greeting"
              }
            ]
          }
        ]
      },
      "data": {
        "param": "greeting"
      },
      "exp": "hello"
    },
    {
      "title": "declare - data types - if first parameter is an array, throws an exception",
      "logic": {
        "script": [
          {
            "declare": [
              {
                "var": "param"
              },
              "hello"
            ]
          },
          {
            "return": [
              {
                "var": "greeting"
              }
            ]
          }
        ]
      },
      "data": {
        "param": [
          "hello"
        ]
      },
      "throws": true
    },
    {
      "title": "declare - data types - if first parameter is an object, throws an exception",
      "logic": {
        "script": [
          {
            "declare": [
              {
                "var": "param"
              },
              "hello"
            ]
          },
          {
            "return": [
              {
                "var": "greeting"
              }
            ]
          }
        ]
      },
      "data": {
        "param": {
          "hello": "world"
        }
      },
      "throws": true
    },
    {
      "title": "declare - data types - if first parameter is null, throws an exception",
      "logic": {
        "script": [
          {
            "declare": [
              {
                "var": "param"
              },
              "hello"
            ]
          },
          {
            "return": [
              {
                "var": "greeting"
              }
            ]
          }
        ]
      },
      "data": {
        "param": null
      },
      "throws": true
    },
    {
      "title": "declare - data types - if second parameter is a boolean (false), sets the value accordingly",
      "logic": {
        "script": [
          {
            "declare": [
              "param",
              {
                "var": "value"
              }
            ]
          },
          {
            "return": [
              {
                "var": "param"
              }
            ]
          }
        ]
      },
      "data": {
        "value": false
      },
      "exp": false
    },
    {
      "title": "declare - data types - if second parameter is a boolean (true), sets the value accordingly",
      "logic": {
        "script": [
          {
            "declare": [
              "param",
              {
                "var": "value"
              }
            ]
          },
          {
            "return": [
              {
                "var": "param"
              }
            ]
          }
        ]
      },
      "data": {
        "value": true
      },
      "exp": true
    },
    {
      "title": "declare - data types - if second parameter is a number (float), sets the value accordingly",
      "logic": {
        "script": [
          {
            "declare": [
              "param",
              {
                "var": "value"
              }
            ]
          },
          {
            "return": [
              {
                "var": "param"
              }
            ]
          }
        ]
      },
      "data": {
        "value": 5.5
      },
      "exp": 5.5
    },
    {
      "title": "declare - data types - if second parameter is a number (integer), sets the value accordingly",
      "logic": {
        "script": [
          {
            "declare": [
              "param",
              {
                "var": "value"
              }
            ]
          },
          {
            "return": [
              {
                "var": "param"
              }
            ]
          }
        ]
      },
      "data": {
        "value": 5
      },
      "exp": 5
    },
    {
      "title": "declare - data types - if second parameter is an array, sets the value accordingly",
      "logic": {
        "script": [
          {
            "declare": [
              "param",
              {
                "var": "value"
              }
            ]
          },
          {
            "return": [
              {
                "var": "param"
              }
            ]
          }
        ]
      },
      "data": {
        "value": [
          1,
          2,
          3
        ]
      },
      "exp": [
        1,
        2,
        3
      ]
    },
    {
      "title": "declare - data types - if second parameter is an object, sets the value accordingly",
      "logic": {
        "script": [
          {
            "declare": [
              "param",
              {
                "var": "value"
              }
            ]
          },
          {
            "return": [
              {
                "var": "param"
              }
            ]
          }
        ]
      },
      "data": {
        "value": {
          "hello": "world"
        }
      },
      "exp": {
        "hello": "world"
      }
    },
    {
      "title": "declare - data types - if second parameter is null, sets the value accordingly",
      "logic": {
        "script": [
          {
            "declare": [
              "param",
              {
                "var": "value"
              }
            ]
          },
          {
            "return": [
              {
                "var": "param"
              }
            ]
          }
        ]
      },
      "data": {
        "value": null
      },
      "exp": null
    },
    {
      "title": "declare - declares a variable",
      "logic": {
        "script": [
          {
            "declare": [
              "greeting",
              "hello"
            ]
          },
          {
            "return": [
              {
                "var": "greeting"
              }
            ]
          }
        ]
      },
      "data": {},
      "exp": "hello"
    },
    {
      "title": "declare - overwrites variable from the data context",
      "logic": {
        "script": [
          {
            "declare": [
              "greeting",
              "hello"
            ]
          },
          {
            "return": [
              {
                "var": "greeting"
              }
            ]
          }
        ]
      },
      "data": {
        "greeting": "hola!"
      },
      "exp": "hello"
    },
    {
      "title": "declare - supports var statements for the identifier",
      "logic": {
        "script": [
          {
            "declare": [
              {
                "var": "param"
              },
              "hello"
            ]
          },
          {
            "return": [
              {
                "var": "greeting"
              }
            ]
          }
        ]
      },
      "data": {
        "param": "greeting"
      },
      "exp": "hello"
    },
    {
      "title": "declare - supports var statements for the value",
      "logic": {
        "script": [
          {
            "declare": [
              "greeting",
              {
                "var": "value"
              }
            ]
          },
          {
            "return": [
              {
                "var": "greeting"
              }
            ]
          }
        ]
      },
      "data": {
        "value": "hello"
      },
      "exp": "hello"
    },
    {
      "title": "detect missing values - detect missing integer value - #1 with {\"payload\":{}}",
      "logic": {
        "if": [
          {
            "var": "payload.f"
          },
          {
            "!": [
              {
                "===": [
                  {
                    "var": "payload.f"
                  },
                  42
                ]
              }
            ]
          },
          true
        ]
      },
      "data": {
        "payload": {}
      },
      "exp": true
    },
    {
      "title": "detect missing values - detect missing integer value - #2 with {\"payload\":{\"f\":null}}",
      "logic": {
        "if": [
          {
            "var": "payload.f"
          },
          {
            "!": [
              {
                "===": [
                  {
                    "var": "payload.f"
                  },
                  42
                ]
              }
            ]
          },
          true
        ]
      },
      "data": {
        "payload": {
          "f": null
        }
      },
      "exp": true
    },
    {
      "title": "detect missing values - detect missing integer value - #3 with {\"payload\":{\"f\":0}}",
      "logic": {
        "if": [
          {
            "var": "payload.f"
          },
          {
            "!": [
              {
                "===": [
                  {
                    "var": "payload.f"
                  },
                  42
                ]
              }
            ]
          },
          true
        ]
      },
      "data": {
        "payload": {
          "f": 0
        }
      },
      "exp": true
    },
    {
      "title": "detect missing values - detect missing integer value - #4 with {\"payload\":{\"f\":42}}",
      "logic": {
        "if": [
          {
            "var": "payload.f"
          },
          {
            "!": [
              {
                "===": [
                  {
                    "var": "payload.f"
                  },
                  42
                ]
              }
            ]
          },
          true
        ]
      },
      "data": {
        "payload": {
          "f": 42
        }
      },
      "exp": false
    },
    {
      "title": "detect missing values - detect missing integer value - #5 with {\"payload\":{\"f\":37}}",
      "logic": {
        "if": [
          {
            "var": "payload.f"
          },
          {
            "!": [
              {
                "===": [
                  {
                    "var": "payload.f"
                  },
                  42
                ]
              }
            ]
          },
          true
        ]
      },
      "data": {
        "payload": {
          "f": 37
        }
      },
      "exp": true
    },
    {
      "title": "detect missing values - detect missing string value - #1 with {\"payload\":{}}",
      "logic": {
        "if": [
          {
            "var": "payload.f"
          },
          {
            "!": [
              {
                "===": [
                  {
                    "var": "payload.f"
                  },
                  "foo"
                ]
              }
            ]
          },
          true
        ]
      },
      "data": {
        "payload": {}
      },
      "exp": true
    },
    {
      "title": "detect missing values - detect missing string value - #2 with {\"payload\":{\"f\":null}}",
      "logic": {
        "if": [
          {
            "var": "payload.f"
          },
          {
            "!": [
              {
                "===": [
                  {
                    "var": "payload.f"
                  },
                  "foo"
                ]
              }
            ]
          },
          true
        ]
      },
      "data": {
        "payload": {
          "f": null
        }
      },
      "exp": true
    },
    {
      "title": "detect missing values - detect missing string value - #3 with {\"payload\":{\"f\":\"\"}}",
      "logic": {
        "if": [
          {
            "var": "payload.f"
          },
          {
            "!": [
              {
                "===": [
                  {
                    "var": "payload.f"
                  },
                  "foo"
                ]
              }
            ]
          },
          true
        ]
      },
      "data": {
        "payload": {
          "f": ""
        }
      },
      "exp": true
    },
    {
      "title": "detect missing values - detect missing string value - #4 with {\"payload\":{\"f\":\"foo\"}}",
      "logic": {
        "if": [
          {
            "var": "payload.f"
          },
          {
            "!": [
              {
                "===": [
                  {
                    "var": "payload.f"
                  },
                  "foo"
                ]
              }
            ]
          },
          true
        ]
      },
      "data": {
        "payload": {
          "f": "foo"
        }
      },
      "exp": false
    },
    {
      "title": "detect missing values - detect missing string value - #5 with {\"payload\":{\"f\":\"bar\"}}",
      "logic": {
        "if": [
          {
            "var": "payload.f"
          },
          {
            "!": [
              {
                "===": [
                  {
                    "var": "payload.f"
                  },
                  "foo"
                ]
              }
            ]
          },
          true
        ]
      },
      "data": {
        "payload": {
          "f": "bar"
        }
      },
      "exp": true
    },
    {
      "title": "diffTime - data types - throws if first parameter is a boolean (false)",
      "logic": {
        "diffTime": [
          false,
          {
            "var": "right"
          },
          "year"
        ]
      },
      "data": {
        "left": "2021-11-12T10:59:00Z",
        "right": "2000-11-12T00:00:00Z"
      },
      "throws": true
    },
    {
      "title": "diffTime - data types - throws if first parameter is a boolean (true)",
      "logic": {
        "diffTime": [
          true,
          {
            "var": "right"
          },
          "year"
        ]
      },
      "data": {
        "left": "2021-11-12T10:59:00Z",
        "right": "2000-11-12T00:00:00Z"
      },
      "throws": true
    },
    {
      "title": "diffTime - data types - throws if first parameter is a number",
      "logic": {
        "diffTime": [
          123,
          {
            "var": "right"
          },
          "year"
        ]
      },
      "data": {
        "left": "2021-11-12T10:59:00Z",
        "right": "2000-11-12T00:00:00Z"
      },
      "throws": true
    },
    {
      "title": "diffTime - data types - throws if first parameter is an array",
      "logic": {
        "diffTime": [
          [],
          {
            "var": "right"
          },
          "year"
        ]
      },
      "data": {
        "left": "2021-11-12T10:59:00Z",
        "right": "2000-11-12T00:00:00Z"
      },
      "throws": true
    },
    {
      "title": "diffTime - data types - throws if first parameter is an object",
      "logic": {
        "diffTime": [
          {},
          {
            "var": "right"
          },
          "year"
        ]
      },
      "data": {
        "left": "2021-11-12T10:59:00Z",
        "right": "2000-11-12T00:00:00Z"
      },
      "throws": true
    },
    {
      "title": "diffTime - data types - throws if first parameter is non-date string",
      "logic": {
        "diffTime": [
          "hello",
          {
            "var": "right"
          },
          "year"
        ]
      },
      "data": {
        "left": "2021-11-12T10:59:00Z",
        "right": "2000-11-12T00:00:00Z"
      },
      "throws": true
    },
    {
      "title": "diffTime - data types - throws if first parameter is null",
      "logic": {
        "diffTime": [
          null,
          {
            "var": "right"
          },
          "year"
        ]
      },
      "data": {
        "left": "2021-11-12T10:59:00Z",
        "right": "2000-11-12T00:00:00Z"
      },
      "throws": true
    },
    {
      "title": "diffTime - data types - throws if second parameter is a boolean (false)",
      "logic": {
        "diffTime": [
          {
            "var": "left"
          },
          false,
          "year"
        ]
      },
      "data": {
        "left": "2021-11-12T10:59:00Z",
        "right": "2000-11-12T00:00:00Z"
      },
      "throws": true
    },
    {
      "title": "diffTime - data types - throws if second parameter is a boolean (true)",
      "logic": {
        "diffTime": [
          {
            "var": "left"
          },
          true,
          "year"
        ]
      },
      "data": {
        "left": "2021-11-12T10:59:00Z",
        "right": "2000-11-12T00:00:00Z"
      },
      "throws": true
    },
    {
      "title": "diffTime - data types - throws if second parameter is a non-date string",
      "logic": {
        "diffTime": [
          {
            "var": "left"
          },
          "hello",
          "year"
        ]
      },
      "data": {
        "left": "2021-11-12T10:59:00Z",
        "right": "2000-11-12T00:00:00Z"
      },
      "throws": true
    },
    {
      "title": "diffTime - data types - throws if second parameter is a number",
      "logic": {
        "diffTime": [
          {
            "var": "left"
          },
          123,
          "year"
        ]
      },
      "data": {
        "left": "2021-11-12T10:59:00Z",
        "right": "2000-11-12T00:00:00Z"
      },
      "throws": true
    },
    {
      "title": "diffTime - data types - throws if second parameter is an array",
      "logic": {
        "diffTime": [
          {
            "var": "left"
          },
          [],
          "year"
        ]
      },
      "data": {
        "left": "2021-11-12T10:59:00Z",
        "right": "2000-11-12T00:00:00Z"
      },
      "throws": true
    },
    {
      "title": "diffTime - data types - throws if second parameter is an object",
      "logic": {
        "diffTime": [
          {
            "var": "left"
          },
          {},
          "year"
        ]
      },
      "data": {
        "left": "2021-11-12T10:59:00Z",
        "right": "2000-11-12T00:00:00Z"
      },
      "throws": true
    },
    {
      "title": "diffTime - data types - throws if second parameter is null",
      "logic": {
        "diffTime": [
          {
            "var": "left"
          },
          null,
          "year"
        ]
      },
      "data": {
        "left": "2021-11-12T10:59:00Z",
        "right": "2000-11-12T00:00:00Z"
      },
      "throws": true
    },
    {
      "title": "diffTime - data types - throws if third parameter is not a supported value",
      "logic": {
        "diffTime": [
          {
            "var": "left"
          },
          {
            "var": "right"
          },
          "decade"
        ]
      },
      "data": {
        "left": "2021-11-12T10:59:00Z",
        "right": "2000-11-12T00:00:00Z"
      },
      "throws": true
    },
    {
      "title": "diffTime - returns a negative value if a is before b",
      "logic": {
        "diffTime": [
          {
            "var": "left"
          },
          {
            "var": "right"
          },
          "second"
        ]
      },
      "data": {
        "left": "2021-11-12T00:00:00Z",
        "right": "2021-11-12T00:00:10Z"
      },
      "exp": -10
    },
    {
      "title": "diffTime - supports hours",
      "logic": {
        "diffTime": [
          {
            "var": "left"
          },
          {
            "var": "right"
          },
          "hour"
        ]
      },
      "data": {
        "left": "2021-11-12T10:59:00Z",
        "right": "2021-11-12T00:00:00Z"
      },
      "exp": 10
    },
    {
      "title": "diffTime - supports minutes",
      "logic": {
        "diffTime": [
          {
            "var": "left"
          },
          {
            "var": "right"
          },
          "minute"
        ]
      },
      "data": {
        "left": "2021-11-12T00:10:59Z",
        "right": "2021-11-12T00:00:00Z"
      },
      "exp": 10
    },
    {
      "title": "diffTime - supports months (Jan/Apr)",
      "logic": {
        "diffTime": [
          {
            "var": "left"
          },
          {
            "var": "right"
          },
          "month"
        ]
      },
      "data": {
        "left": "2022-04-30T10:00:00Z",
        "right": "2022-01-31T00:00:00Z"
      },
      "exp": 3
    },
    {
      "title": "diffTime - supports months (Jan/Feb)",
      "logic": {
        "diffTime": [
          {
            "var": "left"
          },
          {
            "var": "right"
          },
          "month"
        ]
      },
      "data": {
        "left": "2022-02-28T10:00:00Z",
        "right": "2022-01-31T00:00:00Z"
      },
      "exp": 1
    },
    {
      "title": "diffTime - supports months (Jan/Mar)",
      "logic": {
        "diffTime": [
          {
            "var": "left"
          },
          {
            "var": "right"
          },
          "month"
        ]
      },
      "data": {
        "left": "2022-03-31T10:00:00Z",
        "right": "2022-01-31T00:00:00Z"
      },
      "exp": 2
    },
    {
      "title": "diffTime - supports months across years",
      "logic": {
        "diffTime": [
          {
            "var": "left"
          },
          {
            "var": "right"
          },
          "month"
        ]
      },
      "data": {
        "left": "2022-01-12T10:00:00Z",
        "right": "2021-12-12T00:00:00Z"
      },
      "exp": 1
    },
    {
      "title": "diffTime - supports months for a date in the middle of the month",
      "logic": {
        "diffTime": [
          {
            "var": "left"
          },
          {
            "var": "right"
          },
          "month"
        ]
      },
      "data": {
        "left": "2021-11-12T10:00:00Z",
        "right": "2021-10-12T00:00:00Z"
      },
      "exp": 1
    },
    {
      "title": "diffTime - supports seconds",
      "logic": {
        "diffTime": [
          {
            "var": "left"
          },
          {
            "var": "right"
          },
          "second"
        ]
      },
      "data": {
        "left": "2021-11-12T00:00:10Z",
        "right": "2021-11-12T00:00:00Z"
      },
      "exp": 10
    },
    {
      "title": "diffTime - supports years",
      "logic": {
        "diffTime": [
          {
            "var": "left"
          },
          {
            "var": "right"
          },
          "year"
        ]
      },
      "data": {
        "left": "2021-11-12T10:59:00Z",
        "right": "2000-11-12T00:00:00Z"
      },
      "exp": 21
    },
    {
      "title": "equality operation (===) - should work as expected - #1 with [\"foo\",\"foo\"]",
      "logic": {
        "===": [
          {
            "var": "0"
          },
          {
            "var": "1"
          }
        ]
      },
      "data": [
        "foo",
        "foo"
      ],
      "exp": true
    },
    {
      "title": "equality operation (===) - should work as expected - #2 with [\"foo\",\"bar\"]",
      "logic": {
        "===": [
          {
            "var": "0"
          },
          {
            "var": "1"
          }
        ]
      },
      "data": [
        "foo",
        "bar"
      ],
      "exp": false
    },
    {
      "title": "evaluate - allows to evaluate a JsonFunctions expression",
      "logic": {
        "script": [
          {
            "return": [
              {
                "evaluate": [
                  {
                    "var": "jsonLogicExpression"
                  },
                  {
                    "var": "jsonLogicParameters"
                  }
                ]
              }
            ]
          }
        ]
      },
      "data": {
        "jsonLogicExpression": {
          "+": [
            {
              "var": "a"
            },
            {
              "var": "b"
            }
          ]
        },
        "jsonLogicParameters": {
          "a": 1,
          "b": 2
        }
      },
      "exp": 3
    },
    {
      "title": "evaluate - allows to run EU Business Rules",
      "logic": {
        "script": [
          {
            "declare": [
              "businessRuleParameters",
              {
                "init": [
                  "object",
                  "payload",
                  {
                    "var": "pseudoDcc"
                  }
                ]
              }
            ]
          },
          {
            "declare": [
              "result",
              {
                "map": [
                  {
                    "var": "businessRules"
                  },
                  {
                    "evaluate": [
                      {
                        "var": "it.Logic"
                      },
                      {
                        "var": "businessRuleParameters"
                      }
                    ]
                  },
                  "it"
                ]
              }
            ]
          },
          {
            "return": [
              {
                "var": "result"
              }
            ]
          }
        ]
      },
      "data": {
        "businessRules": [
          {
            "Identifier": "VR-DE-0001",
            "Logic": {
              "if": [
                {
                  "var": "payload.v.0"
                },
                {
                  ">=": [
                    {
                      "var": "payload.v.0.dn"
                    },
                    {
                      "var": "payload.v.0.sd"
                    }
                  ]
                },
                true
              ]
            }
          },
          {
            "Identifier": "VR-DE-0002",
            "Logic": {
              "if": [
                {
                  "var": "payload.v.0"
                },
                {
                  "in": [
                    {
                      "var": "payload.v.0.mp"
                    },
                    [
                      "EU/1/20/1528",
                      "EU/1/20/1507",
                      "EU/1/21/1529",
                      "EU/1/20/1525"
                    ]
                  ]
                },
                true
              ]
            }
          }
        ],
        "pseudoDcc": {
          "v": [
            {
              "mp": "EU/1/20/1528",
              "dn": 1,
              "sd": 3
            }
          ]
        }
      },
      "exp": [
        false,
        true
      ]
    },
    {
      "title": "evaluateFunction - allows to call functions with parameters",
      "functions": [
        {
          "name": "addStaticTestData0001",
          "definition": {
            "parameters": [
              {
                "name": "a"
              },
              {
                "name": "b"
              }
            ],
            "logic": [
              {
                "return": [
                  {
                    "+": [
                      {
                        "var": "a"
                      },
                      {
                        "var": "b"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "addStaticTestData0001",
        "parameters": {
          "a": 3,
          "b": 4
        }
      },
      "exp": 7
    },
    {
      "title": "evaluateFunction - allows to call functions without parameters",
      "functions": [
        {
          "name": "getStaticTestData0001",
          "definition": {
            "parameters": [],
            "logic": [
              {
                "return": [
                  "hello"
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "getStaticTestData0001",
        "parameters": {}
      },
      "data": {},
      "exp": "hello"
    },
    {
      "title": "evaluateFunction - throws an exception if the function does not exist",
      "functions": [],
      "evaluateFunction": {
        "name": "noSuchFunction",
        "parameters": {}
      },
      "throws": true
    },
    {
      "title": "evaluateFunction - uses default parameter values",
      "functions": [
        {
          "name": "addStaticTestData0002",
          "definition": {
            "parameters": [
              {
                "name": "a"
              },
              {
                "name": "b",
                "default": 9
              }
            ],
            "logic": [
              {
                "return": [
                  {
                    "+": [
                      {
                        "var": "a"
                      },
                      {
                        "var": "b"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "addStaticTestData0002",
        "parameters": {
          "a": 4
        }
      },
      "exp": 13
    },
    {
      "title": "extractFromUVCI operation - index=-1 - #1 with null",
      "logic": {
        "extractFromUVCI": [
          {
            "var": ""
          },
          -1
        ]
      },
      "data": null,
      "exp": null
    },
    {
      "title": "extractFromUVCI operation - index=-1 - #2 with \"\"",
      "logic": {
        "extractFromUVCI": [
          {
            "var": ""
          },
          -1
        ]
      },
      "data": "",
      "exp": null
    },
    {
      "title": "extractFromUVCI operation - index=-1 - #3 with \"URN:UVCI:01:NL:187/37512422923\"",
      "logic": {
        "extractFromUVCI": [
          {
            "var": ""
          },
          -1
        ]
      },
      "data": "URN:UVCI:01:NL:187/37512422923",
      "exp": null
    },
    {
      "title": "extractFromUVCI operation - index=0 - #1 with null",
      "logic": {
        "extractFromUVCI": [
          {
            "var": ""
          },
          0
        ]
      },
      "data": null,
      "exp": null
    },
    {
      "title": "extractFromUVCI operation - index=0 - #2 with \"\"",
      "logic": {
        "extractFromUVCI": [
          {
            "var": ""
          },
          0
        ]
      },
      "data": "",
      "exp": ""
    },
    {
      "title": "extractFromUVCI operation - index=0 - #3 with \"URN:UVCI:01:NL:187/37512422923\"",
      "logic": {
        "extractFromUVCI": [
          {
            "var": ""
          },
          0
        ]
      },
      "data": "URN:UVCI:01:NL:187/37512422923",
      "exp": "01"
    },
    {
      "title": "extractFromUVCI operation - index=1 - #1 with null",
      "logic": {
        "extractFromUVCI": [
          {
            "var": ""
          },
          1
        ]
      },
      "data": null,
      "exp": null
    },
    {
      "title": "extractFromUVCI operation - index=1 - #2 with \"\"",
      "logic": {
        "extractFromUVCI": [
          {
            "var": ""
          },
          1
        ]
      },
      "data": "",
      "exp": null
    },
    {
      "title": "extractFromUVCI operation - index=1 - #3 with \"URN:UVCI:01:NL:187/37512422923\"",
      "logic": {
        "extractFromUVCI": [
          {
            "var": ""
          },
          1
        ]
      },
      "data": "URN:UVCI:01:NL:187/37512422923",
      "exp": "NL"
    },
    {
      "title": "extractFromUVCI operation - index=1 - #4 with \"01:NL:187/37512422923\"",
      "logic": {
        "extractFromUVCI": [
          {
            "var": ""
          },
          1
        ]
      },
      "data": "01:NL:187/37512422923",
      "exp": "NL"
    },
    {
      "title": "extractFromUVCI operation - index=1 - #5 with \"URN:UVCI:01:AT:10807843F94AEE0EE5093FBC254BD813#B\"",
      "logic": {
        "extractFromUVCI": [
          {
            "var": ""
          },
          1
        ]
      },
      "data": "URN:UVCI:01:AT:10807843F94AEE0EE5093FBC254BD813#B",
      "exp": "AT"
    },
    {
      "title": "extractFromUVCI operation - index=1 - #6 with \"01:AT:10807843F94AEE0EE5093FBC254BD813#B\"",
      "logic": {
        "extractFromUVCI": [
          {
            "var": ""
          },
          1
        ]
      },
      "data": "01:AT:10807843F94AEE0EE5093FBC254BD813#B",
      "exp": "AT"
    },
    {
      "title": "extractFromUVCI operation - index=2 - #1 with \"URN:UVCI:01:NL:187/37512422923\"",
      "logic": {
        "extractFromUVCI": [
          {
            "var": ""
          },
          2
        ]
      },
      "data": "URN:UVCI:01:NL:187/37512422923",
      "exp": "187"
    },
    {
      "title": "extractFromUVCI operation - index=2 - #2 with \"URN:UVCI:01:AT:10807843F94AEE0EE5093FBC254BD813#B\"",
      "logic": {
        "extractFromUVCI": [
          {
            "var": ""
          },
          2
        ]
      },
      "data": "URN:UVCI:01:AT:10807843F94AEE0EE5093FBC254BD813#B",
      "exp": "10807843F94AEE0EE5093FBC254BD813"
    },
    {
      "title": "extractFromUVCI operation - index=2 - #3 with \"foo/bar::baz#999lizards\"",
      "logic": {
        "extractFromUVCI": [
          {
            "var": ""
          },
          2
        ]
      },
      "data": "foo/bar::baz#999lizards",
      "exp": ""
    },
    {
      "title": "extractFromUVCI operation - index=3 - #1 with \"URN:UVCI:01:NL:187/37512422923\"",
      "logic": {
        "extractFromUVCI": [
          {
            "var": ""
          },
          3
        ]
      },
      "data": "URN:UVCI:01:NL:187/37512422923",
      "exp": "37512422923"
    },
    {
      "title": "extractFromUVCI operation - index=3 - #2 with \"01:NL:187/37512422923\"",
      "logic": {
        "extractFromUVCI": [
          {
            "var": ""
          },
          3
        ]
      },
      "data": "01:NL:187/37512422923",
      "exp": "37512422923"
    },
    {
      "title": "extractFromUVCI operation - index=3 - #3 with \"URN:UVCI:01:AT:10807843F94AEE0EE5093FBC254BD813#B\"",
      "logic": {
        "extractFromUVCI": [
          {
            "var": ""
          },
          3
        ]
      },
      "data": "URN:UVCI:01:AT:10807843F94AEE0EE5093FBC254BD813#B",
      "exp": "B"
    },
    {
      "title": "extractFromUVCI operation - index=3 - #4 with \"01:AT:10807843F94AEE0EE5093FBC254BD813#B\"",
      "logic": {
        "extractFromUVCI": [
          {
            "var": ""
          },
          3
        ]
      },
      "data": "01:AT:10807843F94AEE0EE5093FBC254BD813#B",
      "exp": "B"
    },
    {
      "title": "extractFromUVCI operation - index=3 - #5 with \"foo/bar::baz#999lizards\"",
      "logic": {
        "extractFromUVCI": [
          {
            "var": ""
          },
          3
        ]
      },
      "data": "foo/bar::baz#999lizards",
      "exp": "baz"
    },
    {
      "title": "extractFromUVCI operation - index=3 - #6 with \"a::c/#/f\"",
      "logic": {
        "extractFromUVCI": [
          {
            "var": ""
          },
          3
        ]
      },
      "data": "a::c/#/f",
      "exp": ""
    },
    {
      "title": "extractFromUVCI operation - index=4 - #1 with \"URN:UVCI:01:NL:187/37512422923\"",
      "logic": {
        "extractFromUVCI": [
          {
            "var": ""
          },
          4
        ]
      },
      "data": "URN:UVCI:01:NL:187/37512422923",
      "exp": null
    },
    {
      "title": "extractFromUVCI operation - index=4 - #2 with \"01:NL:187/37512422923\"",
      "logic": {
        "extractFromUVCI": [
          {
            "var": ""
          },
          4
        ]
      },
      "data": "01:NL:187/37512422923",
      "exp": null
    },
    {
      "title": "extractFromUVCI operation - index=4 - #3 with \"URN:UVCI:01:AT:10807843F94AEE0EE5093FBC254BD813#B\"",
      "logic": {
        "extractFromUVCI": [
          {
            "var": ""
          },
          4
        ]
      },
      "data": "URN:UVCI:01:AT:10807843F94AEE0EE5093FBC254BD813#B",
      "exp": null
    },
    {
      "title": "extractFromUVCI operation - index=4 - #4 with \"01:AT:10807843F94AEE0EE5093FBC254BD813#B\"",
      "logic": {
        "extractFromUVCI": [
          {
            "var": ""
          },
          4
        ]
      },
      "data": "01:AT:10807843F94AEE0EE5093FBC254BD813#B",
      "exp": null
    },
    {
      "title": "extractFromUVCI operation - index=4 - #5 with \"foo/bar::baz#999lizards\"",
      "logic": {
        "extractFromUVCI": [
          {
            "var": ""
          },
          4
        ]
      },
      "data": "foo/bar::baz#999lizards",
      "exp": "999lizards"
    },
    {
      "title": "extractFromUVCI operation - index=4 - #6 with \"a::c/#/f\"",
      "logic": {
        "extractFromUVCI": [
          {
            "var": ""
          },
          4
        ]
      },
      "data": "a::c/#/f",
      "exp": ""
    },
    {
      "title": "extractFromUVCI operation - index=5 - #1 with \"foo/bar::baz#999lizards\"",
      "logic": {
        "extractFromUVCI": [
          {
            "var": ""
          },
          5
        ]
      },
      "data": "foo/bar::baz#999lizards",
      "exp": null
    },
    {
      "title": "extractFromUVCI operation - index=5 - #2 with \"a::c/#/f\"",
      "logic": {
        "extractFromUVCI": [
          {
            "var": ""
          },
          5
        ]
      },
      "data": "a::c/#/f",
      "exp": "f"
    },
    {
      "title": "filter - allows to specify the variable name for the current value and to access the outer context",
      "logic": {
        "filter": [
          {
            "var": "elements"
          },
          {
            ">": [
              {
                "var": "it.num"
              },
              {
                "var": "threshold"
              }
            ]
          },
          "it"
        ]
      },
      "data": {
        "elements": [
          {
            "num": 3
          },
          {
            "num": 4
          },
          {
            "num": 5
          }
        ],
        "threshold": 3
      },
      "exp": [
        {
          "num": 4
        },
        {
          "num": 5
        }
      ]
    },
    {
      "title": "filter - data types - if first parameter is a boolean (false), returns an empty array",
      "logic": {
        "filter": [
          {
            "var": "elements"
          },
          false
        ]
      },
      "data": {
        "elements": true
      },
      "exp": []
    },
    {
      "title": "filter - data types - if first parameter is a boolean (true), returns an empty array",
      "logic": {
        "filter": [
          {
            "var": "elements"
          },
          true
        ]
      },
      "data": {
        "elements": true
      },
      "exp": []
    },
    {
      "title": "filter - data types - if first parameter is a number, returns an empty array",
      "logic": {
        "filter": [
          {
            "var": "elements"
          },
          true
        ]
      },
      "data": {
        "elements": 123
      },
      "exp": []
    },
    {
      "title": "filter - data types - if first parameter is a string, returns an empty array",
      "logic": {
        "filter": [
          {
            "var": "elements"
          },
          true
        ]
      },
      "data": {
        "elements": "not-an-array"
      },
      "exp": []
    },
    {
      "title": "filter - data types - if first parameter is an object, returns an empty array",
      "logic": {
        "filter": [
          {
            "var": "elements"
          },
          false
        ]
      },
      "data": {
        "elements": {}
      },
      "exp": []
    },
    {
      "title": "filter - data types - if first parameter is null, returns an empty array",
      "logic": {
        "filter": [
          {
            "var": "elements"
          },
          false
        ]
      },
      "data": {
        "elements": null
      },
      "exp": []
    },
    {
      "title": "filter - data types - if third parameter is a boolean (false), throws an exception",
      "logic": {
        "filter": [
          {
            "var": "elements"
          },
          false,
          {
            "var": "it "
          }
        ]
      },
      "data": {
        "elements": [
          1,
          2,
          3
        ],
        "it": false
      },
      "throws": true
    },
    {
      "title": "filter - data types - if third parameter is a boolean (true), throws an exception",
      "logic": {
        "filter": [
          {
            "var": "elements"
          },
          false,
          {
            "var": "it "
          }
        ]
      },
      "data": {
        "elements": [
          1,
          2,
          3
        ],
        "it": true
      },
      "throws": true
    },
    {
      "title": "filter - data types - if third parameter is a number, throws an exception",
      "logic": {
        "filter": [
          {
            "var": "elements"
          },
          false,
          {
            "var": "it "
          }
        ]
      },
      "data": {
        "elements": [
          1,
          2,
          3
        ],
        "it": 1
      },
      "throws": true
    },
    {
      "title": "filter - data types - if third parameter is an array, throws an exception",
      "logic": {
        "filter": [
          {
            "var": "elements"
          },
          false,
          {
            "var": "it "
          }
        ]
      },
      "data": {
        "elements": [
          1,
          2,
          3
        ],
        "it": []
      },
      "throws": true
    },
    {
      "title": "filter - data types - if third parameter is an object, throws an exception",
      "logic": {
        "filter": [
          {
            "var": "elements"
          },
          false,
          {
            "var": "it "
          }
        ]
      },
      "data": {
        "elements": [
          1,
          2,
          3
        ],
        "it": {}
      },
      "throws": true
    },
    {
      "title": "filter - data types - if third parameter is null, throws an exception",
      "logic": {
        "filter": [
          {
            "var": "elements"
          },
          false,
          {
            "var": "it "
          }
        ]
      },
      "data": {
        "elements": [
          1,
          2,
          3
        ],
        "it": null
      },
      "throws": true
    },
    {
      "title": "filter - removes elements that do not evaluate to truthy",
      "logic": {
        "filter": [
          {
            "var": "elements"
          },
          {
            ">": [
              {
                "var": "num"
              },
              3
            ]
          }
        ]
      },
      "data": {
        "elements": [
          {
            "num": 3
          },
          {
            "num": 4
          },
          {
            "num": 5
          }
        ]
      },
      "exp": [
        {
          "num": 4
        },
        {
          "num": 5
        }
      ]
    },
    {
      "title": "find - allows to specify the variable name for the current value and to access the outer context",
      "logic": {
        "find": [
          {
            "var": "elements"
          },
          {
            ">": [
              {
                "var": "it.num"
              },
              {
                "var": "threshold"
              }
            ]
          },
          "it"
        ]
      },
      "data": {
        "elements": [
          {
            "num": 3
          },
          {
            "num": 4
          },
          {
            "num": 5
          }
        ],
        "threshold": 3
      },
      "exp": {
        "num": 4
      }
    },
    {
      "title": "find - data types - if first parameter is a boolean (false), returns null",
      "logic": {
        "find": [
          {
            "var": "elements"
          },
          true
        ]
      },
      "data": {
        "elements": false
      },
      "exp": null
    },
    {
      "title": "find - data types - if first parameter is a boolean (true), returns null",
      "logic": {
        "find": [
          {
            "var": "elements"
          },
          true
        ]
      },
      "data": {
        "elements": true
      },
      "exp": null
    },
    {
      "title": "find - data types - if first parameter is a number, returns null",
      "logic": {
        "find": [
          {
            "var": "elements"
          },
          true
        ]
      },
      "data": {
        "elements": 5
      },
      "exp": null
    },
    {
      "title": "find - data types - if first parameter is a string, returns null",
      "logic": {
        "find": [
          {
            "var": "elements"
          },
          true
        ]
      },
      "data": {
        "elements": "not-an-array"
      },
      "exp": null
    },
    {
      "title": "find - data types - if first parameter is an object, returns null",
      "logic": {
        "find": [
          {
            "var": "elements"
          },
          true
        ]
      },
      "data": {
        "elements": {}
      },
      "exp": null
    },
    {
      "title": "find - data types - if first parameter is null, returns null",
      "logic": {
        "find": [
          {
            "var": "elements"
          },
          true
        ]
      },
      "data": {
        "elements": null
      },
      "exp": null
    },
    {
      "title": "find - returns null if there is no match",
      "logic": {
        "find": [
          {
            "var": "elements"
          },
          {
            ">": [
              {
                "var": "num"
              },
              10
            ]
          }
        ]
      },
      "data": {
        "elements": [
          {
            "num": 3
          },
          {
            "num": 4
          },
          {
            "num": 5
          }
        ]
      },
      "exp": null
    },
    {
      "title": "find - returns the first element that evaluates to truthy",
      "logic": {
        "find": [
          {
            "var": "elements"
          },
          {
            ">": [
              {
                "var": "num"
              },
              3
            ]
          }
        ]
      },
      "data": {
        "elements": [
          {
            "num": 3
          },
          {
            "num": 4
          },
          {
            "num": 5
          }
        ]
      },
      "exp": {
        "num": 4
      }
    },
    {
      "title": "if operation - should work - #1 with true",
      "logic": {
        "if": [
          {
            "var": ""
          },
          "T",
          "F"
        ]
      },
      "data": true,
      "exp": "T"
    },
    {
      "title": "if operation - should work - #2 with [\"foo\"]",
      "logic": {
        "if": [
          {
            "var": ""
          },
          "T",
          "F"
        ]
      },
      "data": [
        "foo"
      ],
      "exp": "T"
    },
    {
      "title": "if operation - should work - #3 with {}",
      "logic": {
        "if": [
          {
            "var": ""
          },
          "T",
          "F"
        ]
      },
      "data": {},
      "exp": "F"
    },
    {
      "title": "if operation - should work - #4 with null",
      "logic": {
        "if": [
          {
            "var": ""
          },
          "T",
          "F"
        ]
      },
      "data": null,
      "exp": "F"
    },
    {
      "title": "if operation - should work - #5 with false",
      "logic": {
        "if": [
          {
            "var": ""
          },
          "T",
          "F"
        ]
      },
      "data": false,
      "exp": "F"
    },
    {
      "title": "in operation - should work - #1 with \"foo\"",
      "logic": {
        "in": [
          {
            "var": ""
          },
          [
            "foo",
            "bar"
          ]
        ]
      },
      "data": "foo",
      "exp": true
    },
    {
      "title": "in operation - should work - #2 with \"bar\"",
      "logic": {
        "in": [
          {
            "var": ""
          },
          [
            "foo",
            "bar"
          ]
        ]
      },
      "data": "bar",
      "exp": true
    },
    {
      "title": "in operation - should work - #3 with 0",
      "logic": {
        "in": [
          {
            "var": ""
          },
          [
            "foo",
            "bar"
          ]
        ]
      },
      "data": 0,
      "exp": false
    },
    {
      "title": "in operation - should work - #4 with null",
      "logic": {
        "in": [
          {
            "var": ""
          },
          [
            "foo",
            "bar"
          ]
        ]
      },
      "data": null,
      "exp": false
    },
    {
      "title": "in operation - should work with empty right-hand side - #1 with \"foo\"",
      "logic": {
        "in": [
          {
            "var": ""
          },
          []
        ]
      },
      "data": "foo",
      "exp": false
    },
    {
      "title": "in operation - should work with empty right-hand side - #2 with \"\"",
      "logic": {
        "in": [
          {
            "var": ""
          },
          []
        ]
      },
      "data": "",
      "exp": false
    },
    {
      "title": "in operation - should work with empty right-hand side - #3 with null",
      "logic": {
        "in": [
          {
            "var": ""
          },
          []
        ]
      },
      "data": null,
      "exp": false
    },
    {
      "title": "init - data types - array spread - if parameter is a boolean (false), throws an error",
      "logic": {
        "script": [
          {
            "return": [
              {
                "init": [
                  "array",
                  {
                    "spread": [
                      {
                        "var": "value"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "data": {
        "value": false
      },
      "throws": true
    },
    {
      "title": "init - data types - array spread - if parameter is a boolean (true), throws an error",
      "logic": {
        "script": [
          {
            "return": [
              {
                "init": [
                  "array",
                  {
                    "spread": [
                      {
                        "var": "value"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "data": {
        "value": true
      },
      "throws": true
    },
    {
      "title": "init - data types - array spread - if parameter is a number, throws an error",
      "logic": {
        "script": [
          {
            "return": [
              {
                "init": [
                  "array",
                  {
                    "spread": [
                      {
                        "var": "value"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "data": {
        "value": 5
      },
      "throws": true
    },
    {
      "title": "init - data types - array spread - if parameter is a string, throws an error",
      "logic": {
        "script": [
          {
            "return": [
              {
                "init": [
                  "array",
                  {
                    "spread": [
                      {
                        "var": "value"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "data": {
        "value": "hello"
      },
      "throws": true
    },
    {
      "title": "init - data types - array spread - if parameter is an object, throws an error",
      "logic": {
        "script": [
          {
            "return": [
              {
                "init": [
                  "array",
                  {
                    "spread": [
                      {
                        "var": "value"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "data": {
        "value": {
          "hello": "world"
        }
      },
      "throws": true
    },
    {
      "title": "init - data types - array spread - if parameter is null, throws an error",
      "logic": {
        "script": [
          {
            "return": [
              {
                "init": [
                  "array",
                  {
                    "spread": [
                      {
                        "var": "value"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "data": {
        "value": null
      },
      "throws": true
    },
    {
      "title": "init - data types - array supports arrays",
      "logic": {
        "script": [
          {
            "return": [
              {
                "init": [
                  "array",
                  {
                    "var": "value"
                  }
                ]
              }
            ]
          }
        ]
      },
      "data": {
        "value": [
          1,
          2,
          3
        ]
      },
      "exp": [
        [
          1,
          2,
          3
        ]
      ]
    },
    {
      "title": "init - data types - array supports boolean (false)",
      "logic": {
        "script": [
          {
            "return": [
              {
                "init": [
                  "array",
                  {
                    "var": "value"
                  }
                ]
              }
            ]
          }
        ]
      },
      "data": {
        "value": false
      },
      "exp": [
        false
      ]
    },
    {
      "title": "init - data types - array supports boolean (true)",
      "logic": {
        "script": [
          {
            "return": [
              {
                "init": [
                  "array",
                  {
                    "var": "value"
                  }
                ]
              }
            ]
          }
        ]
      },
      "data": {
        "value": true
      },
      "exp": [
        true
      ]
    },
    {
      "title": "init - data types - array supports null",
      "logic": {
        "script": [
          {
            "return": [
              {
                "init": [
                  "array",
                  {
                    "var": "value"
                  }
                ]
              }
            ]
          }
        ]
      },
      "data": {
        "value": null
      },
      "exp": [
        null
      ]
    },
    {
      "title": "init - data types - array supports numbers (float)",
      "logic": {
        "script": [
          {
            "return": [
              {
                "init": [
                  "array",
                  {
                    "var": "value"
                  }
                ]
              }
            ]
          }
        ]
      },
      "data": {
        "value": 5.5
      },
      "exp": [
        5.5
      ]
    },
    {
      "title": "init - data types - array supports numbers (integer)",
      "logic": {
        "script": [
          {
            "return": [
              {
                "init": [
                  "array",
                  {
                    "var": "value"
                  }
                ]
              }
            ]
          }
        ]
      },
      "data": {
        "value": 5
      },
      "exp": [
        5
      ]
    },
    {
      "title": "init - data types - array supports objects",
      "logic": {
        "script": [
          {
            "return": [
              {
                "init": [
                  "array",
                  {
                    "var": "value"
                  }
                ]
              }
            ]
          }
        ]
      },
      "data": {
        "value": {
          "hello": "world"
        }
      },
      "exp": [
        {
          "hello": "world"
        }
      ]
    },
    {
      "title": "init - data types - array supports strings",
      "logic": {
        "script": [
          {
            "return": [
              {
                "init": [
                  "array",
                  {
                    "var": "value"
                  }
                ]
              }
            ]
          }
        ]
      },
      "data": {
        "value": "hello"
      },
      "exp": [
        "hello"
      ]
    },
    {
      "title": "init - data types - literal supports boolean (false)",
      "logic": {
        "script": [
          {
            "return": [
              {
                "init": [
                  "literal",
                  {
                    "var": "value"
                  }
                ]
              }
            ]
          }
        ]
      },
      "data": {
        "value": false
      },
      "exp": false
    },
    {
      "title": "init - data types - literal supports boolean (true)",
      "logic": {
        "script": [
          {
            "return": [
              {
                "init": [
                  "literal",
                  {
                    "var": "value"
                  }
                ]
              }
            ]
          }
        ]
      },
      "data": {
        "value": true
      },
      "exp": true
    },
    {
      "title": "init - data types - literal supports null",
      "logic": {
        "script": [
          {
            "return": [
              {
                "init": [
                  "literal",
                  {
                    "var": "value"
                  }
                ]
              }
            ]
          }
        ]
      },
      "data": {
        "value": null
      },
      "exp": null
    },
    {
      "title": "init - data types - literal supports numbers (float)",
      "logic": {
        "script": [
          {
            "return": [
              {
                "init": [
                  "literal",
                  {
                    "var": "value"
                  }
                ]
              }
            ]
          }
        ]
      },
      "data": {
        "value": 5.5
      },
      "exp": 5.5
    },
    {
      "title": "init - data types - literal supports numbers (integer)",
      "logic": {
        "script": [
          {
            "return": [
              {
                "init": [
                  "literal",
                  {
                    "var": "value"
                  }
                ]
              }
            ]
          }
        ]
      },
      "data": {
        "value": 5
      },
      "exp": 5
    },
    {
      "title": "init - data types - literal supports strings",
      "logic": {
        "script": [
          {
            "return": [
              {
                "init": [
                  "literal",
                  {
                    "var": "value"
                  }
                ]
              }
            ]
          }
        ]
      },
      "data": {
        "value": "hello"
      },
      "exp": "hello"
    },
    {
      "title": "init - data types - literal throws if value is an array",
      "logic": {
        "script": [
          {
            "return": [
              {
                "init": [
                  "literal",
                  {
                    "var": "value"
                  }
                ]
              }
            ]
          }
        ]
      },
      "data": {
        "value": []
      },
      "throws": true
    },
    {
      "title": "init - data types - literal throws if value is an object",
      "logic": {
        "script": [
          {
            "return": [
              {
                "init": [
                  "literal",
                  {
                    "var": "value"
                  }
                ]
              }
            ]
          }
        ]
      },
      "data": {
        "value": []
      },
      "throws": true
    },
    {
      "title": "init - data types - object keys - if parameter is an array, throws an exception",
      "logic": {
        "script": [
          {
            "return": [
              {
                "init": [
                  "object",
                  {
                    "var": "key"
                  },
                  {
                    "var": "value"
                  }
                ]
              }
            ]
          }
        ]
      },
      "data": {
        "key": [
          "hello"
        ],
        "value": "world"
      },
      "throws": true
    },
    {
      "title": "init - data types - object keys - if parameter is an object, throws an exception",
      "logic": {
        "script": [
          {
            "return": [
              {
                "init": [
                  "object",
                  {
                    "var": "key"
                  },
                  {
                    "var": "value"
                  }
                ]
              }
            ]
          }
        ]
      },
      "data": {
        "key": {
          "hello": "world"
        },
        "value": "world"
      },
      "throws": true
    },
    {
      "title": "init - data types - object keys - if parameter is null, throws an exception",
      "logic": {
        "script": [
          {
            "return": [
              {
                "init": [
                  "object",
                  {
                    "var": "key"
                  },
                  {
                    "var": "value"
                  }
                ]
              }
            ]
          }
        ]
      },
      "data": {
        "key": null,
        "value": "world"
      },
      "throws": true
    },
    {
      "title": "init - data types - object keys - supports strings",
      "logic": {
        "script": [
          {
            "return": [
              {
                "init": [
                  "object",
                  {
                    "var": "key"
                  },
                  {
                    "var": "value"
                  }
                ]
              }
            ]
          }
        ]
      },
      "data": {
        "key": "hello",
        "value": "world"
      },
      "exp": {
        "hello": "world"
      }
    },
    {
      "title": "init - data types - object keys - treats boolean (false) as string",
      "logic": {
        "script": [
          {
            "return": [
              {
                "init": [
                  "object",
                  {
                    "var": "key"
                  },
                  {
                    "var": "value"
                  }
                ]
              }
            ]
          }
        ]
      },
      "data": {
        "key": false,
        "value": "world"
      },
      "exp": {
        "false": "world"
      }
    },
    {
      "title": "init - data types - object keys - treats boolean (true) as string",
      "logic": {
        "script": [
          {
            "return": [
              {
                "init": [
                  "object",
                  {
                    "var": "key"
                  },
                  {
                    "var": "value"
                  }
                ]
              }
            ]
          }
        ]
      },
      "data": {
        "key": true,
        "value": "world"
      },
      "exp": {
        "true": "world"
      }
    },
    {
      "title": "init - data types - object keys - treats numbers (float) as string",
      "logic": {
        "script": [
          {
            "return": [
              {
                "init": [
                  "object",
                  {
                    "var": "key"
                  },
                  {
                    "var": "value"
                  }
                ]
              }
            ]
          }
        ]
      },
      "data": {
        "key": 5.5,
        "value": "world"
      },
      "exp": {
        "5.5": "world"
      }
    },
    {
      "title": "init - data types - object keys - treats numbers (integer) as string",
      "logic": {
        "script": [
          {
            "return": [
              {
                "init": [
                  "object",
                  {
                    "var": "key"
                  },
                  {
                    "var": "value"
                  }
                ]
              }
            ]
          }
        ]
      },
      "data": {
        "key": 5,
        "value": "world"
      },
      "exp": {
        "5": "world"
      }
    },
    {
      "title": "init - data types - object spread - if parameter is a boolean (false), throws an error",
      "logic": {
        "script": [
          {
            "return": [
              {
                "init": [
                  "object",
                  {
                    "spread": [
                      {
                        "var": "value"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "data": {
        "value": false
      },
      "throws": true
    },
    {
      "title": "init - data types - object spread - if parameter is a boolean (true), throws an error",
      "logic": {
        "script": [
          {
            "return": [
              {
                "init": [
                  "object",
                  {
                    "spread": [
                      {
                        "var": "value"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "data": {
        "value": true
      },
      "throws": true
    },
    {
      "title": "init - data types - object spread - if parameter is a number, throws an error",
      "logic": {
        "script": [
          {
            "return": [
              {
                "init": [
                  "object",
                  {
                    "spread": [
                      {
                        "var": "value"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "data": {
        "value": 5
      },
      "throws": true
    },
    {
      "title": "init - data types - object spread - if parameter is a string, throws an error",
      "logic": {
        "script": [
          {
            "return": [
              {
                "init": [
                  "object",
                  {
                    "spread": [
                      {
                        "var": "value"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "data": {
        "value": "world"
      },
      "throws": true
    },
    {
      "title": "init - data types - object spread - if parameter is an array, adds all elements by using their index as key",
      "logic": {
        "script": [
          {
            "return": [
              {
                "init": [
                  "object",
                  "0",
                  "hola",
                  "target",
                  "world",
                  {
                    "spread": [
                      {
                        "var": "value"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "data": {
        "value": [
          "hello",
          "hi"
        ]
      },
      "exp": {
        "0": "hello",
        "1": "hi",
        "target": "world"
      }
    },
    {
      "title": "init - data types - object spread - if parameter is null, does not alter the object",
      "logic": {
        "script": [
          {
            "return": [
              {
                "init": [
                  "object",
                  {
                    "spread": [
                      {
                        "var": "value"
                      }
                    ]
                  },
                  "hello",
                  "world"
                ]
              }
            ]
          }
        ]
      },
      "data": {
        "value": null
      },
      "exp": {
        "hello": "world"
      }
    },
    {
      "title": "init - initializes a literal value",
      "logic": {
        "script": [
          {
            "return": [
              {
                "init": [
                  "literal",
                  {
                    "var": "value"
                  }
                ]
              }
            ]
          }
        ]
      },
      "data": {
        "value": "hello"
      },
      "exp": "hello"
    },
    {
      "title": "init - initializes an array that is empty by default",
      "logic": {
        "script": [
          {
            "return": [
              {
                "init": [
                  "array"
                ]
              }
            ]
          }
        ]
      },
      "data": {
        "value": []
      },
      "exp": []
    },
    {
      "title": "init - initializes an array with elements",
      "logic": {
        "script": [
          {
            "return": [
              {
                "init": [
                  "array",
                  "hello",
                  1,
                  {
                    "var": "value"
                  }
                ]
              }
            ]
          }
        ]
      },
      "data": {
        "value": []
      },
      "exp": [
        "hello",
        1,
        []
      ]
    },
    {
      "title": "init - initializes an array with spread",
      "logic": {
        "script": [
          {
            "return": [
              {
                "init": [
                  "array",
                  {
                    "spread": [
                      {
                        "var": "first"
                      }
                    ]
                  },
                  "hello",
                  1,
                  {
                    "spread": [
                      {
                        "var": "second"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "data": {
        "first": [
          0,
          2,
          3
        ],
        "second": [
          "hello",
          1
        ],
        "value": []
      },
      "exp": [
        0,
        2,
        3,
        "hello",
        1,
        "hello",
        1
      ]
    },
    {
      "title": "init - initializes an object that is empty by default",
      "logic": {
        "script": [
          {
            "return": [
              {
                "init": [
                  "object"
                ]
              }
            ]
          }
        ]
      },
      "data": {
        "value": []
      },
      "exp": {}
    },
    {
      "title": "init - initializes an object with properties",
      "logic": {
        "script": [
          {
            "return": [
              {
                "init": [
                  "object",
                  {
                    "var": "key"
                  },
                  {
                    "var": "value"
                  },
                  "greeting",
                  "hola"
                ]
              }
            ]
          }
        ]
      },
      "data": {
        "key": "hello",
        "value": "world"
      },
      "exp": {
        "hello": "world",
        "greeting": "hola"
      }
    },
    {
      "title": "init - initializes an object with spread",
      "logic": {
        "script": [
          {
            "return": [
              {
                "init": [
                  "object",
                  "hello",
                  "me",
                  {
                    "spread": [
                      {
                        "var": "base"
                      }
                    ]
                  },
                  "foo",
                  "big",
                  {
                    "spread": [
                      {
                        "var": "top"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "data": {
        "base": {
          "hello": "you",
          "foo": "bar",
          "baz": "qux"
        },
        "top": {
          "fizz": "buzz"
        },
        "key": "hello",
        "value": "world"
      },
      "exp": {
        "hello": "you",
        "foo": "big",
        "baz": "qux",
        "fizz": "buzz"
      }
    },
    {
      "title": "ins with nulls - in on a null doesn't eval to true - #1 with {\"x\":null,\"y\":[\"a\",\"b\"]}",
      "logic": {
        "in": [
          {
            "var": "x"
          },
          {
            "var": "y"
          }
        ]
      },
      "data": {
        "x": null,
        "y": [
          "a",
          "b"
        ]
      },
      "exp": false
    },
    {
      "title": "ins with nulls - null-safety - #1 with null",
      "logic": {
        "in": [
          {
            "var": "x"
          },
          {
            "var": "y"
          }
        ]
      },
      "data": null,
      "exp": false
    },
    {
      "title": "ins with nulls - null-safety - #2 with {}",
      "logic": {
        "in": [
          {
            "var": "x"
          },
          {
            "var": "y"
          }
        ]
      },
      "data": {},
      "exp": false
    },
    {
      "title": "ins with nulls - null-safety - #3 with {\"x\":null}",
      "logic": {
        "in": [
          {
            "var": "x"
          },
          {
            "var": "y"
          }
        ]
      },
      "data": {
        "x": null
      },
      "exp": false
    },
    {
      "title": "ins with nulls - null-safety - #4 with {\"x\":null,\"y\":null}",
      "logic": {
        "in": [
          {
            "var": "x"
          },
          {
            "var": "y"
          }
        ]
      },
      "data": {
        "x": null,
        "y": null
      },
      "exp": false
    },
    {
      "title": "ins with nulls - null-safety - #5 with {\"x\":null,\"y\":[]}",
      "logic": {
        "in": [
          {
            "var": "x"
          },
          {
            "var": "y"
          }
        ]
      },
      "data": {
        "x": null,
        "y": []
      },
      "exp": false
    },
    {
      "title": "ins with nulls - null-safety - #6 with {\"x\":null,\"y\":[null]}",
      "logic": {
        "in": [
          {
            "var": "x"
          },
          {
            "var": "y"
          }
        ]
      },
      "data": {
        "x": null,
        "y": [
          null
        ]
      },
      "exp": true
    },
    {
      "title": "ins with nulls - works as expected without nulls - #1 with {\"x\":\"a\",\"y\":[\"a\",\"b\"]}",
      "logic": {
        "in": [
          {
            "var": "x"
          },
          {
            "var": "y"
          }
        ]
      },
      "data": {
        "x": "a",
        "y": [
          "a",
          "b"
        ]
      },
      "exp": true
    },
    {
      "title": "ins with nulls - works as expected without nulls - #2 with {\"x\":\"c\",\"y\":[\"a\",\"b\"]}",
      "logic": {
        "in": [
          {
            "var": "x"
          },
          {
            "var": "y"
          }
        ]
      },
      "data": {
        "x": "c",
        "y": [
          "a",
          "b"
        ]
      },
      "exp": false
    },
    {
      "title": "isSamePerson - happy path - match",
      "functions": [
        {
          "name": "__intersectArrays",
          "definition": {
            "parameters": [
              {
                "name": "arrayA"
              },
              {
                "name": "arrayB"
              }
            ],
            "logic": [
              {
                "declare": [
                  "intersection",
                  {
                    "filter": [
                      {
                        "var": "arrayA"
                      },
                      {
                        "in": [
                          {
                            "var": "a"
                          },
                          {
                            "var": "arrayB"
                          }
                        ]
                      },
                      "a"
                    ]
                  }
                ]
              },
              {
                "return": [
                  {
                    "var": "intersection"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "__getNameChunks",
          "definition": {
            "parameters": [
              {
                "name": "name"
              },
              {
                "name": "ignoreChunks",
                "default": []
              }
            ],
            "logic": [
              {
                "declare": [
                  "allChunks",
                  {
                    "split": [
                      {
                        "trim": [
                          {
                            "var": "name"
                          }
                        ]
                      },
                      "<"
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "filteredChunks",
                  {
                    "filter": [
                      {
                        "var": "allChunks"
                      },
                      {
                        "and": [
                          {
                            "!!": [
                              {
                                "var": "it"
                              }
                            ]
                          },
                          {
                            "!": [
                              {
                                "in": [
                                  {
                                    "var": "it"
                                  },
                                  {
                                    "var": "ignoreChunks"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      "it"
                    ]
                  }
                ]
              },
              {
                "return": [
                  {
                    "var": "filteredChunks"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "isSamePerson",
          "definition": {
            "parameters": [
              {
                "name": "holderA"
              },
              {
                "name": "holderB"
              },
              {
                "name": "ignoreGntChunks",
                "default": []
              },
              {
                "name": "ignoreFntChunks",
                "default": []
              }
            ],
            "logic": [
              {
                "declare": [
                  "doesDobMatch",
                  {
                    "===": [
                      {
                        "var": "holderA.dob"
                      },
                      {
                        "var": "holderB.dob"
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "!": [
                      {
                        "var": "doesDobMatch"
                      }
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderAGntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderA.nam.gnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderBGntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderB.nam.gnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "gntMatches",
                  {
                    "call": [
                      "__intersectArrays",
                      {
                        "arrayA": {
                          "var": "holderAGntChunks"
                        },
                        "arrayB": {
                          "var": "holderBGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "count": [
                          {
                            "var": "gntMatches"
                          }
                        ]
                      },
                      0
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderAFntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderA.nam.fnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderBFntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderB.nam.fnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "fntMatches",
                  {
                    "call": [
                      "__intersectArrays",
                      {
                        "arrayA": {
                          "var": "holderAFntChunks"
                        },
                        "arrayB": {
                          "var": "holderBFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "count": [
                          {
                            "var": "fntMatches"
                          }
                        ]
                      },
                      0
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "return": [
                  true
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "isSamePerson",
        "parameters": {
          "ignoreGntChunks": [
            "DR"
          ],
          "ignoreFntChunks": [
            "DR"
          ],
          "holderA": {
            "nam": {
              "gnt": "JOHN",
              "fnt": "DOE"
            },
            "dob": "1980-02-03"
          },
          "holderB": {
            "nam": {
              "gnt": "JOHN",
              "fnt": "DOE"
            },
            "dob": "1980-02-03"
          }
        }
      },
      "exp": true
    },
    {
      "title": "isSamePerson - happy path - no match - different dob",
      "functions": [
        {
          "name": "__intersectArrays",
          "definition": {
            "parameters": [
              {
                "name": "arrayA"
              },
              {
                "name": "arrayB"
              }
            ],
            "logic": [
              {
                "declare": [
                  "intersection",
                  {
                    "filter": [
                      {
                        "var": "arrayA"
                      },
                      {
                        "in": [
                          {
                            "var": "a"
                          },
                          {
                            "var": "arrayB"
                          }
                        ]
                      },
                      "a"
                    ]
                  }
                ]
              },
              {
                "return": [
                  {
                    "var": "intersection"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "__getNameChunks",
          "definition": {
            "parameters": [
              {
                "name": "name"
              },
              {
                "name": "ignoreChunks",
                "default": []
              }
            ],
            "logic": [
              {
                "declare": [
                  "allChunks",
                  {
                    "split": [
                      {
                        "trim": [
                          {
                            "var": "name"
                          }
                        ]
                      },
                      "<"
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "filteredChunks",
                  {
                    "filter": [
                      {
                        "var": "allChunks"
                      },
                      {
                        "and": [
                          {
                            "!!": [
                              {
                                "var": "it"
                              }
                            ]
                          },
                          {
                            "!": [
                              {
                                "in": [
                                  {
                                    "var": "it"
                                  },
                                  {
                                    "var": "ignoreChunks"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      "it"
                    ]
                  }
                ]
              },
              {
                "return": [
                  {
                    "var": "filteredChunks"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "isSamePerson",
          "definition": {
            "parameters": [
              {
                "name": "holderA"
              },
              {
                "name": "holderB"
              },
              {
                "name": "ignoreGntChunks",
                "default": []
              },
              {
                "name": "ignoreFntChunks",
                "default": []
              }
            ],
            "logic": [
              {
                "declare": [
                  "doesDobMatch",
                  {
                    "===": [
                      {
                        "var": "holderA.dob"
                      },
                      {
                        "var": "holderB.dob"
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "!": [
                      {
                        "var": "doesDobMatch"
                      }
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderAGntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderA.nam.gnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderBGntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderB.nam.gnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "gntMatches",
                  {
                    "call": [
                      "__intersectArrays",
                      {
                        "arrayA": {
                          "var": "holderAGntChunks"
                        },
                        "arrayB": {
                          "var": "holderBGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "count": [
                          {
                            "var": "gntMatches"
                          }
                        ]
                      },
                      0
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderAFntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderA.nam.fnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderBFntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderB.nam.fnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "fntMatches",
                  {
                    "call": [
                      "__intersectArrays",
                      {
                        "arrayA": {
                          "var": "holderAFntChunks"
                        },
                        "arrayB": {
                          "var": "holderBFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "count": [
                          {
                            "var": "fntMatches"
                          }
                        ]
                      },
                      0
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "return": [
                  true
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "isSamePerson",
        "parameters": {
          "ignoreGntChunks": [
            "DR"
          ],
          "ignoreFntChunks": [
            "DR"
          ],
          "holderA": {
            "nam": {
              "gnt": "JOHN",
              "fnt": "DOE"
            },
            "dob": "1980-02-03"
          },
          "holderB": {
            "nam": {
              "gnt": "JOHN",
              "fnt": "DOE"
            },
            "dob": "1970-01-01"
          }
        }
      },
      "exp": false
    },
    {
      "title": "isSamePerson - happy path - no match - no matches in fnt",
      "functions": [
        {
          "name": "__intersectArrays",
          "definition": {
            "parameters": [
              {
                "name": "arrayA"
              },
              {
                "name": "arrayB"
              }
            ],
            "logic": [
              {
                "declare": [
                  "intersection",
                  {
                    "filter": [
                      {
                        "var": "arrayA"
                      },
                      {
                        "in": [
                          {
                            "var": "a"
                          },
                          {
                            "var": "arrayB"
                          }
                        ]
                      },
                      "a"
                    ]
                  }
                ]
              },
              {
                "return": [
                  {
                    "var": "intersection"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "__getNameChunks",
          "definition": {
            "parameters": [
              {
                "name": "name"
              },
              {
                "name": "ignoreChunks",
                "default": []
              }
            ],
            "logic": [
              {
                "declare": [
                  "allChunks",
                  {
                    "split": [
                      {
                        "trim": [
                          {
                            "var": "name"
                          }
                        ]
                      },
                      "<"
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "filteredChunks",
                  {
                    "filter": [
                      {
                        "var": "allChunks"
                      },
                      {
                        "and": [
                          {
                            "!!": [
                              {
                                "var": "it"
                              }
                            ]
                          },
                          {
                            "!": [
                              {
                                "in": [
                                  {
                                    "var": "it"
                                  },
                                  {
                                    "var": "ignoreChunks"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      "it"
                    ]
                  }
                ]
              },
              {
                "return": [
                  {
                    "var": "filteredChunks"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "isSamePerson",
          "definition": {
            "parameters": [
              {
                "name": "holderA"
              },
              {
                "name": "holderB"
              },
              {
                "name": "ignoreGntChunks",
                "default": []
              },
              {
                "name": "ignoreFntChunks",
                "default": []
              }
            ],
            "logic": [
              {
                "declare": [
                  "doesDobMatch",
                  {
                    "===": [
                      {
                        "var": "holderA.dob"
                      },
                      {
                        "var": "holderB.dob"
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "!": [
                      {
                        "var": "doesDobMatch"
                      }
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderAGntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderA.nam.gnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderBGntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderB.nam.gnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "gntMatches",
                  {
                    "call": [
                      "__intersectArrays",
                      {
                        "arrayA": {
                          "var": "holderAGntChunks"
                        },
                        "arrayB": {
                          "var": "holderBGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "count": [
                          {
                            "var": "gntMatches"
                          }
                        ]
                      },
                      0
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderAFntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderA.nam.fnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderBFntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderB.nam.fnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "fntMatches",
                  {
                    "call": [
                      "__intersectArrays",
                      {
                        "arrayA": {
                          "var": "holderAFntChunks"
                        },
                        "arrayB": {
                          "var": "holderBFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "count": [
                          {
                            "var": "fntMatches"
                          }
                        ]
                      },
                      0
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "return": [
                  true
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "isSamePerson",
        "parameters": {
          "ignoreGntChunks": [
            "DR"
          ],
          "ignoreFntChunks": [
            "DR"
          ],
          "holderA": {
            "nam": {
              "gnt": "JOHN",
              "fnt": "DOE"
            },
            "dob": "1980-02-03"
          },
          "holderB": {
            "nam": {
              "gnt": "JOHN",
              "fnt": "DOUGH"
            },
            "dob": "1980-02-03"
          }
        }
      },
      "exp": false
    },
    {
      "title": "isSamePerson - happy path - no match - no matches in gnt",
      "functions": [
        {
          "name": "__intersectArrays",
          "definition": {
            "parameters": [
              {
                "name": "arrayA"
              },
              {
                "name": "arrayB"
              }
            ],
            "logic": [
              {
                "declare": [
                  "intersection",
                  {
                    "filter": [
                      {
                        "var": "arrayA"
                      },
                      {
                        "in": [
                          {
                            "var": "a"
                          },
                          {
                            "var": "arrayB"
                          }
                        ]
                      },
                      "a"
                    ]
                  }
                ]
              },
              {
                "return": [
                  {
                    "var": "intersection"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "__getNameChunks",
          "definition": {
            "parameters": [
              {
                "name": "name"
              },
              {
                "name": "ignoreChunks",
                "default": []
              }
            ],
            "logic": [
              {
                "declare": [
                  "allChunks",
                  {
                    "split": [
                      {
                        "trim": [
                          {
                            "var": "name"
                          }
                        ]
                      },
                      "<"
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "filteredChunks",
                  {
                    "filter": [
                      {
                        "var": "allChunks"
                      },
                      {
                        "and": [
                          {
                            "!!": [
                              {
                                "var": "it"
                              }
                            ]
                          },
                          {
                            "!": [
                              {
                                "in": [
                                  {
                                    "var": "it"
                                  },
                                  {
                                    "var": "ignoreChunks"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      "it"
                    ]
                  }
                ]
              },
              {
                "return": [
                  {
                    "var": "filteredChunks"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "isSamePerson",
          "definition": {
            "parameters": [
              {
                "name": "holderA"
              },
              {
                "name": "holderB"
              },
              {
                "name": "ignoreGntChunks",
                "default": []
              },
              {
                "name": "ignoreFntChunks",
                "default": []
              }
            ],
            "logic": [
              {
                "declare": [
                  "doesDobMatch",
                  {
                    "===": [
                      {
                        "var": "holderA.dob"
                      },
                      {
                        "var": "holderB.dob"
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "!": [
                      {
                        "var": "doesDobMatch"
                      }
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderAGntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderA.nam.gnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderBGntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderB.nam.gnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "gntMatches",
                  {
                    "call": [
                      "__intersectArrays",
                      {
                        "arrayA": {
                          "var": "holderAGntChunks"
                        },
                        "arrayB": {
                          "var": "holderBGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "count": [
                          {
                            "var": "gntMatches"
                          }
                        ]
                      },
                      0
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderAFntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderA.nam.fnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderBFntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderB.nam.fnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "fntMatches",
                  {
                    "call": [
                      "__intersectArrays",
                      {
                        "arrayA": {
                          "var": "holderAFntChunks"
                        },
                        "arrayB": {
                          "var": "holderBFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "count": [
                          {
                            "var": "fntMatches"
                          }
                        ]
                      },
                      0
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "return": [
                  true
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "isSamePerson",
        "parameters": {
          "ignoreGntChunks": [
            "DR"
          ],
          "ignoreFntChunks": [
            "DR"
          ],
          "holderA": {
            "nam": {
              "gnt": "JOHN",
              "fnt": "DOE"
            },
            "dob": "1980-02-03"
          },
          "holderB": {
            "nam": {
              "gnt": "JANE",
              "fnt": "DOE"
            },
            "dob": "1980-02-03"
          }
        }
      },
      "exp": false
    },
    {
      "title": "isSamePerson - match despite PhD in fnt (no space)",
      "functions": [
        {
          "name": "__intersectArrays",
          "definition": {
            "parameters": [
              {
                "name": "arrayA"
              },
              {
                "name": "arrayB"
              }
            ],
            "logic": [
              {
                "declare": [
                  "intersection",
                  {
                    "filter": [
                      {
                        "var": "arrayA"
                      },
                      {
                        "in": [
                          {
                            "var": "a"
                          },
                          {
                            "var": "arrayB"
                          }
                        ]
                      },
                      "a"
                    ]
                  }
                ]
              },
              {
                "return": [
                  {
                    "var": "intersection"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "__getNameChunks",
          "definition": {
            "parameters": [
              {
                "name": "name"
              },
              {
                "name": "ignoreChunks",
                "default": []
              }
            ],
            "logic": [
              {
                "declare": [
                  "allChunks",
                  {
                    "split": [
                      {
                        "trim": [
                          {
                            "var": "name"
                          }
                        ]
                      },
                      "<"
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "filteredChunks",
                  {
                    "filter": [
                      {
                        "var": "allChunks"
                      },
                      {
                        "and": [
                          {
                            "!!": [
                              {
                                "var": "it"
                              }
                            ]
                          },
                          {
                            "!": [
                              {
                                "in": [
                                  {
                                    "var": "it"
                                  },
                                  {
                                    "var": "ignoreChunks"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      "it"
                    ]
                  }
                ]
              },
              {
                "return": [
                  {
                    "var": "filteredChunks"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "isSamePerson",
          "definition": {
            "parameters": [
              {
                "name": "holderA"
              },
              {
                "name": "holderB"
              },
              {
                "name": "ignoreGntChunks",
                "default": []
              },
              {
                "name": "ignoreFntChunks",
                "default": []
              }
            ],
            "logic": [
              {
                "declare": [
                  "doesDobMatch",
                  {
                    "===": [
                      {
                        "var": "holderA.dob"
                      },
                      {
                        "var": "holderB.dob"
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "!": [
                      {
                        "var": "doesDobMatch"
                      }
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderAGntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderA.nam.gnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderBGntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderB.nam.gnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "gntMatches",
                  {
                    "call": [
                      "__intersectArrays",
                      {
                        "arrayA": {
                          "var": "holderAGntChunks"
                        },
                        "arrayB": {
                          "var": "holderBGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "count": [
                          {
                            "var": "gntMatches"
                          }
                        ]
                      },
                      0
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderAFntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderA.nam.fnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderBFntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderB.nam.fnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "fntMatches",
                  {
                    "call": [
                      "__intersectArrays",
                      {
                        "arrayA": {
                          "var": "holderAFntChunks"
                        },
                        "arrayB": {
                          "var": "holderBFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "count": [
                          {
                            "var": "fntMatches"
                          }
                        ]
                      },
                      0
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "return": [
                  true
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "isSamePerson",
        "parameters": {
          "ignoreGntChunks": [
            "DR"
          ],
          "ignoreFntChunks": [
            "DR"
          ],
          "holderA": {
            "nam": {
              "gnt": "JOHN",
              "fnt": "DOE"
            },
            "dob": "1980-02-03"
          },
          "holderB": {
            "nam": {
              "gnt": "JOHN",
              "fnt": "DR<DOE"
            },
            "dob": "1980-02-03"
          }
        }
      },
      "exp": true
    },
    {
      "title": "isSamePerson - match despite PhD in fnt (with space)",
      "functions": [
        {
          "name": "__intersectArrays",
          "definition": {
            "parameters": [
              {
                "name": "arrayA"
              },
              {
                "name": "arrayB"
              }
            ],
            "logic": [
              {
                "declare": [
                  "intersection",
                  {
                    "filter": [
                      {
                        "var": "arrayA"
                      },
                      {
                        "in": [
                          {
                            "var": "a"
                          },
                          {
                            "var": "arrayB"
                          }
                        ]
                      },
                      "a"
                    ]
                  }
                ]
              },
              {
                "return": [
                  {
                    "var": "intersection"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "__getNameChunks",
          "definition": {
            "parameters": [
              {
                "name": "name"
              },
              {
                "name": "ignoreChunks",
                "default": []
              }
            ],
            "logic": [
              {
                "declare": [
                  "allChunks",
                  {
                    "split": [
                      {
                        "trim": [
                          {
                            "var": "name"
                          }
                        ]
                      },
                      "<"
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "filteredChunks",
                  {
                    "filter": [
                      {
                        "var": "allChunks"
                      },
                      {
                        "and": [
                          {
                            "!!": [
                              {
                                "var": "it"
                              }
                            ]
                          },
                          {
                            "!": [
                              {
                                "in": [
                                  {
                                    "var": "it"
                                  },
                                  {
                                    "var": "ignoreChunks"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      "it"
                    ]
                  }
                ]
              },
              {
                "return": [
                  {
                    "var": "filteredChunks"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "isSamePerson",
          "definition": {
            "parameters": [
              {
                "name": "holderA"
              },
              {
                "name": "holderB"
              },
              {
                "name": "ignoreGntChunks",
                "default": []
              },
              {
                "name": "ignoreFntChunks",
                "default": []
              }
            ],
            "logic": [
              {
                "declare": [
                  "doesDobMatch",
                  {
                    "===": [
                      {
                        "var": "holderA.dob"
                      },
                      {
                        "var": "holderB.dob"
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "!": [
                      {
                        "var": "doesDobMatch"
                      }
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderAGntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderA.nam.gnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderBGntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderB.nam.gnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "gntMatches",
                  {
                    "call": [
                      "__intersectArrays",
                      {
                        "arrayA": {
                          "var": "holderAGntChunks"
                        },
                        "arrayB": {
                          "var": "holderBGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "count": [
                          {
                            "var": "gntMatches"
                          }
                        ]
                      },
                      0
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderAFntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderA.nam.fnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderBFntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderB.nam.fnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "fntMatches",
                  {
                    "call": [
                      "__intersectArrays",
                      {
                        "arrayA": {
                          "var": "holderAFntChunks"
                        },
                        "arrayB": {
                          "var": "holderBFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "count": [
                          {
                            "var": "fntMatches"
                          }
                        ]
                      },
                      0
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "return": [
                  true
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "isSamePerson",
        "parameters": {
          "ignoreGntChunks": [
            "DR"
          ],
          "ignoreFntChunks": [
            "DR"
          ],
          "holderA": {
            "nam": {
              "gnt": "JOHN",
              "fnt": "DOE"
            },
            "dob": "1980-02-03"
          },
          "holderB": {
            "nam": {
              "gnt": "JOHN",
              "fnt": "DR<<DOE"
            },
            "dob": "1980-02-03"
          }
        }
      },
      "exp": true
    },
    {
      "title": "isSamePerson - match despite PhD in gnt (no space)",
      "functions": [
        {
          "name": "__intersectArrays",
          "definition": {
            "parameters": [
              {
                "name": "arrayA"
              },
              {
                "name": "arrayB"
              }
            ],
            "logic": [
              {
                "declare": [
                  "intersection",
                  {
                    "filter": [
                      {
                        "var": "arrayA"
                      },
                      {
                        "in": [
                          {
                            "var": "a"
                          },
                          {
                            "var": "arrayB"
                          }
                        ]
                      },
                      "a"
                    ]
                  }
                ]
              },
              {
                "return": [
                  {
                    "var": "intersection"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "__getNameChunks",
          "definition": {
            "parameters": [
              {
                "name": "name"
              },
              {
                "name": "ignoreChunks",
                "default": []
              }
            ],
            "logic": [
              {
                "declare": [
                  "allChunks",
                  {
                    "split": [
                      {
                        "trim": [
                          {
                            "var": "name"
                          }
                        ]
                      },
                      "<"
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "filteredChunks",
                  {
                    "filter": [
                      {
                        "var": "allChunks"
                      },
                      {
                        "and": [
                          {
                            "!!": [
                              {
                                "var": "it"
                              }
                            ]
                          },
                          {
                            "!": [
                              {
                                "in": [
                                  {
                                    "var": "it"
                                  },
                                  {
                                    "var": "ignoreChunks"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      "it"
                    ]
                  }
                ]
              },
              {
                "return": [
                  {
                    "var": "filteredChunks"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "isSamePerson",
          "definition": {
            "parameters": [
              {
                "name": "holderA"
              },
              {
                "name": "holderB"
              },
              {
                "name": "ignoreGntChunks",
                "default": []
              },
              {
                "name": "ignoreFntChunks",
                "default": []
              }
            ],
            "logic": [
              {
                "declare": [
                  "doesDobMatch",
                  {
                    "===": [
                      {
                        "var": "holderA.dob"
                      },
                      {
                        "var": "holderB.dob"
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "!": [
                      {
                        "var": "doesDobMatch"
                      }
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderAGntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderA.nam.gnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderBGntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderB.nam.gnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "gntMatches",
                  {
                    "call": [
                      "__intersectArrays",
                      {
                        "arrayA": {
                          "var": "holderAGntChunks"
                        },
                        "arrayB": {
                          "var": "holderBGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "count": [
                          {
                            "var": "gntMatches"
                          }
                        ]
                      },
                      0
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderAFntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderA.nam.fnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderBFntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderB.nam.fnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "fntMatches",
                  {
                    "call": [
                      "__intersectArrays",
                      {
                        "arrayA": {
                          "var": "holderAFntChunks"
                        },
                        "arrayB": {
                          "var": "holderBFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "count": [
                          {
                            "var": "fntMatches"
                          }
                        ]
                      },
                      0
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "return": [
                  true
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "isSamePerson",
        "parameters": {
          "ignoreGntChunks": [
            "DR"
          ],
          "ignoreFntChunks": [
            "DR"
          ],
          "holderA": {
            "nam": {
              "gnt": "JOHN",
              "fnt": "DOE"
            },
            "dob": "1980-02-03"
          },
          "holderB": {
            "nam": {
              "gnt": "DR<JOHN",
              "fnt": "DOE"
            },
            "dob": "1980-02-03"
          }
        }
      },
      "exp": true
    },
    {
      "title": "isSamePerson - match despite PhD in gnt (with space)",
      "functions": [
        {
          "name": "__intersectArrays",
          "definition": {
            "parameters": [
              {
                "name": "arrayA"
              },
              {
                "name": "arrayB"
              }
            ],
            "logic": [
              {
                "declare": [
                  "intersection",
                  {
                    "filter": [
                      {
                        "var": "arrayA"
                      },
                      {
                        "in": [
                          {
                            "var": "a"
                          },
                          {
                            "var": "arrayB"
                          }
                        ]
                      },
                      "a"
                    ]
                  }
                ]
              },
              {
                "return": [
                  {
                    "var": "intersection"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "__getNameChunks",
          "definition": {
            "parameters": [
              {
                "name": "name"
              },
              {
                "name": "ignoreChunks",
                "default": []
              }
            ],
            "logic": [
              {
                "declare": [
                  "allChunks",
                  {
                    "split": [
                      {
                        "trim": [
                          {
                            "var": "name"
                          }
                        ]
                      },
                      "<"
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "filteredChunks",
                  {
                    "filter": [
                      {
                        "var": "allChunks"
                      },
                      {
                        "and": [
                          {
                            "!!": [
                              {
                                "var": "it"
                              }
                            ]
                          },
                          {
                            "!": [
                              {
                                "in": [
                                  {
                                    "var": "it"
                                  },
                                  {
                                    "var": "ignoreChunks"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      "it"
                    ]
                  }
                ]
              },
              {
                "return": [
                  {
                    "var": "filteredChunks"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "isSamePerson",
          "definition": {
            "parameters": [
              {
                "name": "holderA"
              },
              {
                "name": "holderB"
              },
              {
                "name": "ignoreGntChunks",
                "default": []
              },
              {
                "name": "ignoreFntChunks",
                "default": []
              }
            ],
            "logic": [
              {
                "declare": [
                  "doesDobMatch",
                  {
                    "===": [
                      {
                        "var": "holderA.dob"
                      },
                      {
                        "var": "holderB.dob"
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "!": [
                      {
                        "var": "doesDobMatch"
                      }
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderAGntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderA.nam.gnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderBGntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderB.nam.gnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "gntMatches",
                  {
                    "call": [
                      "__intersectArrays",
                      {
                        "arrayA": {
                          "var": "holderAGntChunks"
                        },
                        "arrayB": {
                          "var": "holderBGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "count": [
                          {
                            "var": "gntMatches"
                          }
                        ]
                      },
                      0
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderAFntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderA.nam.fnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderBFntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderB.nam.fnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "fntMatches",
                  {
                    "call": [
                      "__intersectArrays",
                      {
                        "arrayA": {
                          "var": "holderAFntChunks"
                        },
                        "arrayB": {
                          "var": "holderBFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "count": [
                          {
                            "var": "fntMatches"
                          }
                        ]
                      },
                      0
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "return": [
                  true
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "isSamePerson",
        "parameters": {
          "ignoreGntChunks": [
            "DR"
          ],
          "ignoreFntChunks": [
            "DR"
          ],
          "holderA": {
            "nam": {
              "gnt": "JOHN",
              "fnt": "DOE"
            },
            "dob": "1980-02-03"
          },
          "holderB": {
            "nam": {
              "gnt": "DR<<JOHN",
              "fnt": "DOE"
            },
            "dob": "1980-02-03"
          }
        }
      },
      "exp": true
    },
    {
      "title": "isSamePerson - match despite last name addendum",
      "functions": [
        {
          "name": "__intersectArrays",
          "definition": {
            "parameters": [
              {
                "name": "arrayA"
              },
              {
                "name": "arrayB"
              }
            ],
            "logic": [
              {
                "declare": [
                  "intersection",
                  {
                    "filter": [
                      {
                        "var": "arrayA"
                      },
                      {
                        "in": [
                          {
                            "var": "a"
                          },
                          {
                            "var": "arrayB"
                          }
                        ]
                      },
                      "a"
                    ]
                  }
                ]
              },
              {
                "return": [
                  {
                    "var": "intersection"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "__getNameChunks",
          "definition": {
            "parameters": [
              {
                "name": "name"
              },
              {
                "name": "ignoreChunks",
                "default": []
              }
            ],
            "logic": [
              {
                "declare": [
                  "allChunks",
                  {
                    "split": [
                      {
                        "trim": [
                          {
                            "var": "name"
                          }
                        ]
                      },
                      "<"
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "filteredChunks",
                  {
                    "filter": [
                      {
                        "var": "allChunks"
                      },
                      {
                        "and": [
                          {
                            "!!": [
                              {
                                "var": "it"
                              }
                            ]
                          },
                          {
                            "!": [
                              {
                                "in": [
                                  {
                                    "var": "it"
                                  },
                                  {
                                    "var": "ignoreChunks"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      "it"
                    ]
                  }
                ]
              },
              {
                "return": [
                  {
                    "var": "filteredChunks"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "isSamePerson",
          "definition": {
            "parameters": [
              {
                "name": "holderA"
              },
              {
                "name": "holderB"
              },
              {
                "name": "ignoreGntChunks",
                "default": []
              },
              {
                "name": "ignoreFntChunks",
                "default": []
              }
            ],
            "logic": [
              {
                "declare": [
                  "doesDobMatch",
                  {
                    "===": [
                      {
                        "var": "holderA.dob"
                      },
                      {
                        "var": "holderB.dob"
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "!": [
                      {
                        "var": "doesDobMatch"
                      }
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderAGntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderA.nam.gnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderBGntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderB.nam.gnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "gntMatches",
                  {
                    "call": [
                      "__intersectArrays",
                      {
                        "arrayA": {
                          "var": "holderAGntChunks"
                        },
                        "arrayB": {
                          "var": "holderBGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "count": [
                          {
                            "var": "gntMatches"
                          }
                        ]
                      },
                      0
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderAFntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderA.nam.fnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderBFntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderB.nam.fnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "fntMatches",
                  {
                    "call": [
                      "__intersectArrays",
                      {
                        "arrayA": {
                          "var": "holderAFntChunks"
                        },
                        "arrayB": {
                          "var": "holderBFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "count": [
                          {
                            "var": "fntMatches"
                          }
                        ]
                      },
                      0
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "return": [
                  true
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "isSamePerson",
        "parameters": {
          "ignoreGntChunks": [
            "DR"
          ],
          "ignoreFntChunks": [
            "DR"
          ],
          "holderA": {
            "nam": {
              "gnt": "JOHN",
              "fnt": "DOE"
            },
            "dob": "1980-02-03"
          },
          "holderB": {
            "nam": {
              "gnt": "JOHN",
              "fnt": "DOE<DOUGH"
            },
            "dob": "1980-02-03"
          }
        }
      },
      "exp": true
    },
    {
      "title": "isSamePerson - match despite leading and trailing chevron (<)",
      "functions": [
        {
          "name": "__intersectArrays",
          "definition": {
            "parameters": [
              {
                "name": "arrayA"
              },
              {
                "name": "arrayB"
              }
            ],
            "logic": [
              {
                "declare": [
                  "intersection",
                  {
                    "filter": [
                      {
                        "var": "arrayA"
                      },
                      {
                        "in": [
                          {
                            "var": "a"
                          },
                          {
                            "var": "arrayB"
                          }
                        ]
                      },
                      "a"
                    ]
                  }
                ]
              },
              {
                "return": [
                  {
                    "var": "intersection"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "__getNameChunks",
          "definition": {
            "parameters": [
              {
                "name": "name"
              },
              {
                "name": "ignoreChunks",
                "default": []
              }
            ],
            "logic": [
              {
                "declare": [
                  "allChunks",
                  {
                    "split": [
                      {
                        "trim": [
                          {
                            "var": "name"
                          }
                        ]
                      },
                      "<"
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "filteredChunks",
                  {
                    "filter": [
                      {
                        "var": "allChunks"
                      },
                      {
                        "and": [
                          {
                            "!!": [
                              {
                                "var": "it"
                              }
                            ]
                          },
                          {
                            "!": [
                              {
                                "in": [
                                  {
                                    "var": "it"
                                  },
                                  {
                                    "var": "ignoreChunks"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      "it"
                    ]
                  }
                ]
              },
              {
                "return": [
                  {
                    "var": "filteredChunks"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "isSamePerson",
          "definition": {
            "parameters": [
              {
                "name": "holderA"
              },
              {
                "name": "holderB"
              },
              {
                "name": "ignoreGntChunks",
                "default": []
              },
              {
                "name": "ignoreFntChunks",
                "default": []
              }
            ],
            "logic": [
              {
                "declare": [
                  "doesDobMatch",
                  {
                    "===": [
                      {
                        "var": "holderA.dob"
                      },
                      {
                        "var": "holderB.dob"
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "!": [
                      {
                        "var": "doesDobMatch"
                      }
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderAGntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderA.nam.gnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderBGntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderB.nam.gnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "gntMatches",
                  {
                    "call": [
                      "__intersectArrays",
                      {
                        "arrayA": {
                          "var": "holderAGntChunks"
                        },
                        "arrayB": {
                          "var": "holderBGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "count": [
                          {
                            "var": "gntMatches"
                          }
                        ]
                      },
                      0
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderAFntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderA.nam.fnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderBFntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderB.nam.fnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "fntMatches",
                  {
                    "call": [
                      "__intersectArrays",
                      {
                        "arrayA": {
                          "var": "holderAFntChunks"
                        },
                        "arrayB": {
                          "var": "holderBFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "count": [
                          {
                            "var": "fntMatches"
                          }
                        ]
                      },
                      0
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "return": [
                  true
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "isSamePerson",
        "parameters": {
          "ignoreGntChunks": [
            "DR"
          ],
          "ignoreFntChunks": [
            "DR"
          ],
          "holderA": {
            "nam": {
              "gnt": "JOHN",
              "fnt": "DOE"
            },
            "dob": "1980-02-03"
          },
          "holderB": {
            "nam": {
              "gnt": "<JOHN<",
              "fnt": "<DOE<"
            },
            "dob": "1980-02-03"
          }
        }
      },
      "exp": true
    },
    {
      "title": "isSamePerson - match despite leading and trailing whitespace",
      "functions": [
        {
          "name": "__intersectArrays",
          "definition": {
            "parameters": [
              {
                "name": "arrayA"
              },
              {
                "name": "arrayB"
              }
            ],
            "logic": [
              {
                "declare": [
                  "intersection",
                  {
                    "filter": [
                      {
                        "var": "arrayA"
                      },
                      {
                        "in": [
                          {
                            "var": "a"
                          },
                          {
                            "var": "arrayB"
                          }
                        ]
                      },
                      "a"
                    ]
                  }
                ]
              },
              {
                "return": [
                  {
                    "var": "intersection"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "__getNameChunks",
          "definition": {
            "parameters": [
              {
                "name": "name"
              },
              {
                "name": "ignoreChunks",
                "default": []
              }
            ],
            "logic": [
              {
                "declare": [
                  "allChunks",
                  {
                    "split": [
                      {
                        "trim": [
                          {
                            "var": "name"
                          }
                        ]
                      },
                      "<"
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "filteredChunks",
                  {
                    "filter": [
                      {
                        "var": "allChunks"
                      },
                      {
                        "and": [
                          {
                            "!!": [
                              {
                                "var": "it"
                              }
                            ]
                          },
                          {
                            "!": [
                              {
                                "in": [
                                  {
                                    "var": "it"
                                  },
                                  {
                                    "var": "ignoreChunks"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      "it"
                    ]
                  }
                ]
              },
              {
                "return": [
                  {
                    "var": "filteredChunks"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "isSamePerson",
          "definition": {
            "parameters": [
              {
                "name": "holderA"
              },
              {
                "name": "holderB"
              },
              {
                "name": "ignoreGntChunks",
                "default": []
              },
              {
                "name": "ignoreFntChunks",
                "default": []
              }
            ],
            "logic": [
              {
                "declare": [
                  "doesDobMatch",
                  {
                    "===": [
                      {
                        "var": "holderA.dob"
                      },
                      {
                        "var": "holderB.dob"
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "!": [
                      {
                        "var": "doesDobMatch"
                      }
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderAGntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderA.nam.gnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderBGntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderB.nam.gnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "gntMatches",
                  {
                    "call": [
                      "__intersectArrays",
                      {
                        "arrayA": {
                          "var": "holderAGntChunks"
                        },
                        "arrayB": {
                          "var": "holderBGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "count": [
                          {
                            "var": "gntMatches"
                          }
                        ]
                      },
                      0
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderAFntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderA.nam.fnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderBFntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderB.nam.fnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "fntMatches",
                  {
                    "call": [
                      "__intersectArrays",
                      {
                        "arrayA": {
                          "var": "holderAFntChunks"
                        },
                        "arrayB": {
                          "var": "holderBFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "count": [
                          {
                            "var": "fntMatches"
                          }
                        ]
                      },
                      0
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "return": [
                  true
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "isSamePerson",
        "parameters": {
          "ignoreGntChunks": [
            "DR"
          ],
          "ignoreFntChunks": [
            "DR"
          ],
          "holderA": {
            "nam": {
              "gnt": "JOHN",
              "fnt": "DOE"
            },
            "dob": "1980-02-03"
          },
          "holderB": {
            "nam": {
              "gnt": " JOHN ",
              "fnt": " DOE "
            },
            "dob": "1980-02-03"
          }
        }
      },
      "exp": true
    },
    {
      "title": "isSamePerson - match despite optional middle name",
      "functions": [
        {
          "name": "__intersectArrays",
          "definition": {
            "parameters": [
              {
                "name": "arrayA"
              },
              {
                "name": "arrayB"
              }
            ],
            "logic": [
              {
                "declare": [
                  "intersection",
                  {
                    "filter": [
                      {
                        "var": "arrayA"
                      },
                      {
                        "in": [
                          {
                            "var": "a"
                          },
                          {
                            "var": "arrayB"
                          }
                        ]
                      },
                      "a"
                    ]
                  }
                ]
              },
              {
                "return": [
                  {
                    "var": "intersection"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "__getNameChunks",
          "definition": {
            "parameters": [
              {
                "name": "name"
              },
              {
                "name": "ignoreChunks",
                "default": []
              }
            ],
            "logic": [
              {
                "declare": [
                  "allChunks",
                  {
                    "split": [
                      {
                        "trim": [
                          {
                            "var": "name"
                          }
                        ]
                      },
                      "<"
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "filteredChunks",
                  {
                    "filter": [
                      {
                        "var": "allChunks"
                      },
                      {
                        "and": [
                          {
                            "!!": [
                              {
                                "var": "it"
                              }
                            ]
                          },
                          {
                            "!": [
                              {
                                "in": [
                                  {
                                    "var": "it"
                                  },
                                  {
                                    "var": "ignoreChunks"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      "it"
                    ]
                  }
                ]
              },
              {
                "return": [
                  {
                    "var": "filteredChunks"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "isSamePerson",
          "definition": {
            "parameters": [
              {
                "name": "holderA"
              },
              {
                "name": "holderB"
              },
              {
                "name": "ignoreGntChunks",
                "default": []
              },
              {
                "name": "ignoreFntChunks",
                "default": []
              }
            ],
            "logic": [
              {
                "declare": [
                  "doesDobMatch",
                  {
                    "===": [
                      {
                        "var": "holderA.dob"
                      },
                      {
                        "var": "holderB.dob"
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "!": [
                      {
                        "var": "doesDobMatch"
                      }
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderAGntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderA.nam.gnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderBGntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderB.nam.gnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "gntMatches",
                  {
                    "call": [
                      "__intersectArrays",
                      {
                        "arrayA": {
                          "var": "holderAGntChunks"
                        },
                        "arrayB": {
                          "var": "holderBGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "count": [
                          {
                            "var": "gntMatches"
                          }
                        ]
                      },
                      0
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderAFntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderA.nam.fnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderBFntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderB.nam.fnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "fntMatches",
                  {
                    "call": [
                      "__intersectArrays",
                      {
                        "arrayA": {
                          "var": "holderAFntChunks"
                        },
                        "arrayB": {
                          "var": "holderBFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "count": [
                          {
                            "var": "fntMatches"
                          }
                        ]
                      },
                      0
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "return": [
                  true
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "isSamePerson",
        "parameters": {
          "ignoreGntChunks": [
            "DR"
          ],
          "ignoreFntChunks": [
            "DR"
          ],
          "holderA": {
            "nam": {
              "gnt": "JOHN",
              "fnt": "DOE"
            },
            "dob": "1980-02-03"
          },
          "holderB": {
            "nam": {
              "gnt": "JOHN<WILLIAM",
              "fnt": "DOE"
            },
            "dob": "1980-02-03"
          }
        }
      },
      "exp": true
    },
    {
      "title": "isSamePerson - match for twins with same middle name (false positive)",
      "functions": [
        {
          "name": "__intersectArrays",
          "definition": {
            "parameters": [
              {
                "name": "arrayA"
              },
              {
                "name": "arrayB"
              }
            ],
            "logic": [
              {
                "declare": [
                  "intersection",
                  {
                    "filter": [
                      {
                        "var": "arrayA"
                      },
                      {
                        "in": [
                          {
                            "var": "a"
                          },
                          {
                            "var": "arrayB"
                          }
                        ]
                      },
                      "a"
                    ]
                  }
                ]
              },
              {
                "return": [
                  {
                    "var": "intersection"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "__getNameChunks",
          "definition": {
            "parameters": [
              {
                "name": "name"
              },
              {
                "name": "ignoreChunks",
                "default": []
              }
            ],
            "logic": [
              {
                "declare": [
                  "allChunks",
                  {
                    "split": [
                      {
                        "trim": [
                          {
                            "var": "name"
                          }
                        ]
                      },
                      "<"
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "filteredChunks",
                  {
                    "filter": [
                      {
                        "var": "allChunks"
                      },
                      {
                        "and": [
                          {
                            "!!": [
                              {
                                "var": "it"
                              }
                            ]
                          },
                          {
                            "!": [
                              {
                                "in": [
                                  {
                                    "var": "it"
                                  },
                                  {
                                    "var": "ignoreChunks"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      "it"
                    ]
                  }
                ]
              },
              {
                "return": [
                  {
                    "var": "filteredChunks"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "isSamePerson",
          "definition": {
            "parameters": [
              {
                "name": "holderA"
              },
              {
                "name": "holderB"
              },
              {
                "name": "ignoreGntChunks",
                "default": []
              },
              {
                "name": "ignoreFntChunks",
                "default": []
              }
            ],
            "logic": [
              {
                "declare": [
                  "doesDobMatch",
                  {
                    "===": [
                      {
                        "var": "holderA.dob"
                      },
                      {
                        "var": "holderB.dob"
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "!": [
                      {
                        "var": "doesDobMatch"
                      }
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderAGntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderA.nam.gnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderBGntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderB.nam.gnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "gntMatches",
                  {
                    "call": [
                      "__intersectArrays",
                      {
                        "arrayA": {
                          "var": "holderAGntChunks"
                        },
                        "arrayB": {
                          "var": "holderBGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "count": [
                          {
                            "var": "gntMatches"
                          }
                        ]
                      },
                      0
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderAFntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderA.nam.fnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderBFntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderB.nam.fnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "fntMatches",
                  {
                    "call": [
                      "__intersectArrays",
                      {
                        "arrayA": {
                          "var": "holderAFntChunks"
                        },
                        "arrayB": {
                          "var": "holderBFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "count": [
                          {
                            "var": "fntMatches"
                          }
                        ]
                      },
                      0
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "return": [
                  true
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "isSamePerson",
        "parameters": {
          "ignoreGntChunks": [
            "DR"
          ],
          "ignoreFntChunks": [
            "DR"
          ],
          "holderA": {
            "nam": {
              "gnt": "JOHN<ALEX",
              "fnt": "DOE"
            },
            "dob": "1980-02-03"
          },
          "holderB": {
            "nam": {
              "gnt": "JANE<ALEX",
              "fnt": "DOE"
            },
            "dob": "1980-02-03"
          }
        }
      },
      "exp": true
    },
    {
      "title": "isSamePerson - no match because of matching PhD in fnt",
      "functions": [
        {
          "name": "__intersectArrays",
          "definition": {
            "parameters": [
              {
                "name": "arrayA"
              },
              {
                "name": "arrayB"
              }
            ],
            "logic": [
              {
                "declare": [
                  "intersection",
                  {
                    "filter": [
                      {
                        "var": "arrayA"
                      },
                      {
                        "in": [
                          {
                            "var": "a"
                          },
                          {
                            "var": "arrayB"
                          }
                        ]
                      },
                      "a"
                    ]
                  }
                ]
              },
              {
                "return": [
                  {
                    "var": "intersection"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "__getNameChunks",
          "definition": {
            "parameters": [
              {
                "name": "name"
              },
              {
                "name": "ignoreChunks",
                "default": []
              }
            ],
            "logic": [
              {
                "declare": [
                  "allChunks",
                  {
                    "split": [
                      {
                        "trim": [
                          {
                            "var": "name"
                          }
                        ]
                      },
                      "<"
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "filteredChunks",
                  {
                    "filter": [
                      {
                        "var": "allChunks"
                      },
                      {
                        "and": [
                          {
                            "!!": [
                              {
                                "var": "it"
                              }
                            ]
                          },
                          {
                            "!": [
                              {
                                "in": [
                                  {
                                    "var": "it"
                                  },
                                  {
                                    "var": "ignoreChunks"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      "it"
                    ]
                  }
                ]
              },
              {
                "return": [
                  {
                    "var": "filteredChunks"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "isSamePerson",
          "definition": {
            "parameters": [
              {
                "name": "holderA"
              },
              {
                "name": "holderB"
              },
              {
                "name": "ignoreGntChunks",
                "default": []
              },
              {
                "name": "ignoreFntChunks",
                "default": []
              }
            ],
            "logic": [
              {
                "declare": [
                  "doesDobMatch",
                  {
                    "===": [
                      {
                        "var": "holderA.dob"
                      },
                      {
                        "var": "holderB.dob"
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "!": [
                      {
                        "var": "doesDobMatch"
                      }
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderAGntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderA.nam.gnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderBGntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderB.nam.gnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "gntMatches",
                  {
                    "call": [
                      "__intersectArrays",
                      {
                        "arrayA": {
                          "var": "holderAGntChunks"
                        },
                        "arrayB": {
                          "var": "holderBGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "count": [
                          {
                            "var": "gntMatches"
                          }
                        ]
                      },
                      0
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderAFntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderA.nam.fnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderBFntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderB.nam.fnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "fntMatches",
                  {
                    "call": [
                      "__intersectArrays",
                      {
                        "arrayA": {
                          "var": "holderAFntChunks"
                        },
                        "arrayB": {
                          "var": "holderBFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "count": [
                          {
                            "var": "fntMatches"
                          }
                        ]
                      },
                      0
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "return": [
                  true
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "isSamePerson",
        "parameters": {
          "ignoreGntChunks": [
            "DR"
          ],
          "ignoreFntChunks": [
            "DR"
          ],
          "holderA": {
            "nam": {
              "gnt": "JOHN",
              "fnt": "DR<<DOE"
            },
            "dob": "1980-02-03"
          },
          "holderB": {
            "nam": {
              "gnt": "JOHN",
              "fnt": "DR<<DOUGH"
            },
            "dob": "1980-02-03"
          }
        }
      },
      "exp": false
    },
    {
      "title": "isSamePerson - no match because of matching PhD in gnt",
      "functions": [
        {
          "name": "__intersectArrays",
          "definition": {
            "parameters": [
              {
                "name": "arrayA"
              },
              {
                "name": "arrayB"
              }
            ],
            "logic": [
              {
                "declare": [
                  "intersection",
                  {
                    "filter": [
                      {
                        "var": "arrayA"
                      },
                      {
                        "in": [
                          {
                            "var": "a"
                          },
                          {
                            "var": "arrayB"
                          }
                        ]
                      },
                      "a"
                    ]
                  }
                ]
              },
              {
                "return": [
                  {
                    "var": "intersection"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "__getNameChunks",
          "definition": {
            "parameters": [
              {
                "name": "name"
              },
              {
                "name": "ignoreChunks",
                "default": []
              }
            ],
            "logic": [
              {
                "declare": [
                  "allChunks",
                  {
                    "split": [
                      {
                        "trim": [
                          {
                            "var": "name"
                          }
                        ]
                      },
                      "<"
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "filteredChunks",
                  {
                    "filter": [
                      {
                        "var": "allChunks"
                      },
                      {
                        "and": [
                          {
                            "!!": [
                              {
                                "var": "it"
                              }
                            ]
                          },
                          {
                            "!": [
                              {
                                "in": [
                                  {
                                    "var": "it"
                                  },
                                  {
                                    "var": "ignoreChunks"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      "it"
                    ]
                  }
                ]
              },
              {
                "return": [
                  {
                    "var": "filteredChunks"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "isSamePerson",
          "definition": {
            "parameters": [
              {
                "name": "holderA"
              },
              {
                "name": "holderB"
              },
              {
                "name": "ignoreGntChunks",
                "default": []
              },
              {
                "name": "ignoreFntChunks",
                "default": []
              }
            ],
            "logic": [
              {
                "declare": [
                  "doesDobMatch",
                  {
                    "===": [
                      {
                        "var": "holderA.dob"
                      },
                      {
                        "var": "holderB.dob"
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "!": [
                      {
                        "var": "doesDobMatch"
                      }
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderAGntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderA.nam.gnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderBGntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderB.nam.gnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "gntMatches",
                  {
                    "call": [
                      "__intersectArrays",
                      {
                        "arrayA": {
                          "var": "holderAGntChunks"
                        },
                        "arrayB": {
                          "var": "holderBGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "count": [
                          {
                            "var": "gntMatches"
                          }
                        ]
                      },
                      0
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderAFntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderA.nam.fnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderBFntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderB.nam.fnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "fntMatches",
                  {
                    "call": [
                      "__intersectArrays",
                      {
                        "arrayA": {
                          "var": "holderAFntChunks"
                        },
                        "arrayB": {
                          "var": "holderBFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "count": [
                          {
                            "var": "fntMatches"
                          }
                        ]
                      },
                      0
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "return": [
                  true
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "isSamePerson",
        "parameters": {
          "ignoreGntChunks": [
            "DR"
          ],
          "ignoreFntChunks": [
            "DR"
          ],
          "holderA": {
            "nam": {
              "gnt": "DR<<JOHN",
              "fnt": "DOE"
            },
            "dob": "1980-02-03"
          },
          "holderB": {
            "nam": {
              "gnt": "DR<<JANE",
              "fnt": "DOE"
            },
            "dob": "1980-02-03"
          }
        }
      },
      "exp": false
    },
    {
      "title": "isSamePerson - no match because of matching chevrons (<)",
      "functions": [
        {
          "name": "__intersectArrays",
          "definition": {
            "parameters": [
              {
                "name": "arrayA"
              },
              {
                "name": "arrayB"
              }
            ],
            "logic": [
              {
                "declare": [
                  "intersection",
                  {
                    "filter": [
                      {
                        "var": "arrayA"
                      },
                      {
                        "in": [
                          {
                            "var": "a"
                          },
                          {
                            "var": "arrayB"
                          }
                        ]
                      },
                      "a"
                    ]
                  }
                ]
              },
              {
                "return": [
                  {
                    "var": "intersection"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "__getNameChunks",
          "definition": {
            "parameters": [
              {
                "name": "name"
              },
              {
                "name": "ignoreChunks",
                "default": []
              }
            ],
            "logic": [
              {
                "declare": [
                  "allChunks",
                  {
                    "split": [
                      {
                        "trim": [
                          {
                            "var": "name"
                          }
                        ]
                      },
                      "<"
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "filteredChunks",
                  {
                    "filter": [
                      {
                        "var": "allChunks"
                      },
                      {
                        "and": [
                          {
                            "!!": [
                              {
                                "var": "it"
                              }
                            ]
                          },
                          {
                            "!": [
                              {
                                "in": [
                                  {
                                    "var": "it"
                                  },
                                  {
                                    "var": "ignoreChunks"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      "it"
                    ]
                  }
                ]
              },
              {
                "return": [
                  {
                    "var": "filteredChunks"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "isSamePerson",
          "definition": {
            "parameters": [
              {
                "name": "holderA"
              },
              {
                "name": "holderB"
              },
              {
                "name": "ignoreGntChunks",
                "default": []
              },
              {
                "name": "ignoreFntChunks",
                "default": []
              }
            ],
            "logic": [
              {
                "declare": [
                  "doesDobMatch",
                  {
                    "===": [
                      {
                        "var": "holderA.dob"
                      },
                      {
                        "var": "holderB.dob"
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "!": [
                      {
                        "var": "doesDobMatch"
                      }
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderAGntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderA.nam.gnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderBGntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderB.nam.gnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "gntMatches",
                  {
                    "call": [
                      "__intersectArrays",
                      {
                        "arrayA": {
                          "var": "holderAGntChunks"
                        },
                        "arrayB": {
                          "var": "holderBGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "count": [
                          {
                            "var": "gntMatches"
                          }
                        ]
                      },
                      0
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderAFntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderA.nam.fnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderBFntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderB.nam.fnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "fntMatches",
                  {
                    "call": [
                      "__intersectArrays",
                      {
                        "arrayA": {
                          "var": "holderAFntChunks"
                        },
                        "arrayB": {
                          "var": "holderBFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "count": [
                          {
                            "var": "fntMatches"
                          }
                        ]
                      },
                      0
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "return": [
                  true
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "isSamePerson",
        "parameters": {
          "ignoreGntChunks": [
            "DR"
          ],
          "ignoreFntChunks": [
            "DR"
          ],
          "holderA": {
            "nam": {
              "gnt": "<JOHN<",
              "fnt": "<DOE<"
            },
            "dob": "1980-02-03"
          },
          "holderB": {
            "nam": {
              "gnt": "<JANE<",
              "fnt": "<DOE<"
            },
            "dob": "1980-02-03"
          }
        }
      },
      "exp": false
    },
    {
      "title": "isSamePerson - no match because of matching whitespace",
      "functions": [
        {
          "name": "__intersectArrays",
          "definition": {
            "parameters": [
              {
                "name": "arrayA"
              },
              {
                "name": "arrayB"
              }
            ],
            "logic": [
              {
                "declare": [
                  "intersection",
                  {
                    "filter": [
                      {
                        "var": "arrayA"
                      },
                      {
                        "in": [
                          {
                            "var": "a"
                          },
                          {
                            "var": "arrayB"
                          }
                        ]
                      },
                      "a"
                    ]
                  }
                ]
              },
              {
                "return": [
                  {
                    "var": "intersection"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "__getNameChunks",
          "definition": {
            "parameters": [
              {
                "name": "name"
              },
              {
                "name": "ignoreChunks",
                "default": []
              }
            ],
            "logic": [
              {
                "declare": [
                  "allChunks",
                  {
                    "split": [
                      {
                        "trim": [
                          {
                            "var": "name"
                          }
                        ]
                      },
                      "<"
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "filteredChunks",
                  {
                    "filter": [
                      {
                        "var": "allChunks"
                      },
                      {
                        "and": [
                          {
                            "!!": [
                              {
                                "var": "it"
                              }
                            ]
                          },
                          {
                            "!": [
                              {
                                "in": [
                                  {
                                    "var": "it"
                                  },
                                  {
                                    "var": "ignoreChunks"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      "it"
                    ]
                  }
                ]
              },
              {
                "return": [
                  {
                    "var": "filteredChunks"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "isSamePerson",
          "definition": {
            "parameters": [
              {
                "name": "holderA"
              },
              {
                "name": "holderB"
              },
              {
                "name": "ignoreGntChunks",
                "default": []
              },
              {
                "name": "ignoreFntChunks",
                "default": []
              }
            ],
            "logic": [
              {
                "declare": [
                  "doesDobMatch",
                  {
                    "===": [
                      {
                        "var": "holderA.dob"
                      },
                      {
                        "var": "holderB.dob"
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "!": [
                      {
                        "var": "doesDobMatch"
                      }
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderAGntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderA.nam.gnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderBGntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderB.nam.gnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "gntMatches",
                  {
                    "call": [
                      "__intersectArrays",
                      {
                        "arrayA": {
                          "var": "holderAGntChunks"
                        },
                        "arrayB": {
                          "var": "holderBGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "count": [
                          {
                            "var": "gntMatches"
                          }
                        ]
                      },
                      0
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderAFntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderA.nam.fnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderBFntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderB.nam.fnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "fntMatches",
                  {
                    "call": [
                      "__intersectArrays",
                      {
                        "arrayA": {
                          "var": "holderAFntChunks"
                        },
                        "arrayB": {
                          "var": "holderBFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "count": [
                          {
                            "var": "fntMatches"
                          }
                        ]
                      },
                      0
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "return": [
                  true
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "isSamePerson",
        "parameters": {
          "ignoreGntChunks": [
            "DR"
          ],
          "ignoreFntChunks": [
            "DR"
          ],
          "holderA": {
            "nam": {
              "gnt": " JOHN ",
              "fnt": " DOE "
            },
            "dob": "1980-02-03"
          },
          "holderB": {
            "nam": {
              "gnt": " JANE ",
              "fnt": " DOE "
            },
            "dob": "1980-02-03"
          }
        }
      },
      "exp": false
    },
    {
      "title": "isSamePerson - no match for siblings with same middle name",
      "functions": [
        {
          "name": "__intersectArrays",
          "definition": {
            "parameters": [
              {
                "name": "arrayA"
              },
              {
                "name": "arrayB"
              }
            ],
            "logic": [
              {
                "declare": [
                  "intersection",
                  {
                    "filter": [
                      {
                        "var": "arrayA"
                      },
                      {
                        "in": [
                          {
                            "var": "a"
                          },
                          {
                            "var": "arrayB"
                          }
                        ]
                      },
                      "a"
                    ]
                  }
                ]
              },
              {
                "return": [
                  {
                    "var": "intersection"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "__getNameChunks",
          "definition": {
            "parameters": [
              {
                "name": "name"
              },
              {
                "name": "ignoreChunks",
                "default": []
              }
            ],
            "logic": [
              {
                "declare": [
                  "allChunks",
                  {
                    "split": [
                      {
                        "trim": [
                          {
                            "var": "name"
                          }
                        ]
                      },
                      "<"
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "filteredChunks",
                  {
                    "filter": [
                      {
                        "var": "allChunks"
                      },
                      {
                        "and": [
                          {
                            "!!": [
                              {
                                "var": "it"
                              }
                            ]
                          },
                          {
                            "!": [
                              {
                                "in": [
                                  {
                                    "var": "it"
                                  },
                                  {
                                    "var": "ignoreChunks"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      "it"
                    ]
                  }
                ]
              },
              {
                "return": [
                  {
                    "var": "filteredChunks"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "isSamePerson",
          "definition": {
            "parameters": [
              {
                "name": "holderA"
              },
              {
                "name": "holderB"
              },
              {
                "name": "ignoreGntChunks",
                "default": []
              },
              {
                "name": "ignoreFntChunks",
                "default": []
              }
            ],
            "logic": [
              {
                "declare": [
                  "doesDobMatch",
                  {
                    "===": [
                      {
                        "var": "holderA.dob"
                      },
                      {
                        "var": "holderB.dob"
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "!": [
                      {
                        "var": "doesDobMatch"
                      }
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderAGntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderA.nam.gnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderBGntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderB.nam.gnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "gntMatches",
                  {
                    "call": [
                      "__intersectArrays",
                      {
                        "arrayA": {
                          "var": "holderAGntChunks"
                        },
                        "arrayB": {
                          "var": "holderBGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "count": [
                          {
                            "var": "gntMatches"
                          }
                        ]
                      },
                      0
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderAFntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderA.nam.fnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderBFntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderB.nam.fnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "fntMatches",
                  {
                    "call": [
                      "__intersectArrays",
                      {
                        "arrayA": {
                          "var": "holderAFntChunks"
                        },
                        "arrayB": {
                          "var": "holderBFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "count": [
                          {
                            "var": "fntMatches"
                          }
                        ]
                      },
                      0
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "return": [
                  true
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "isSamePerson",
        "parameters": {
          "ignoreGntChunks": [
            "DR"
          ],
          "ignoreFntChunks": [
            "DR"
          ],
          "holderA": {
            "nam": {
              "gnt": "JOHN<ALEX",
              "fnt": "DOE"
            },
            "dob": "1980-02-03"
          },
          "holderB": {
            "nam": {
              "gnt": "JANE<ALEX",
              "fnt": "DOE"
            },
            "dob": "1970-01-01"
          }
        }
      },
      "exp": false
    },
    {
      "title": "isSamePerson - no match for twins",
      "functions": [
        {
          "name": "__intersectArrays",
          "definition": {
            "parameters": [
              {
                "name": "arrayA"
              },
              {
                "name": "arrayB"
              }
            ],
            "logic": [
              {
                "declare": [
                  "intersection",
                  {
                    "filter": [
                      {
                        "var": "arrayA"
                      },
                      {
                        "in": [
                          {
                            "var": "a"
                          },
                          {
                            "var": "arrayB"
                          }
                        ]
                      },
                      "a"
                    ]
                  }
                ]
              },
              {
                "return": [
                  {
                    "var": "intersection"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "__getNameChunks",
          "definition": {
            "parameters": [
              {
                "name": "name"
              },
              {
                "name": "ignoreChunks",
                "default": []
              }
            ],
            "logic": [
              {
                "declare": [
                  "allChunks",
                  {
                    "split": [
                      {
                        "trim": [
                          {
                            "var": "name"
                          }
                        ]
                      },
                      "<"
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "filteredChunks",
                  {
                    "filter": [
                      {
                        "var": "allChunks"
                      },
                      {
                        "and": [
                          {
                            "!!": [
                              {
                                "var": "it"
                              }
                            ]
                          },
                          {
                            "!": [
                              {
                                "in": [
                                  {
                                    "var": "it"
                                  },
                                  {
                                    "var": "ignoreChunks"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      "it"
                    ]
                  }
                ]
              },
              {
                "return": [
                  {
                    "var": "filteredChunks"
                  }
                ]
              }
            ]
          }
        },
        {
          "name": "isSamePerson",
          "definition": {
            "parameters": [
              {
                "name": "holderA"
              },
              {
                "name": "holderB"
              },
              {
                "name": "ignoreGntChunks",
                "default": []
              },
              {
                "name": "ignoreFntChunks",
                "default": []
              }
            ],
            "logic": [
              {
                "declare": [
                  "doesDobMatch",
                  {
                    "===": [
                      {
                        "var": "holderA.dob"
                      },
                      {
                        "var": "holderB.dob"
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "!": [
                      {
                        "var": "doesDobMatch"
                      }
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderAGntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderA.nam.gnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderBGntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderB.nam.gnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "gntMatches",
                  {
                    "call": [
                      "__intersectArrays",
                      {
                        "arrayA": {
                          "var": "holderAGntChunks"
                        },
                        "arrayB": {
                          "var": "holderBGntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "count": [
                          {
                            "var": "gntMatches"
                          }
                        ]
                      },
                      0
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderAFntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderA.nam.fnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "holderBFntChunks",
                  {
                    "call": [
                      "__getNameChunks",
                      {
                        "name": {
                          "var": "holderB.nam.fnt"
                        },
                        "ignoreChunks": {
                          "var": "ignoreFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "declare": [
                  "fntMatches",
                  {
                    "call": [
                      "__intersectArrays",
                      {
                        "arrayA": {
                          "var": "holderAFntChunks"
                        },
                        "arrayB": {
                          "var": "holderBFntChunks"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "count": [
                          {
                            "var": "fntMatches"
                          }
                        ]
                      },
                      0
                    ]
                  },
                  {
                    "return": [
                      false
                    ]
                  }
                ]
              },
              {
                "return": [
                  true
                ]
              }
            ]
          }
        }
      ],
      "evaluateFunction": {
        "name": "isSamePerson",
        "parameters": {
          "ignoreGntChunks": [
            "DR"
          ],
          "ignoreFntChunks": [
            "DR"
          ],
          "holderA": {
            "nam": {
              "gnt": "JOHN",
              "fnt": "DOE"
            },
            "dob": "1980-02-03"
          },
          "holderB": {
            "nam": {
              "gnt": "JANE",
              "fnt": "DOE"
            },
            "dob": "1980-02-03"
          }
        }
      },
      "exp": false
    },
    {
      "title": "map - allows to specify the variable name for the current value and to access the outer context",
      "logic": {
        "map": [
          {
            "var": "elements"
          },
          {
            "+": [
              {
                "var": "it.num"
              },
              {
                "var": "threshold"
              }
            ]
          },
          "it"
        ]
      },
      "data": {
        "elements": [
          {
            "num": 3
          },
          {
            "num": 4
          },
          {
            "num": 5
          }
        ],
        "threshold": 3
      },
      "exp": [
        6,
        7,
        8
      ]
    },
    {
      "title": "map - allows to use script inside for complex operations",
      "logic": {
        "map": [
          {
            "var": "elements"
          },
          {
            "script": [
              {
                "declare": [
                  "result",
                  {
                    "+": [
                      {
                        "var": "it"
                      },
                      {
                        "var": "offset"
                      }
                    ]
                  }
                ]
              },
              {
                "return": [
                  {
                    "var": "result"
                  }
                ]
              }
            ]
          },
          "it"
        ]
      },
      "data": {
        "elements": [
          1,
          2,
          3
        ],
        "offset": 5
      },
      "exp": [
        6,
        7,
        8
      ]
    },
    {
      "title": "map - data types - if first parameter is a boolean (false), returns an empty array",
      "logic": {
        "map": [
          {
            "var": "elements"
          },
          true
        ]
      },
      "data": {
        "elements": false
      },
      "exp": []
    },
    {
      "title": "map - data types - if first parameter is a boolean (true), returns an empty array",
      "logic": {
        "map": [
          {
            "var": "elements"
          },
          true
        ]
      },
      "data": {
        "elements": true
      },
      "exp": []
    },
    {
      "title": "map - data types - if first parameter is a number, returns an empty array",
      "logic": {
        "map": [
          {
            "var": "elements"
          },
          true
        ]
      },
      "data": {
        "elements": 5
      },
      "exp": []
    },
    {
      "title": "map - data types - if first parameter is a string, returns an empty array",
      "logic": {
        "map": [
          {
            "var": "elements"
          },
          true
        ]
      },
      "data": {
        "elements": "not-an-array"
      },
      "exp": []
    },
    {
      "title": "map - data types - if first parameter is an object, returns an empty array",
      "logic": {
        "map": [
          {
            "var": "elements"
          },
          true
        ]
      },
      "data": {
        "elements": {}
      },
      "exp": []
    },
    {
      "title": "map - data types - if first parameter is null, returns an empty array",
      "logic": {
        "map": [
          {
            "var": "elements"
          },
          true
        ]
      },
      "data": {
        "elements": null
      },
      "exp": []
    },
    {
      "title": "map - maps each element to a new value",
      "logic": {
        "map": [
          {
            "var": "elements"
          },
          {
            "+": [
              {
                "var": "num"
              },
              3
            ]
          }
        ]
      },
      "data": {
        "elements": [
          {
            "num": 3
          },
          {
            "num": 4
          },
          {
            "num": 5
          }
        ]
      },
      "exp": [
        6,
        7,
        8
      ]
    },
    {
      "title": "none - allows to specify the variable name for the current value and to access the outer context",
      "logic": {
        "none": [
          {
            "var": "elements"
          },
          {
            "and": [
              {
                "var": "it"
              },
              {
                "var": "outer"
              }
            ]
          },
          "it"
        ]
      },
      "data": {
        "elements": [
          false,
          0,
          ""
        ],
        "outer": false
      },
      "exp": true
    },
    {
      "title": "none - data types - if first parameter is a boolean (false), returns true",
      "logic": {
        "none": [
          {
            "var": "elements"
          },
          {
            "var": ""
          }
        ]
      },
      "data": {
        "elements": false
      },
      "exp": true
    },
    {
      "title": "none - data types - if first parameter is a boolean (true), returns true",
      "logic": {
        "none": [
          {
            "var": "elements"
          },
          {
            "var": ""
          }
        ]
      },
      "data": {
        "elements": true
      },
      "exp": true
    },
    {
      "title": "none - data types - if first parameter is a number, returns true",
      "logic": {
        "none": [
          {
            "var": "elements"
          },
          {
            "var": ""
          }
        ]
      },
      "data": {
        "elements": 5
      },
      "exp": true
    },
    {
      "title": "none - data types - if first parameter is a string, returns true",
      "logic": {
        "none": [
          {
            "var": "elements"
          },
          {
            "var": ""
          }
        ]
      },
      "data": {
        "elements": "not-an-array"
      },
      "exp": true
    },
    {
      "title": "none - data types - if first parameter is an object, returns true",
      "logic": {
        "none": [
          {
            "var": "elements"
          },
          {
            "var": ""
          }
        ]
      },
      "data": {
        "elements": {}
      },
      "exp": true
    },
    {
      "title": "none - data types - if first parameter is null, returns true",
      "logic": {
        "none": [
          {
            "var": "elements"
          },
          {
            "var": ""
          }
        ]
      },
      "data": {
        "elements": null
      },
      "exp": true
    },
    {
      "title": "none - returns false if the closure returns true for at least one elements (negative test)",
      "logic": {
        "none": [
          {
            "var": "elements"
          },
          {
            "var": ""
          }
        ]
      },
      "data": {
        "elements": [
          false,
          0,
          "",
          true
        ]
      },
      "exp": false
    },
    {
      "title": "none - returns true if the closure returns falsy for all elements (positive test)",
      "logic": {
        "none": [
          {
            "var": "elements"
          },
          {
            "var": ""
          }
        ]
      },
      "data": {
        "elements": [
          false,
          0,
          ""
        ]
      },
      "exp": true
    },
    {
      "title": "patched operations - patched reduce knows about global data - #1 with null",
      "logic": {
        "reduce": [
          {
            "var": "x"
          },
          {
            "+": [
              {
                "var": "accumulator"
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "var": "current"
                      },
                      {
                        "var": "data.z"
                      }
                    ]
                  },
                  1,
                  0
                ]
              }
            ]
          },
          0
        ]
      },
      "data": null,
      "exp": 0
    },
    {
      "title": "patched operations - patched reduce knows about global data - #10 with {\"x\":[1,2,1,1],\"z\":2}",
      "logic": {
        "reduce": [
          {
            "var": "x"
          },
          {
            "+": [
              {
                "var": "accumulator"
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "var": "current"
                      },
                      {
                        "var": "data.z"
                      }
                    ]
                  },
                  1,
                  0
                ]
              }
            ]
          },
          0
        ]
      },
      "data": {
        "x": [
          1,
          2,
          1,
          1
        ],
        "z": 2
      },
      "exp": 1
    },
    {
      "title": "patched operations - patched reduce knows about global data - #2 with {}",
      "logic": {
        "reduce": [
          {
            "var": "x"
          },
          {
            "+": [
              {
                "var": "accumulator"
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "var": "current"
                      },
                      {
                        "var": "data.z"
                      }
                    ]
                  },
                  1,
                  0
                ]
              }
            ]
          },
          0
        ]
      },
      "data": {},
      "exp": 0
    },
    {
      "title": "patched operations - patched reduce knows about global data - #3 with {\"x\":null}",
      "logic": {
        "reduce": [
          {
            "var": "x"
          },
          {
            "+": [
              {
                "var": "accumulator"
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "var": "current"
                      },
                      {
                        "var": "data.z"
                      }
                    ]
                  },
                  1,
                  0
                ]
              }
            ]
          },
          0
        ]
      },
      "data": {
        "x": null
      },
      "exp": 0
    },
    {
      "title": "patched operations - patched reduce knows about global data - #4 with {\"x\":[]}",
      "logic": {
        "reduce": [
          {
            "var": "x"
          },
          {
            "+": [
              {
                "var": "accumulator"
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "var": "current"
                      },
                      {
                        "var": "data.z"
                      }
                    ]
                  },
                  1,
                  0
                ]
              }
            ]
          },
          0
        ]
      },
      "data": {
        "x": []
      },
      "exp": 0
    },
    {
      "title": "patched operations - patched reduce knows about global data - #5 with {\"x\":[],\"z\":null}",
      "logic": {
        "reduce": [
          {
            "var": "x"
          },
          {
            "+": [
              {
                "var": "accumulator"
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "var": "current"
                      },
                      {
                        "var": "data.z"
                      }
                    ]
                  },
                  1,
                  0
                ]
              }
            ]
          },
          0
        ]
      },
      "data": {
        "x": [],
        "z": null
      },
      "exp": 0
    },
    {
      "title": "patched operations - patched reduce knows about global data - #6 with {\"x\":[null],\"z\":null}",
      "logic": {
        "reduce": [
          {
            "var": "x"
          },
          {
            "+": [
              {
                "var": "accumulator"
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "var": "current"
                      },
                      {
                        "var": "data.z"
                      }
                    ]
                  },
                  1,
                  0
                ]
              }
            ]
          },
          0
        ]
      },
      "data": {
        "x": [
          null
        ],
        "z": null
      },
      "exp": 1
    },
    {
      "title": "patched operations - patched reduce knows about global data - #7 with {\"x\":[null],\"z\":1}",
      "logic": {
        "reduce": [
          {
            "var": "x"
          },
          {
            "+": [
              {
                "var": "accumulator"
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "var": "current"
                      },
                      {
                        "var": "data.z"
                      }
                    ]
                  },
                  1,
                  0
                ]
              }
            ]
          },
          0
        ]
      },
      "data": {
        "x": [
          null
        ],
        "z": 1
      },
      "exp": 0
    },
    {
      "title": "patched operations - patched reduce knows about global data - #8 with {\"x\":[1],\"z\":1}",
      "logic": {
        "reduce": [
          {
            "var": "x"
          },
          {
            "+": [
              {
                "var": "accumulator"
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "var": "current"
                      },
                      {
                        "var": "data.z"
                      }
                    ]
                  },
                  1,
                  0
                ]
              }
            ]
          },
          0
        ]
      },
      "data": {
        "x": [
          1
        ],
        "z": 1
      },
      "exp": 1
    },
    {
      "title": "patched operations - patched reduce knows about global data - #9 with {\"x\":[1,2,1,1],\"z\":1}",
      "logic": {
        "reduce": [
          {
            "var": "x"
          },
          {
            "+": [
              {
                "var": "accumulator"
              },
              {
                "if": [
                  {
                    "===": [
                      {
                        "var": "current"
                      },
                      {
                        "var": "data.z"
                      }
                    ]
                  },
                  1,
                  0
                ]
              }
            ]
          },
          0
        ]
      },
      "data": {
        "x": [
          1,
          2,
          1,
          1
        ],
        "z": 1
      },
      "exp": 3
    },
    {
      "title": "plusTime - adds days",
      "logic": {
        "plusTime": [
          {
            "var": "timestamp"
          },
          1,
          "day"
        ]
      },
      "data": {
        "timestamp": "2021-12-12T00:00:00Z"
      },
      "exp": "2021-12-13T00:00:00Z"
    },
    {
      "title": "plusTime - adds hours",
      "logic": {
        "plusTime": [
          {
            "var": "timestamp"
          },
          1,
          "hour"
        ]
      },
      "data": {
        "timestamp": "2021-12-12T00:00:00Z"
      },
      "exp": "2021-12-12T01:00:00Z"
    },
    {
      "title": "plusTime - adds hours and considers daylight saving time",
      "logic": {
        "plusTime": [
          {
            "var": "timestamp"
          },
          2,
          "hour"
        ]
      },
      "data": {
        "timestamp": "2022-03-27T01:00:00+01:00"
      },
      "exp": "2022-03-27T04:00:00+02:00"
    },
    {
      "title": "plusTime - adds hours and considers standard time",
      "logic": {
        "plusTime": [
          {
            "var": "timestamp"
          },
          2,
          "hour"
        ]
      },
      "data": {
        "timestamp": "2022-10-30T02:00:00+02:00"
      },
      "exp": "2022-10-30T03:00:00+01:00"
    },
    {
      "title": "plusTime - adds minutes",
      "logic": {
        "plusTime": [
          {
            "var": "timestamp"
          },
          1,
          "minute"
        ]
      },
      "data": {
        "timestamp": "2021-12-12T00:00:00Z"
      },
      "exp": "2021-12-12T00:01:00Z"
    },
    {
      "title": "plusTime - adds months across years",
      "logic": {
        "plusTime": [
          {
            "var": "timestamp"
          },
          1,
          "month"
        ]
      },
      "data": {
        "timestamp": "2021-12-12T00:00:00Z"
      },
      "exp": "2022-01-12T00:00:00Z"
    },
    {
      "title": "plusTime - adds months and considers the last day of the month (Jan to Apr)",
      "logic": {
        "plusTime": [
          {
            "var": "timestamp"
          },
          3,
          "month"
        ]
      },
      "data": {
        "timestamp": "2021-01-31T00:00:00Z"
      },
      "exp": "2021-04-30T00:00:00Z"
    },
    {
      "title": "plusTime - adds months and considers the last day of the month (Jan to Feb in a leap year)",
      "logic": {
        "plusTime": [
          {
            "var": "timestamp"
          },
          1,
          "month"
        ]
      },
      "data": {
        "timestamp": "2020-01-31T00:00:00Z"
      },
      "exp": "2020-02-29T00:00:00Z"
    },
    {
      "title": "plusTime - adds months and considers the last day of the month (Jan to Feb)",
      "logic": {
        "plusTime": [
          {
            "var": "timestamp"
          },
          1,
          "month"
        ]
      },
      "data": {
        "timestamp": "2021-01-31T00:00:00Z"
      },
      "exp": "2021-02-28T00:00:00Z"
    },
    {
      "title": "plusTime - adds months and considers the last day of the month (Jan to Mar)",
      "logic": {
        "plusTime": [
          {
            "var": "timestamp"
          },
          2,
          "month"
        ]
      },
      "data": {
        "timestamp": "2021-01-31T00:00:00Z"
      },
      "exp": "2021-03-31T00:00:00Z"
    },
    {
      "title": "plusTime - adds months in the middle of the month",
      "logic": {
        "plusTime": [
          {
            "var": "timestamp"
          },
          1,
          "month"
        ]
      },
      "data": {
        "timestamp": "2021-11-12T00:00:00Z"
      },
      "exp": "2021-12-12T00:00:00Z"
    },
    {
      "title": "plusTime - adds seconds",
      "logic": {
        "plusTime": [
          {
            "var": "timestamp"
          },
          1,
          "second"
        ]
      },
      "data": {
        "timestamp": "2021-12-12T00:00:00Z"
      },
      "exp": "2021-12-12T00:00:01Z"
    },
    {
      "title": "plusTime - adds years",
      "logic": {
        "plusTime": [
          {
            "var": "timestamp"
          },
          1,
          "year"
        ]
      },
      "data": {
        "timestamp": "2021-11-12T00:00:00Z"
      },
      "exp": "2022-11-12T00:00:00Z"
    },
    {
      "title": "plusTime - data types - throws if first parameter is a boolean (false)",
      "logic": {
        "plusTime": [
          false,
          1,
          "year"
        ]
      },
      "data": {
        "timestamp": "2021-11-12T00:00:00Z"
      },
      "throws": true
    },
    {
      "title": "plusTime - data types - throws if first parameter is a boolean (true)",
      "logic": {
        "plusTime": [
          true,
          1,
          "year"
        ]
      },
      "data": {
        "timestamp": "2021-11-12T00:00:00Z"
      },
      "throws": true
    },
    {
      "title": "plusTime - data types - throws if first parameter is a non-date string",
      "logic": {
        "plusTime": [
          "hello",
          1,
          "year"
        ]
      },
      "data": {
        "timestamp": "2021-11-12T00:00:00Z"
      },
      "throws": true
    },
    {
      "title": "plusTime - data types - throws if first parameter is a number",
      "logic": {
        "plusTime": [
          123,
          1,
          "year"
        ]
      },
      "data": {
        "timestamp": "2021-11-12T00:00:00Z"
      },
      "throws": true
    },
    {
      "title": "plusTime - data types - throws if first parameter is an array",
      "logic": {
        "plusTime": [
          [],
          1,
          "year"
        ]
      },
      "data": {
        "timestamp": "2021-11-12T00:00:00Z"
      },
      "throws": true
    },
    {
      "title": "plusTime - data types - throws if first parameter is an object",
      "logic": {
        "plusTime": [
          {},
          1,
          "year"
        ]
      },
      "data": {
        "timestamp": "2021-11-12T00:00:00Z"
      },
      "throws": true
    },
    {
      "title": "plusTime - data types - throws if first parameter is null",
      "logic": {
        "plusTime": [
          null,
          1,
          "year"
        ]
      },
      "data": {
        "timestamp": "2021-11-12T00:00:00Z"
      },
      "throws": true
    },
    {
      "title": "plusTime - data types - throws if second parameter is a boolean (false)",
      "logic": {
        "plusTime": [
          {
            "var": "timestamp"
          },
          false,
          "year"
        ]
      },
      "data": {
        "timestamp": "2021-11-12T00:00:00Z"
      },
      "throws": true
    },
    {
      "title": "plusTime - data types - throws if second parameter is a boolean (true)",
      "logic": {
        "plusTime": [
          {
            "var": "timestamp"
          },
          true,
          "year"
        ]
      },
      "data": {
        "timestamp": "2021-11-12T00:00:00Z"
      },
      "throws": true
    },
    {
      "title": "plusTime - data types - throws if second parameter is a string",
      "logic": {
        "plusTime": [
          {
            "var": "timestamp"
          },
          "1",
          "year"
        ]
      },
      "data": {
        "timestamp": "2021-11-12T00:00:00Z"
      },
      "throws": true
    },
    {
      "title": "plusTime - data types - throws if second parameter is an array",
      "logic": {
        "plusTime": [
          {
            "var": "timestamp"
          },
          [],
          "year"
        ]
      },
      "data": {
        "timestamp": "2021-11-12T00:00:00Z"
      },
      "throws": true
    },
    {
      "title": "plusTime - data types - throws if second parameter is an object",
      "logic": {
        "plusTime": [
          {
            "var": "timestamp"
          },
          {},
          "year"
        ]
      },
      "data": {
        "timestamp": "2021-11-12T00:00:00Z"
      },
      "throws": true
    },
    {
      "title": "plusTime - data types - throws if second parameter is null",
      "logic": {
        "plusTime": [
          {
            "var": "timestamp"
          },
          null,
          "year"
        ]
      },
      "data": {
        "timestamp": "2021-11-12T00:00:00Z"
      },
      "throws": true
    },
    {
      "title": "plusTime - data types - throws if third parameter is not a supported value",
      "logic": {
        "plusTime": [
          {
            "var": "timestamp"
          },
          1,
          "decade"
        ]
      },
      "data": {
        "timestamp": "2021-11-12T00:00:00Z"
      },
      "throws": true
    },
    {
      "title": "plusTime - treats strings in date format (without time information) as UTC",
      "logic": {
        "plusTime": [
          {
            "var": "timestamp"
          },
          1,
          "hour"
        ]
      },
      "data": {
        "timestamp": "2021-12-12"
      },
      "exp": "2021-12-12T01:00:00Z"
    },
    {
      "title": "push - adds an element to the end of an array",
      "logic": {
        "script": [
          {
            "push": [
              {
                "var": "arr"
              },
              {
                "var": "value"
              }
            ]
          },
          {
            "return": [
              {
                "var": "arr"
              }
            ]
          }
        ]
      },
      "data": {
        "arr": [
          1,
          2,
          3
        ],
        "value": 4
      },
      "exp": [
        1,
        2,
        3,
        4
      ]
    },
    {
      "title": "push - data types - if first parameter is a boolean (false), throws an exception",
      "logic": {
        "script": [
          {
            "push": [
              {
                "var": "arr"
              },
              {
                "var": "value"
              }
            ]
          },
          {
            "return": [
              {
                "var": "arr"
              }
            ]
          }
        ]
      },
      "data": {
        "arr": false,
        "value": 4
      },
      "throws": true
    },
    {
      "title": "push - data types - if first parameter is a boolean (true), throws an exception",
      "logic": {
        "script": [
          {
            "push": [
              {
                "var": "arr"
              },
              {
                "var": "value"
              }
            ]
          },
          {
            "return": [
              {
                "var": "arr"
              }
            ]
          }
        ]
      },
      "data": {
        "arr": true,
        "value": 4
      },
      "throws": true
    },
    {
      "title": "push - data types - if first parameter is a number, throws an exception",
      "logic": {
        "script": [
          {
            "push": [
              {
                "var": "arr"
              },
              {
                "var": "value"
              }
            ]
          },
          {
            "return": [
              {
                "var": "arr"
              }
            ]
          }
        ]
      },
      "data": {
        "arr": 4,
        "value": 4
      },
      "throws": true
    },
    {
      "title": "push - data types - if first parameter is a string, throws an exception",
      "logic": {
        "script": [
          {
            "push": [
              {
                "var": "arr"
              },
              {
                "var": "value"
              }
            ]
          },
          {
            "return": [
              {
                "var": "arr"
              }
            ]
          }
        ]
      },
      "data": {
        "arr": "hello",
        "value": 4
      },
      "throws": true
    },
    {
      "title": "push - data types - if first parameter is an object, throws an exception",
      "logic": {
        "script": [
          {
            "push": [
              {
                "var": "arr"
              },
              {
                "var": "value"
              }
            ]
          },
          {
            "return": [
              {
                "var": "arr"
              }
            ]
          }
        ]
      },
      "data": {
        "arr": {},
        "value": 4
      },
      "throws": true
    },
    {
      "title": "push - data types - if first parameter is null, throws an exception",
      "logic": {
        "script": [
          {
            "push": [
              {
                "var": "arr"
              },
              {
                "var": "value"
              }
            ]
          },
          {
            "return": [
              {
                "var": "arr"
              }
            ]
          }
        ]
      },
      "data": {
        "arr": null,
        "value": 4
      },
      "throws": true
    },
    {
      "title": "push - data types - if second parameter is a boolean (false), pushes the boolean",
      "logic": {
        "script": [
          {
            "push": [
              {
                "var": "arr"
              },
              {
                "var": "value"
              }
            ]
          },
          {
            "return": [
              {
                "var": "arr"
              }
            ]
          }
        ]
      },
      "data": {
        "arr": [],
        "value": false
      },
      "exp": [
        false
      ]
    },
    {
      "title": "push - data types - if second parameter is a boolean (true), pushes the boolean",
      "logic": {
        "script": [
          {
            "push": [
              {
                "var": "arr"
              },
              {
                "var": "value"
              }
            ]
          },
          {
            "return": [
              {
                "var": "arr"
              }
            ]
          }
        ]
      },
      "data": {
        "arr": [],
        "value": true
      },
      "exp": [
        true
      ]
    },
    {
      "title": "push - data types - if second parameter is a number, pushes the number",
      "logic": {
        "script": [
          {
            "push": [
              {
                "var": "arr"
              },
              {
                "var": "value"
              }
            ]
          },
          {
            "return": [
              {
                "var": "arr"
              }
            ]
          }
        ]
      },
      "data": {
        "arr": [],
        "value": 5
      },
      "exp": [
        5
      ]
    },
    {
      "title": "push - data types - if second parameter is a string, pushes the string",
      "logic": {
        "script": [
          {
            "push": [
              {
                "var": "arr"
              },
              {
                "var": "value"
              }
            ]
          },
          {
            "return": [
              {
                "var": "arr"
              }
            ]
          }
        ]
      },
      "data": {
        "arr": [],
        "value": "hello"
      },
      "exp": [
        "hello"
      ]
    },
    {
      "title": "push - data types - if second parameter is an array, pushes the array",
      "logic": {
        "script": [
          {
            "push": [
              {
                "var": "arr"
              },
              {
                "var": "value"
              }
            ]
          },
          {
            "return": [
              {
                "var": "arr"
              }
            ]
          }
        ]
      },
      "data": {
        "arr": [],
        "value": [
          1,
          2,
          3
        ]
      },
      "exp": [
        [
          1,
          2,
          3
        ]
      ]
    },
    {
      "title": "push - data types - if second parameter is an object, pushes the object",
      "logic": {
        "script": [
          {
            "push": [
              {
                "var": "arr"
              },
              {
                "var": "value"
              }
            ]
          },
          {
            "return": [
              {
                "var": "arr"
              }
            ]
          }
        ]
      },
      "data": {
        "arr": [],
        "value": {
          "hello": "world"
        }
      },
      "exp": [
        {
          "hello": "world"
        }
      ]
    },
    {
      "title": "push - data types - if second parameter is null, pushes null",
      "logic": {
        "script": [
          {
            "push": [
              {
                "var": "arr"
              },
              {
                "var": "value"
              }
            ]
          },
          {
            "return": [
              {
                "var": "arr"
              }
            ]
          }
        ]
      },
      "data": {
        "arr": [],
        "value": null
      },
      "exp": [
        null
      ]
    },
    {
      "title": "push - supports adding multiple elements",
      "logic": {
        "script": [
          {
            "push": [
              {
                "var": "arr"
              },
              {
                "var": "value"
              },
              {
                "var": "value2"
              },
              6,
              7,
              8
            ]
          },
          {
            "return": [
              {
                "var": "arr"
              }
            ]
          }
        ]
      },
      "data": {
        "arr": [
          1,
          2,
          3
        ],
        "value": 4,
        "value2": 5
      },
      "exp": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8
      ]
    },
    {
      "title": "push - supports different data types in the same array",
      "logic": {
        "script": [
          {
            "push": [
              {
                "var": "arr"
              },
              "hello",
              1,
              true,
              false,
              [
                1,
                2,
                3
              ],
              {
                "var": "obj"
              },
              null
            ]
          },
          {
            "return": [
              {
                "var": "arr"
              }
            ]
          }
        ]
      },
      "data": {
        "arr": [],
        "obj": {
          "hello": "world"
        }
      },
      "exp": [
        "hello",
        1,
        true,
        false,
        [
          1,
          2,
          3
        ],
        {
          "hello": "world"
        },
        null
      ]
    },
    {
      "title": "reduce - allows to access the index of the element in the closure",
      "logic": {
        "reduce": [
          {
            "var": "elements"
          },
          {
            "+": [
              {
                "var": "__index__"
              },
              {
                "var": "accumulator"
              }
            ]
          },
          5
        ]
      },
      "data": {
        "elements": [
          {
            "num": 3
          },
          {
            "num": 4
          },
          {
            "num": 5
          }
        ]
      },
      "exp": 8
    },
    {
      "title": "reduce - allows to set the initial value from a variable",
      "logic": {
        "reduce": [
          {
            "var": "elements"
          },
          {
            "+": [
              {
                "var": "current.num"
              },
              {
                "var": "accumulator"
              }
            ]
          },
          {
            "var": "initial"
          }
        ]
      },
      "data": {
        "elements": [
          {
            "num": 3
          },
          {
            "num": 4
          },
          {
            "num": 5
          }
        ],
        "initial": 5
      },
      "exp": 17
    },
    {
      "title": "reduce - allows to specify the variable name for the current value and to access the outer context",
      "logic": {
        "reduce": [
          {
            "var": "elements"
          },
          {
            "+": [
              {
                "var": "current.num"
              },
              {
                "var": "accumulator"
              },
              {
                "var": "offset"
              }
            ]
          },
          5
        ]
      },
      "data": {
        "elements": [
          {
            "num": 3
          },
          {
            "num": 4
          },
          {
            "num": 5
          }
        ],
        "offset": 3
      },
      "exp": 26
    },
    {
      "title": "reduce - data types - if first parameter is a boolean (false), returns the initial value",
      "logic": {
        "reduce": [
          {
            "var": "elements"
          },
          {
            "var": "current"
          },
          "initialValue"
        ]
      },
      "data": {
        "elements": false
      },
      "exp": "initialValue"
    },
    {
      "title": "reduce - data types - if first parameter is a boolean (true), returns the initial value",
      "logic": {
        "reduce": [
          {
            "var": "elements"
          },
          {
            "var": "current"
          },
          "initialValue"
        ]
      },
      "data": {
        "elements": true
      },
      "exp": "initialValue"
    },
    {
      "title": "reduce - data types - if first parameter is a number, returns the initial value",
      "logic": {
        "reduce": [
          {
            "var": "elements"
          },
          {
            "var": "current"
          },
          "initialValue"
        ]
      },
      "data": {
        "elements": 5
      },
      "exp": "initialValue"
    },
    {
      "title": "reduce - data types - if first parameter is a string, returns the initial value",
      "logic": {
        "reduce": [
          {
            "var": "elements"
          },
          {
            "var": "current"
          },
          "initialValue"
        ]
      },
      "data": {
        "elements": "not-an-array"
      },
      "exp": "initialValue"
    },
    {
      "title": "reduce - data types - if first parameter is an object, returns the initial value",
      "logic": {
        "reduce": [
          {
            "var": "elements"
          },
          {
            "var": "current"
          },
          "initialValue"
        ]
      },
      "data": {
        "elements": {}
      },
      "exp": "initialValue"
    },
    {
      "title": "reduce - data types - if first parameter is null, returns the initial value",
      "logic": {
        "reduce": [
          {
            "var": "elements"
          },
          {
            "var": "current"
          },
          "initialValue"
        ]
      },
      "data": {
        "elements": null
      },
      "exp": "initialValue"
    },
    {
      "title": "reduce - reduces an array to a single value",
      "logic": {
        "reduce": [
          {
            "var": "elements"
          },
          {
            "+": [
              {
                "var": "current.num"
              },
              {
                "var": "accumulator"
              }
            ]
          },
          5
        ]
      },
      "data": {
        "elements": [
          {
            "num": 3
          },
          {
            "num": 4
          },
          {
            "num": 5
          }
        ]
      },
      "exp": 17
    },
    {
      "title": "replaceAll - data types - if first parameter is a boolean (false), treats it as a string",
      "logic": {
        "replaceAll": [
          {
            "var": "greeting"
          },
          {
            "var": "oldName"
          },
          {
            "var": "newName"
          }
        ]
      },
      "data": {
        "greeting": false,
        "oldName": "a",
        "newName": "A"
      },
      "exp": "fAlse"
    },
    {
      "title": "replaceAll - data types - if first parameter is a boolean (true), treats it as a string",
      "logic": {
        "replaceAll": [
          {
            "var": "greeting"
          },
          {
            "var": "oldName"
          },
          {
            "var": "newName"
          }
        ]
      },
      "data": {
        "greeting": true,
        "oldName": "u",
        "newName": "U"
      },
      "exp": "trUe"
    },
    {
      "title": "replaceAll - data types - if first parameter is a number (float), treats it as a string",
      "logic": {
        "replaceAll": [
          {
            "var": "greeting"
          },
          {
            "var": "oldName"
          },
          {
            "var": "newName"
          }
        ]
      },
      "data": {
        "greeting": 4.56,
        "oldName": "5",
        "newName": "jane"
      },
      "exp": "4.jane6"
    },
    {
      "title": "replaceAll - data types - if first parameter is a number (integer), treats it as a string",
      "logic": {
        "replaceAll": [
          {
            "var": "greeting"
          },
          {
            "var": "oldName"
          },
          {
            "var": "newName"
          }
        ]
      },
      "data": {
        "greeting": 456,
        "oldName": "5",
        "newName": "jane"
      },
      "exp": "4jane6"
    },
    {
      "title": "replaceAll - data types - if first parameter is an array, returns an empty string",
      "logic": {
        "replaceAll": [
          {
            "var": "greeting"
          },
          {
            "var": "oldName"
          },
          {
            "var": "newName"
          }
        ]
      },
      "data": {
        "greeting": [
          "a",
          "b"
        ],
        "oldName": "a",
        "newName": "A"
      },
      "exp": ""
    },
    {
      "title": "replaceAll - data types - if first parameter is an object, returns an empty string",
      "logic": {
        "replaceAll": [
          {
            "var": "greeting"
          },
          {
            "var": "oldName"
          },
          {
            "var": "newName"
          }
        ]
      },
      "data": {
        "greeting": {
          "a": "a"
        },
        "oldName": "a",
        "newName": "A"
      },
      "exp": ""
    },
    {
      "title": "replaceAll - data types - if first parameter is null, returns an empty string",
      "logic": {
        "replaceAll": [
          {
            "var": "greeting"
          },
          {
            "var": "oldName"
          },
          {
            "var": "newName"
          }
        ]
      },
      "data": {
        "greeting": null,
        "oldName": "u",
        "newName": "U"
      },
      "exp": ""
    },
    {
      "title": "replaceAll - data types - if second parameter is a boolean (false), treats it as a string",
      "logic": {
        "replaceAll": [
          {
            "var": "greeting"
          },
          {
            "var": "oldName"
          },
          {
            "var": "newName"
          }
        ]
      },
      "data": {
        "greeting": "4false6",
        "oldName": false,
        "newName": "jane"
      },
      "exp": "4jane6"
    },
    {
      "title": "replaceAll - data types - if second parameter is a boolean (true), treats it as a string",
      "logic": {
        "replaceAll": [
          {
            "var": "greeting"
          },
          {
            "var": "oldName"
          },
          {
            "var": "newName"
          }
        ]
      },
      "data": {
        "greeting": "4true6",
        "oldName": true,
        "newName": "jane"
      },
      "exp": "4jane6"
    },
    {
      "title": "replaceAll - data types - if second parameter is a number (float), treats it as a string",
      "logic": {
        "replaceAll": [
          {
            "var": "greeting"
          },
          {
            "var": "oldName"
          },
          {
            "var": "newName"
          }
        ]
      },
      "data": {
        "greeting": "45.556",
        "oldName": 5.55,
        "newName": "jane"
      },
      "exp": "4jane6"
    },
    {
      "title": "replaceAll - data types - if second parameter is a number (integer), treats it as a string",
      "logic": {
        "replaceAll": [
          {
            "var": "greeting"
          },
          {
            "var": "oldName"
          },
          {
            "var": "newName"
          }
        ]
      },
      "data": {
        "greeting": "456",
        "oldName": 5,
        "newName": "jane"
      },
      "exp": "4jane6"
    },
    {
      "title": "replaceAll - data types - if second parameter is an array, returns the original string",
      "logic": {
        "replaceAll": [
          {
            "var": "greeting"
          },
          {
            "var": "oldName"
          },
          {
            "var": "newName"
          }
        ]
      },
      "data": {
        "greeting": "456",
        "oldName": [
          "5",
          "6"
        ],
        "newName": "jane"
      },
      "exp": "456"
    },
    {
      "title": "replaceAll - data types - if second parameter is an object, returns the original string",
      "logic": {
        "replaceAll": [
          {
            "var": "greeting"
          },
          {
            "var": "oldName"
          },
          {
            "var": "newName"
          }
        ]
      },
      "data": {
        "greeting": "456",
        "oldName": {},
        "newName": "jane"
      },
      "exp": "456"
    },
    {
      "title": "replaceAll - data types - if second parameter is null, returns the original string",
      "logic": {
        "replaceAll": [
          {
            "var": "greeting"
          },
          {
            "var": "oldName"
          },
          {
            "var": "newName"
          }
        ]
      },
      "data": {
        "greeting": "456",
        "oldName": null,
        "newName": "jane"
      },
      "exp": "456"
    },
    {
      "title": "replaceAll - data types - if third parameter is a boolean (false), treats it as a string",
      "logic": {
        "replaceAll": [
          {
            "var": "greeting"
          },
          {
            "var": "oldName"
          },
          {
            "var": "newName"
          }
        ]
      },
      "data": {
        "greeting": "456",
        "oldName": "5",
        "newName": false
      },
      "exp": "4false6"
    },
    {
      "title": "replaceAll - data types - if third parameter is a boolean (true), treats it as a string",
      "logic": {
        "replaceAll": [
          {
            "var": "greeting"
          },
          {
            "var": "oldName"
          },
          {
            "var": "newName"
          }
        ]
      },
      "data": {
        "greeting": "456",
        "oldName": "5",
        "newName": true
      },
      "exp": "4true6"
    },
    {
      "title": "replaceAll - data types - if third parameter is a number (float), treats it as a string",
      "logic": {
        "replaceAll": [
          {
            "var": "greeting"
          },
          {
            "var": "oldName"
          },
          {
            "var": "newName"
          }
        ]
      },
      "data": {
        "greeting": "456",
        "oldName": "5",
        "newName": 5.55
      },
      "exp": "45.556"
    },
    {
      "title": "replaceAll - data types - if third parameter is a number (integer), treats it as a string",
      "logic": {
        "replaceAll": [
          {
            "var": "greeting"
          },
          {
            "var": "oldName"
          },
          {
            "var": "newName"
          }
        ]
      },
      "data": {
        "greeting": "456",
        "oldName": "5",
        "newName": 6
      },
      "exp": "466"
    },
    {
      "title": "replaceAll - data types - if third parameter is an array, returns the original string",
      "logic": {
        "replaceAll": [
          {
            "var": "greeting"
          },
          {
            "var": "oldName"
          },
          {
            "var": "newName"
          }
        ]
      },
      "data": {
        "greeting": "456",
        "oldName": "5",
        "newName": [
          "5",
          "6"
        ]
      },
      "exp": "456"
    },
    {
      "title": "replaceAll - data types - if third parameter is an object, returns the original string",
      "logic": {
        "replaceAll": [
          {
            "var": "greeting"
          },
          {
            "var": "oldName"
          },
          {
            "var": "newName"
          }
        ]
      },
      "data": {
        "greeting": "456",
        "oldName": "5",
        "newName": {}
      },
      "exp": "456"
    },
    {
      "title": "replaceAll - data types - if third parameter is null, returns the original string",
      "logic": {
        "replaceAll": [
          {
            "var": "greeting"
          },
          {
            "var": "oldName"
          },
          {
            "var": "newName"
          }
        ]
      },
      "data": {
        "greeting": "456",
        "oldName": "5",
        "newName": null
      },
      "exp": "456"
    },
    {
      "title": "replaceAll - handles regexp special characters",
      "logic": {
        "replaceAll": [
          {
            "var": "greeting"
          },
          {
            "var": "oldName"
          },
          {
            "var": "newName"
          }
        ]
      },
      "data": {
        "greeting": "hello. john. doe",
        "oldName": ".",
        "newName": "jane"
      },
      "exp": "hellojane johnjane doe"
    },
    {
      "title": "replaceAll - replaces all occurrences of a given substring with a new value",
      "logic": {
        "replaceAll": [
          {
            "var": "greeting"
          },
          {
            "var": "oldName"
          },
          {
            "var": "newName"
          }
        ]
      },
      "data": {
        "greeting": "hello john john doe",
        "oldName": "john",
        "newName": "jane"
      },
      "exp": "hello jane jane doe"
    },
    {
      "title": "replaceAll - returns the unmodified string if there is no match",
      "logic": {
        "replaceAll": [
          {
            "var": "greeting"
          },
          {
            "var": "oldName"
          },
          {
            "var": "newName"
          }
        ]
      },
      "data": {
        "greeting": "hello john john doe",
        "oldName": "daniel",
        "newName": "jane"
      },
      "exp": "hello john john doe"
    },
    {
      "title": "return - can be used in a script",
      "logic": {
        "script": [
          {
            "return": [
              "hello"
            ]
          }
        ]
      },
      "data": {},
      "exp": "hello"
    },
    {
      "title": "return - can return a boolean (false)",
      "logic": {
        "script": [
          {
            "return": [
              false
            ]
          }
        ]
      },
      "data": {},
      "exp": false
    },
    {
      "title": "return - can return a boolean (true)",
      "logic": {
        "script": [
          {
            "return": [
              true
            ]
          }
        ]
      },
      "data": {},
      "exp": true
    },
    {
      "title": "return - can return a number (float)",
      "logic": {
        "script": [
          {
            "return": [
              5.5
            ]
          }
        ]
      },
      "data": {},
      "exp": 5.5
    },
    {
      "title": "return - can return a number (integer)",
      "logic": {
        "script": [
          {
            "return": [
              5
            ]
          }
        ]
      },
      "data": {},
      "exp": 5
    },
    {
      "title": "return - can return a string",
      "logic": {
        "script": [
          {
            "return": [
              "hello"
            ]
          }
        ]
      },
      "data": {},
      "exp": "hello"
    },
    {
      "title": "return - can return null",
      "logic": {
        "script": [
          {
            "return": [
              null
            ]
          }
        ]
      },
      "data": {},
      "exp": null
    },
    {
      "title": "return - evaluates a var statement",
      "logic": {
        "script": [
          {
            "return": [
              {
                "var": "greeting"
              }
            ]
          }
        ]
      },
      "data": {
        "greeting": "hello"
      },
      "exp": "hello"
    },
    {
      "title": "script - is a supported operation",
      "logic": {
        "script": []
      },
      "data": {},
      "exp": null
    },
    {
      "title": "some - allows to specify the variable name for the current value and to access the outer context",
      "logic": {
        "some": [
          {
            "var": "elements"
          },
          {
            "and": [
              {
                "var": "it"
              },
              {
                "var": "outer"
              }
            ]
          },
          "it"
        ]
      },
      "data": {
        "elements": [
          false,
          0,
          "",
          true
        ],
        "outer": true
      },
      "exp": true
    },
    {
      "title": "some - data types - if first parameter is a boolean (false), returns false",
      "logic": {
        "some": [
          {
            "var": "elements"
          },
          {
            "var": ""
          }
        ]
      },
      "data": {
        "elements": false
      },
      "exp": false
    },
    {
      "title": "some - data types - if first parameter is a boolean (true), returns false",
      "logic": {
        "some": [
          {
            "var": "elements"
          },
          {
            "var": ""
          }
        ]
      },
      "data": {
        "elements": true
      },
      "exp": false
    },
    {
      "title": "some - data types - if first parameter is a number, returns false",
      "logic": {
        "some": [
          {
            "var": "elements"
          },
          {
            "var": ""
          }
        ]
      },
      "data": {
        "elements": 5
      },
      "exp": false
    },
    {
      "title": "some - data types - if first parameter is a string, returns false",
      "logic": {
        "some": [
          {
            "var": "elements"
          },
          {
            "var": ""
          }
        ]
      },
      "data": {
        "elements": "not-an-array"
      },
      "exp": false
    },
    {
      "title": "some - data types - if first parameter is an object, returns false",
      "logic": {
        "some": [
          {
            "var": "elements"
          },
          {
            "var": ""
          }
        ]
      },
      "data": {
        "elements": {}
      },
      "exp": false
    },
    {
      "title": "some - data types - if first parameter is null, returns false",
      "logic": {
        "some": [
          {
            "var": "elements"
          },
          {
            "var": ""
          }
        ]
      },
      "data": {
        "elements": null
      },
      "exp": false
    },
    {
      "title": "some - returns false if the closure returns falsy for for all elements (negative test)",
      "logic": {
        "some": [
          {
            "var": "elements"
          },
          {
            "var": ""
          }
        ]
      },
      "data": {
        "elements": [
          false,
          0,
          ""
        ]
      },
      "exp": false
    },
    {
      "title": "some - returns true if the closure returns truthy for at least one element (positive test)",
      "logic": {
        "some": [
          {
            "var": "elements"
          },
          {
            "var": ""
          }
        ]
      },
      "data": {
        "elements": [
          false,
          0,
          "",
          true
        ]
      },
      "exp": true
    },
    {
      "title": "split - data types - if first parameter is a boolean (false), treats it as a string",
      "logic": {
        "split": [
          {
            "var": "greetings"
          },
          {
            "var": "separator"
          }
        ]
      },
      "data": {
        "greetings": false,
        "separator": "l"
      },
      "exp": [
        "fa",
        "se"
      ]
    },
    {
      "title": "split - data types - if first parameter is a boolean (true), treats it as a string",
      "logic": {
        "split": [
          {
            "var": "greetings"
          },
          {
            "var": "separator"
          }
        ]
      },
      "data": {
        "greetings": true,
        "separator": "u"
      },
      "exp": [
        "tr",
        "e"
      ]
    },
    {
      "title": "split - data types - if first parameter is a number (float), treats it as a string",
      "logic": {
        "split": [
          {
            "var": "greetings"
          },
          {
            "var": "separator"
          }
        ]
      },
      "data": {
        "greetings": 5.55,
        "separator": "."
      },
      "exp": [
        "5",
        "55"
      ]
    },
    {
      "title": "split - data types - if first parameter is a number (integer), treats it as a string",
      "logic": {
        "split": [
          {
            "var": "greetings"
          },
          {
            "var": "separator"
          }
        ]
      },
      "data": {
        "greetings": 55,
        "separator": ""
      },
      "exp": [
        "5",
        "5"
      ]
    },
    {
      "title": "split - data types - if first parameter is an array, returns an empty array",
      "logic": {
        "split": [
          {
            "var": "greetings"
          },
          {
            "var": "separator"
          }
        ]
      },
      "data": {
        "greetings": [],
        "separator": ""
      },
      "exp": []
    },
    {
      "title": "split - data types - if first parameter is an object, returns an empty array",
      "logic": {
        "split": [
          {
            "var": "greetings"
          },
          {
            "var": "separator"
          }
        ]
      },
      "data": {
        "greetings": {},
        "separator": ""
      },
      "exp": []
    },
    {
      "title": "split - data types - if first parameter is null returns an empty array",
      "logic": {
        "split": [
          {
            "var": "greetings"
          },
          {
            "var": "separator"
          }
        ]
      },
      "data": {
        "greetings": null,
        "separator": ""
      },
      "exp": []
    },
    {
      "title": "split - data types - if second parameter is a boolean (false), treats it as a string",
      "logic": {
        "split": [
          {
            "var": "greetings"
          },
          {
            "var": "separator"
          }
        ]
      },
      "data": {
        "greetings": "helfalselo",
        "separator": false
      },
      "exp": [
        "hel",
        "lo"
      ]
    },
    {
      "title": "split - data types - if second parameter is a boolean (true), treats it as a string",
      "logic": {
        "split": [
          {
            "var": "greetings"
          },
          {
            "var": "separator"
          }
        ]
      },
      "data": {
        "greetings": "heltruelo",
        "separator": true
      },
      "exp": [
        "hel",
        "lo"
      ]
    },
    {
      "title": "split - data types - if second parameter is a number (float), treats it as a string",
      "logic": {
        "split": [
          {
            "var": "greetings"
          },
          {
            "var": "separator"
          }
        ]
      },
      "data": {
        "greetings": "hel5.55lo",
        "separator": 5.55
      },
      "exp": [
        "hel",
        "lo"
      ]
    },
    {
      "title": "split - data types - if second parameter is a number (integer), treats it as a string",
      "logic": {
        "split": [
          {
            "var": "greetings"
          },
          {
            "var": "separator"
          }
        ]
      },
      "data": {
        "greetings": "hel5lo",
        "separator": 5
      },
      "exp": [
        "hel",
        "lo"
      ]
    },
    {
      "title": "split - data types - if second parameter is an array, returns the string in an array",
      "logic": {
        "split": [
          {
            "var": "greetings"
          },
          {
            "var": "separator"
          }
        ]
      },
      "data": {
        "greetings": "hello",
        "separator": []
      },
      "exp": [
        "hello"
      ]
    },
    {
      "title": "split - data types - if second parameter is an object, returns the string in an array",
      "logic": {
        "split": [
          {
            "var": "greetings"
          },
          {
            "var": "separator"
          }
        ]
      },
      "data": {
        "greetings": "hel[object Object]lo",
        "separator": {}
      },
      "exp": [
        "hel[object Object]lo"
      ]
    },
    {
      "title": "split - data types - if second parameter is null, returns the string in an array",
      "logic": {
        "split": [
          {
            "var": "greetings"
          },
          {
            "var": "separator"
          }
        ]
      },
      "data": {
        "greetings": "helnulllo",
        "separator": null
      },
      "exp": [
        "helnulllo"
      ]
    },
    {
      "title": "split - returns the string in an array if the separator is not present",
      "logic": {
        "split": [
          {
            "var": "greetings"
          },
          {
            "var": "separator"
          }
        ]
      },
      "data": {
        "greetings": "hello",
        "separator": ","
      },
      "exp": [
        "hello"
      ]
    },
    {
      "title": "split - splits the string by each character if the separator is an empty string",
      "logic": {
        "split": [
          {
            "var": "greetings"
          },
          {
            "var": "separator"
          }
        ]
      },
      "data": {
        "greetings": "hel lo",
        "separator": ""
      },
      "exp": [
        "h",
        "e",
        "l",
        " ",
        "l",
        "o"
      ]
    },
    {
      "title": "split - splits the string into an array based on the given character",
      "logic": {
        "split": [
          {
            "var": "greetings"
          },
          {
            "var": "separator"
          }
        ]
      },
      "data": {
        "greetings": "hel-lo,hola,hello",
        "separator": ","
      },
      "exp": [
        "hel-lo",
        "hola",
        "hello"
      ]
    },
    {
      "title": "test case 0 - true - {} - true",
      "logic": true,
      "data": {},
      "exp": true
    },
    {
      "title": "test case 1 - false - {} - false",
      "logic": false,
      "data": {},
      "exp": false
    },
    {
      "title": "test case 10 - {\"===\":[1,1]} - {} - true",
      "logic": {
        "===": [
          1,
          1
        ]
      },
      "data": {},
      "exp": true
    },
    {
      "title": "test case 100 - {\"-\":[3,2]} - {} - 1",
      "logic": {
        "-": [
          3,
          2
        ]
      },
      "data": {},
      "exp": 1
    },
    {
      "title": "test case 101 - {\"-\":[3]} - {} - -3",
      "logic": {
        "-": [
          3
        ]
      },
      "data": {},
      "exp": -3
    },
    {
      "title": "test case 102 - {\"-\":[\"1\",1]} - {} - 0",
      "logic": {
        "-": [
          "1",
          1
        ]
      },
      "data": {},
      "exp": 0
    },
    {
      "title": "test case 103 - {\"/\":[4,2]} - {} - 2",
      "logic": {
        "/": [
          4,
          2
        ]
      },
      "data": {},
      "exp": 2
    },
    {
      "title": "test case 104 - {\"/\":[2,4]} - {} - 0.5",
      "logic": {
        "/": [
          2,
          4
        ]
      },
      "data": {},
      "exp": 0.5
    },
    {
      "title": "test case 105 - {\"/\":[\"1\",1]} - {} - 1",
      "logic": {
        "/": [
          "1",
          1
        ]
      },
      "data": {},
      "exp": 1
    },
    {
      "title": "test case 106 - {\"substr\":[\"jsonlogic\",4]} - null - \"logic\"",
      "logic": {
        "substr": [
          "jsonlogic",
          4
        ]
      },
      "data": null,
      "exp": "logic"
    },
    {
      "title": "test case 107 - {\"substr\":[\"jsonlogic\",-5]} - null - \"logic\"",
      "logic": {
        "substr": [
          "jsonlogic",
          -5
        ]
      },
      "data": null,
      "exp": "logic"
    },
    {
      "title": "test case 108 - {\"substr\":[\"jsonlogic\",0,1]} - null - \"j\"",
      "logic": {
        "substr": [
          "jsonlogic",
          0,
          1
        ]
      },
      "data": null,
      "exp": "j"
    },
    {
      "title": "test case 109 - {\"substr\":[\"jsonlogic\",-1,1]} - null - \"c\"",
      "logic": {
        "substr": [
          "jsonlogic",
          -1,
          1
        ]
      },
      "data": null,
      "exp": "c"
    },
    {
      "title": "test case 11 - {\"===\":[1,\"1\"]} - {} - false",
      "logic": {
        "===": [
          1,
          "1"
        ]
      },
      "data": {},
      "exp": false
    },
    {
      "title": "test case 110 - {\"substr\":[\"jsonlogic\",4,5]} - null - \"logic\"",
      "logic": {
        "substr": [
          "jsonlogic",
          4,
          5
        ]
      },
      "data": null,
      "exp": "logic"
    },
    {
      "title": "test case 111 - {\"substr\":[\"jsonlogic\",-5,5]} - null - \"logic\"",
      "logic": {
        "substr": [
          "jsonlogic",
          -5,
          5
        ]
      },
      "data": null,
      "exp": "logic"
    },
    {
      "title": "test case 112 - {\"substr\":[\"jsonlogic\",-5,-2]} - null - \"log\"",
      "logic": {
        "substr": [
          "jsonlogic",
          -5,
          -2
        ]
      },
      "data": null,
      "exp": "log"
    },
    {
      "title": "test case 113 - {\"substr\":[\"jsonlogic\",1,-5]} - null - \"son\"",
      "logic": {
        "substr": [
          "jsonlogic",
          1,
          -5
        ]
      },
      "data": null,
      "exp": "son"
    },
    {
      "title": "test case 114 - {\"merge\":[]} - null - []",
      "logic": {
        "merge": []
      },
      "data": null,
      "exp": []
    },
    {
      "title": "test case 115 - {\"merge\":[[1]]} - null - [1]",
      "logic": {
        "merge": [
          [
            1
          ]
        ]
      },
      "data": null,
      "exp": [
        1
      ]
    },
    {
      "title": "test case 116 - {\"merge\":[[1],[]]} - null - [1]",
      "logic": {
        "merge": [
          [
            1
          ],
          []
        ]
      },
      "data": null,
      "exp": [
        1
      ]
    },
    {
      "title": "test case 117 - {\"merge\":[[1],[2]]} - null - [1,2]",
      "logic": {
        "merge": [
          [
            1
          ],
          [
            2
          ]
        ]
      },
      "data": null,
      "exp": [
        1,
        2
      ]
    },
    {
      "title": "test case 118 - {\"merge\":[[1],[2],[3]]} - null - [1,2,3]",
      "logic": {
        "merge": [
          [
            1
          ],
          [
            2
          ],
          [
            3
          ]
        ]
      },
      "data": null,
      "exp": [
        1,
        2,
        3
      ]
    },
    {
      "title": "test case 119 - {\"merge\":[[1,2],[3]]} - null - [1,2,3]",
      "logic": {
        "merge": [
          [
            1,
            2
          ],
          [
            3
          ]
        ]
      },
      "data": null,
      "exp": [
        1,
        2,
        3
      ]
    },
    {
      "title": "test case 12 - {\"===\":[1,2]} - {} - false",
      "logic": {
        "===": [
          1,
          2
        ]
      },
      "data": {},
      "exp": false
    },
    {
      "title": "test case 120 - {\"merge\":[[1],[2,3]]} - null - [1,2,3]",
      "logic": {
        "merge": [
          [
            1
          ],
          [
            2,
            3
          ]
        ]
      },
      "data": null,
      "exp": [
        1,
        2,
        3
      ]
    },
    {
      "title": "test case 121 - {\"merge\":1} - null - [1]",
      "logic": {
        "merge": 1
      },
      "data": null,
      "exp": [
        1
      ]
    },
    {
      "title": "test case 122 - {\"merge\":[1,2]} - null - [1,2]",
      "logic": {
        "merge": [
          1,
          2
        ]
      },
      "data": null,
      "exp": [
        1,
        2
      ]
    },
    {
      "title": "test case 123 - {\"merge\":[1,[2]]} - null - [1,2]",
      "logic": {
        "merge": [
          1,
          [
            2
          ]
        ]
      },
      "data": null,
      "exp": [
        1,
        2
      ]
    },
    {
      "title": "test case 124 - {\"if\":[]} - null - null",
      "logic": {
        "if": []
      },
      "data": null,
      "exp": null
    },
    {
      "title": "test case 125 - {\"if\":[true]} - null - true",
      "logic": {
        "if": [
          true
        ]
      },
      "data": null,
      "exp": true
    },
    {
      "title": "test case 126 - {\"if\":[false]} - null - false",
      "logic": {
        "if": [
          false
        ]
      },
      "data": null,
      "exp": false
    },
    {
      "title": "test case 127 - {\"if\":[\"apple\"]} - null - \"apple\"",
      "logic": {
        "if": [
          "apple"
        ]
      },
      "data": null,
      "exp": "apple"
    },
    {
      "title": "test case 128 - {\"if\":[true,\"apple\"]} - null - \"apple\"",
      "logic": {
        "if": [
          true,
          "apple"
        ]
      },
      "data": null,
      "exp": "apple"
    },
    {
      "title": "test case 129 - {\"if\":[false,\"apple\"]} - null - null",
      "logic": {
        "if": [
          false,
          "apple"
        ]
      },
      "data": null,
      "exp": null
    },
    {
      "title": "test case 13 - {\"!=\":[1,2]} - {} - true",
      "logic": {
        "!=": [
          1,
          2
        ]
      },
      "data": {},
      "exp": true
    },
    {
      "title": "test case 130 - {\"if\":[true,\"apple\",\"banana\"]} - null - \"apple\"",
      "logic": {
        "if": [
          true,
          "apple",
          "banana"
        ]
      },
      "data": null,
      "exp": "apple"
    },
    {
      "title": "test case 131 - {\"if\":[false,\"apple\",\"banana\"]} - null - \"banana\"",
      "logic": {
        "if": [
          false,
          "apple",
          "banana"
        ]
      },
      "data": null,
      "exp": "banana"
    },
    {
      "title": "test case 132 - {\"if\":[[],\"apple\",\"banana\"]} - null - \"banana\"",
      "logic": {
        "if": [
          [],
          "apple",
          "banana"
        ]
      },
      "data": null,
      "exp": "banana"
    },
    {
      "title": "test case 133 - {\"if\":[[1],\"apple\",\"banana\"]} - null - \"apple\"",
      "logic": {
        "if": [
          [
            1
          ],
          "apple",
          "banana"
        ]
      },
      "data": null,
      "exp": "apple"
    },
    {
      "title": "test case 134 - {\"if\":[[1,2,3,4],\"apple\",\"banana\"]} - null - \"apple\"",
      "logic": {
        "if": [
          [
            1,
            2,
            3,
            4
          ],
          "apple",
          "banana"
        ]
      },
      "data": null,
      "exp": "apple"
    },
    {
      "title": "test case 135 - {\"if\":[\"\",\"apple\",\"banana\"]} - null - \"banana\"",
      "logic": {
        "if": [
          "",
          "apple",
          "banana"
        ]
      },
      "data": null,
      "exp": "banana"
    },
    {
      "title": "test case 136 - {\"if\":[\"zucchini\",\"apple\",\"banana\"]} - null - \"apple\"",
      "logic": {
        "if": [
          "zucchini",
          "apple",
          "banana"
        ]
      },
      "data": null,
      "exp": "apple"
    },
    {
      "title": "test case 137 - {\"if\":[\"0\",\"apple\",\"banana\"]} - null - \"apple\"",
      "logic": {
        "if": [
          "0",
          "apple",
          "banana"
        ]
      },
      "data": null,
      "exp": "apple"
    },
    {
      "title": "test case 138 - {\"===\":[0,\"0\"]} - null - false",
      "logic": {
        "===": [
          0,
          "0"
        ]
      },
      "data": null,
      "exp": false
    },
    {
      "title": "test case 139 - {\"===\":[0,{\"+\":\"0\"}]} - null - true",
      "logic": {
        "===": [
          0,
          {
            "+": "0"
          }
        ]
      },
      "data": null,
      "exp": true
    },
    {
      "title": "test case 14 - {\"!=\":[1,1]} - {} - false",
      "logic": {
        "!=": [
          1,
          1
        ]
      },
      "data": {},
      "exp": false
    },
    {
      "title": "test case 140 - {\"if\":[{\"+\":\"0\"},\"apple\",\"banana\"]} - null - \"banana\"",
      "logic": {
        "if": [
          {
            "+": "0"
          },
          "apple",
          "banana"
        ]
      },
      "data": null,
      "exp": "banana"
    },
    {
      "title": "test case 141 - {\"if\":[{\"+\":\"1\"},\"apple\",\"banana\"]} - null - \"apple\"",
      "logic": {
        "if": [
          {
            "+": "1"
          },
          "apple",
          "banana"
        ]
      },
      "data": null,
      "exp": "apple"
    },
    {
      "title": "test case 142 - {\"if\":[0,\"apple\",\"banana\"]} - null - \"banana\"",
      "logic": {
        "if": [
          0,
          "apple",
          "banana"
        ]
      },
      "data": null,
      "exp": "banana"
    },
    {
      "title": "test case 143 - {\"if\":[1,\"apple\",\"banana\"]} - null - \"apple\"",
      "logic": {
        "if": [
          1,
          "apple",
          "banana"
        ]
      },
      "data": null,
      "exp": "apple"
    },
    {
      "title": "test case 144 - {\"if\":[3.1416,\"apple\",\"banana\"]} - null - \"apple\"",
      "logic": {
        "if": [
          3.1416,
          "apple",
          "banana"
        ]
      },
      "data": null,
      "exp": "apple"
    },
    {
      "title": "test case 145 - {\"if\":[-1,\"apple\",\"banana\"]} - null - \"apple\"",
      "logic": {
        "if": [
          -1,
          "apple",
          "banana"
        ]
      },
      "data": null,
      "exp": "apple"
    },
    {
      "title": "test case 146 - {\"!\":[[]]} - {} - true",
      "logic": {
        "!": [
          []
        ]
      },
      "data": {},
      "exp": true
    },
    {
      "title": "test case 147 - {\"!!\":[[]]} - {} - false",
      "logic": {
        "!!": [
          []
        ]
      },
      "data": {},
      "exp": false
    },
    {
      "title": "test case 148 - {\"and\":[[],true]} - {} - []",
      "logic": {
        "and": [
          [],
          true
        ]
      },
      "data": {},
      "exp": []
    },
    {
      "title": "test case 149 - {\"or\":[[],true]} - {} - true",
      "logic": {
        "or": [
          [],
          true
        ]
      },
      "data": {},
      "exp": true
    },
    {
      "title": "test case 15 - {\"!=\":[1,\"1\"]} - {} - false",
      "logic": {
        "!=": [
          1,
          "1"
        ]
      },
      "data": {},
      "exp": false
    },
    {
      "title": "test case 150 - {\"!\":[0]} - {} - true",
      "logic": {
        "!": [
          0
        ]
      },
      "data": {},
      "exp": true
    },
    {
      "title": "test case 151 - {\"!!\":[0]} - {} - false",
      "logic": {
        "!!": [
          0
        ]
      },
      "data": {},
      "exp": false
    },
    {
      "title": "test case 152 - {\"and\":[0,true]} - {} - 0",
      "logic": {
        "and": [
          0,
          true
        ]
      },
      "data": {},
      "exp": 0
    },
    {
      "title": "test case 153 - {\"or\":[0,true]} - {} - true",
      "logic": {
        "or": [
          0,
          true
        ]
      },
      "data": {},
      "exp": true
    },
    {
      "title": "test case 154 - {\"!\":[\"\"]} - {} - true",
      "logic": {
        "!": [
          ""
        ]
      },
      "data": {},
      "exp": true
    },
    {
      "title": "test case 155 - {\"!!\":[\"\"]} - {} - false",
      "logic": {
        "!!": [
          ""
        ]
      },
      "data": {},
      "exp": false
    },
    {
      "title": "test case 156 - {\"and\":[\"\",true]} - {} - \"\"",
      "logic": {
        "and": [
          "",
          true
        ]
      },
      "data": {},
      "exp": ""
    },
    {
      "title": "test case 157 - {\"or\":[\"\",true]} - {} - true",
      "logic": {
        "or": [
          "",
          true
        ]
      },
      "data": {},
      "exp": true
    },
    {
      "title": "test case 158 - {\"!\":[\"0\"]} - {} - false",
      "logic": {
        "!": [
          "0"
        ]
      },
      "data": {},
      "exp": false
    },
    {
      "title": "test case 159 - {\"!!\":[\"0\"]} - {} - true",
      "logic": {
        "!!": [
          "0"
        ]
      },
      "data": {},
      "exp": true
    },
    {
      "title": "test case 16 - {\"!==\":[1,2]} - {} - true",
      "logic": {
        "!==": [
          1,
          2
        ]
      },
      "data": {},
      "exp": true
    },
    {
      "title": "test case 160 - {\"and\":[\"0\",true]} - {} - true",
      "logic": {
        "and": [
          "0",
          true
        ]
      },
      "data": {},
      "exp": true
    },
    {
      "title": "test case 161 - {\"or\":[\"0\",true]} - {} - \"0\"",
      "logic": {
        "or": [
          "0",
          true
        ]
      },
      "data": {},
      "exp": "0"
    },
    {
      "title": "test case 162 - {\"if\":[{\">\":[2,1]},\"apple\",\"banana\"]} - null - \"apple\"",
      "logic": {
        "if": [
          {
            ">": [
              2,
              1
            ]
          },
          "apple",
          "banana"
        ]
      },
      "data": null,
      "exp": "apple"
    },
    {
      "title": "test case 163 - {\"if\":[{\">\":[1,2]},\"apple\",\"banana\"]} - null - \"banana\"",
      "logic": {
        "if": [
          {
            ">": [
              1,
              2
            ]
          },
          "apple",
          "banana"
        ]
      },
      "data": null,
      "exp": "banana"
    },
    {
      "title": "test case 164 - {\"if\":[true,{\"cat\":[\"ap\",\"ple\"]},{\"cat\":[\"ba\",\"na\",\"na\"]}]} - null - \"apple\"",
      "logic": {
        "if": [
          true,
          {
            "cat": [
              "ap",
              "ple"
            ]
          },
          {
            "cat": [
              "ba",
              "na",
              "na"
            ]
          }
        ]
      },
      "data": null,
      "exp": "apple"
    },
    {
      "title": "test case 165 - {\"if\":[false,{\"cat\":[\"ap\",\"ple\"]},{\"cat\":[\"ba\",\"na\",\"na\"]}]} - null - \"banana\"",
      "logic": {
        "if": [
          false,
          {
            "cat": [
              "ap",
              "ple"
            ]
          },
          {
            "cat": [
              "ba",
              "na",
              "na"
            ]
          }
        ]
      },
      "data": null,
      "exp": "banana"
    },
    {
      "title": "test case 166 - {\"if\":[true,\"apple\",true,\"banana\"]} - null - \"apple\"",
      "logic": {
        "if": [
          true,
          "apple",
          true,
          "banana"
        ]
      },
      "data": null,
      "exp": "apple"
    },
    {
      "title": "test case 167 - {\"if\":[true,\"apple\",false,\"banana\"]} - null - \"apple\"",
      "logic": {
        "if": [
          true,
          "apple",
          false,
          "banana"
        ]
      },
      "data": null,
      "exp": "apple"
    },
    {
      "title": "test case 168 - {\"if\":[false,\"apple\",true,\"banana\"]} - null - \"banana\"",
      "logic": {
        "if": [
          false,
          "apple",
          true,
          "banana"
        ]
      },
      "data": null,
      "exp": "banana"
    },
    {
      "title": "test case 169 - {\"if\":[false,\"apple\",false,\"banana\"]} - null - null",
      "logic": {
        "if": [
          false,
          "apple",
          false,
          "banana"
        ]
      },
      "data": null,
      "exp": null
    },
    {
      "title": "test case 17 - {\"!==\":[1,1]} - {} - false",
      "logic": {
        "!==": [
          1,
          1
        ]
      },
      "data": {},
      "exp": false
    },
    {
      "title": "test case 170 - {\"if\":[true,\"apple\",true,\"banana\",\"carrot\"]} - null - \"apple\"",
      "logic": {
        "if": [
          true,
          "apple",
          true,
          "banana",
          "carrot"
        ]
      },
      "data": null,
      "exp": "apple"
    },
    {
      "title": "test case 171 - {\"if\":[true,\"apple\",false,\"banana\",\"carrot\"]} - null - \"apple\"",
      "logic": {
        "if": [
          true,
          "apple",
          false,
          "banana",
          "carrot"
        ]
      },
      "data": null,
      "exp": "apple"
    },
    {
      "title": "test case 172 - {\"if\":[false,\"apple\",true,\"banana\",\"carrot\"]} - null - \"banana\"",
      "logic": {
        "if": [
          false,
          "apple",
          true,
          "banana",
          "carrot"
        ]
      },
      "data": null,
      "exp": "banana"
    },
    {
      "title": "test case 173 - {\"if\":[false,\"apple\",false,\"banana\",\"carrot\"]} - null - \"carrot\"",
      "logic": {
        "if": [
          false,
          "apple",
          false,
          "banana",
          "carrot"
        ]
      },
      "data": null,
      "exp": "carrot"
    },
    {
      "title": "test case 174 - {\"if\":[false,\"apple\",false,\"banana\",false,\"carrot\"]} - null - null",
      "logic": {
        "if": [
          false,
          "apple",
          false,
          "banana",
          false,
          "carrot"
        ]
      },
      "data": null,
      "exp": null
    },
    {
      "title": "test case 175 - {\"if\":[false,\"apple\",false,\"banana\",false,\"carrot\",\"date\"]} - null - \"date\"",
      "logic": {
        "if": [
          false,
          "apple",
          false,
          "banana",
          false,
          "carrot",
          "date"
        ]
      },
      "data": null,
      "exp": "date"
    },
    {
      "title": "test case 176 - {\"if\":[false,\"apple\",false,\"banana\",true,\"carrot\",\"date\"]} - null - \"carrot\"",
      "logic": {
        "if": [
          false,
          "apple",
          false,
          "banana",
          true,
          "carrot",
          "date"
        ]
      },
      "data": null,
      "exp": "carrot"
    },
    {
      "title": "test case 177 - {\"if\":[false,\"apple\",true,\"banana\",false,\"carrot\",\"date\"]} - null - \"banana\"",
      "logic": {
        "if": [
          false,
          "apple",
          true,
          "banana",
          false,
          "carrot",
          "date"
        ]
      },
      "data": null,
      "exp": "banana"
    },
    {
      "title": "test case 178 - {\"if\":[false,\"apple\",true,\"banana\",true,\"carrot\",\"date\"]} - null - \"banana\"",
      "logic": {
        "if": [
          false,
          "apple",
          true,
          "banana",
          true,
          "carrot",
          "date"
        ]
      },
      "data": null,
      "exp": "banana"
    },
    {
      "title": "test case 179 - {\"if\":[true,\"apple\",false,\"banana\",false,\"carrot\",\"date\"]} - null - \"apple\"",
      "logic": {
        "if": [
          true,
          "apple",
          false,
          "banana",
          false,
          "carrot",
          "date"
        ]
      },
      "data": null,
      "exp": "apple"
    },
    {
      "title": "test case 18 - {\"!==\":[1,\"1\"]} - {} - true",
      "logic": {
        "!==": [
          1,
          "1"
        ]
      },
      "data": {},
      "exp": true
    },
    {
      "title": "test case 180 - {\"if\":[true,\"apple\",false,\"banana\",true,\"carrot\",\"date\"]} - null - \"apple\"",
      "logic": {
        "if": [
          true,
          "apple",
          false,
          "banana",
          true,
          "carrot",
          "date"
        ]
      },
      "data": null,
      "exp": "apple"
    },
    {
      "title": "test case 181 - {\"if\":[true,\"apple\",true,\"banana\",false,\"carrot\",\"date\"]} - null - \"apple\"",
      "logic": {
        "if": [
          true,
          "apple",
          true,
          "banana",
          false,
          "carrot",
          "date"
        ]
      },
      "data": null,
      "exp": "apple"
    },
    {
      "title": "test case 182 - {\"if\":[true,\"apple\",true,\"banana\",true,\"carrot\",\"date\"]} - null - \"apple\"",
      "logic": {
        "if": [
          true,
          "apple",
          true,
          "banana",
          true,
          "carrot",
          "date"
        ]
      },
      "data": null,
      "exp": "apple"
    },
    {
      "title": "test case 183 - {\"and\":[{\">\":[3,1]},true]} - {} - true",
      "logic": {
        "and": [
          {
            ">": [
              3,
              1
            ]
          },
          true
        ]
      },
      "data": {},
      "exp": true
    },
    {
      "title": "test case 184 - {\"and\":[{\">\":[3,1]},false]} - {} - false",
      "logic": {
        "and": [
          {
            ">": [
              3,
              1
            ]
          },
          false
        ]
      },
      "data": {},
      "exp": false
    },
    {
      "title": "test case 185 - {\"and\":[{\">\":[3,1]},{\"!\":true}]} - {} - false",
      "logic": {
        "and": [
          {
            ">": [
              3,
              1
            ]
          },
          {
            "!": true
          }
        ]
      },
      "data": {},
      "exp": false
    },
    {
      "title": "test case 186 - {\"and\":[{\">\":[3,1]},{\"<\":[1,3]}]} - {} - true",
      "logic": {
        "and": [
          {
            ">": [
              3,
              1
            ]
          },
          {
            "<": [
              1,
              3
            ]
          }
        ]
      },
      "data": {},
      "exp": true
    },
    {
      "title": "test case 187 - {\"?:\":[{\">\":[3,1]},\"visible\",\"hidden\"]} - {} - \"visible\"",
      "logic": {
        "?:": [
          {
            ">": [
              3,
              1
            ]
          },
          "visible",
          "hidden"
        ]
      },
      "data": {},
      "exp": "visible"
    },
    {
      "title": "test case 188 - {\"var\":[\"a\"]} - {\"a\":1} - 1",
      "logic": {
        "var": [
          "a"
        ]
      },
      "data": {
        "a": 1
      },
      "exp": 1
    },
    {
      "title": "test case 189 - {\"var\":[\"b\"]} - {\"a\":1} - null",
      "logic": {
        "var": [
          "b"
        ]
      },
      "data": {
        "a": 1
      },
      "exp": null
    },
    {
      "title": "test case 19 - {\">\":[2,1]} - {} - true",
      "logic": {
        ">": [
          2,
          1
        ]
      },
      "data": {},
      "exp": true
    },
    {
      "title": "test case 190 - {\"var\":[\"a\"]} - null - null",
      "logic": {
        "var": [
          "a"
        ]
      },
      "data": null,
      "exp": null
    },
    {
      "title": "test case 191 - {\"var\":\"a\"} - {\"a\":1} - 1",
      "logic": {
        "var": "a"
      },
      "data": {
        "a": 1
      },
      "exp": 1
    },
    {
      "title": "test case 192 - {\"var\":\"b\"} - {\"a\":1} - null",
      "logic": {
        "var": "b"
      },
      "data": {
        "a": 1
      },
      "exp": null
    },
    {
      "title": "test case 193 - {\"var\":\"a\"} - null - null",
      "logic": {
        "var": "a"
      },
      "data": null,
      "exp": null
    },
    {
      "title": "test case 194 - {\"var\":[\"a\",1]} - null - 1",
      "logic": {
        "var": [
          "a",
          1
        ]
      },
      "data": null,
      "exp": 1
    },
    {
      "title": "test case 195 - {\"var\":[\"b\",2]} - {\"a\":1} - 2",
      "logic": {
        "var": [
          "b",
          2
        ]
      },
      "data": {
        "a": 1
      },
      "exp": 2
    },
    {
      "title": "test case 196 - {\"var\":\"a.b\"} - {\"a\":{\"b\":\"c\"}} - \"c\"",
      "logic": {
        "var": "a.b"
      },
      "data": {
        "a": {
          "b": "c"
        }
      },
      "exp": "c"
    },
    {
      "title": "test case 197 - {\"var\":\"a.q\"} - {\"a\":{\"b\":\"c\"}} - null",
      "logic": {
        "var": "a.q"
      },
      "data": {
        "a": {
          "b": "c"
        }
      },
      "exp": null
    },
    {
      "title": "test case 198 - {\"var\":[\"a.q\",9]} - {\"a\":{\"b\":\"c\"}} - 9",
      "logic": {
        "var": [
          "a.q",
          9
        ]
      },
      "data": {
        "a": {
          "b": "c"
        }
      },
      "exp": 9
    },
    {
      "title": "test case 199 - {\"var\":1} - [\"apple\",\"banana\"] - \"banana\"",
      "logic": {
        "var": 1
      },
      "data": [
        "apple",
        "banana"
      ],
      "exp": "banana"
    },
    {
      "title": "test case 2 - 17 - {} - 17",
      "logic": 17,
      "data": {},
      "exp": 17
    },
    {
      "title": "test case 20 - {\">\":[1,1]} - {} - false",
      "logic": {
        ">": [
          1,
          1
        ]
      },
      "data": {},
      "exp": false
    },
    {
      "title": "test case 200 - {\"var\":\"1\"} - [\"apple\",\"banana\"] - \"banana\"",
      "logic": {
        "var": "1"
      },
      "data": [
        "apple",
        "banana"
      ],
      "exp": "banana"
    },
    {
      "title": "test case 201 - {\"var\":\"1.1\"} - [\"apple\",[\"banana\",\"beer\"]] - \"beer\"",
      "logic": {
        "var": "1.1"
      },
      "data": [
        "apple",
        [
          "banana",
          "beer"
        ]
      ],
      "exp": "beer"
    },
    {
      "title": "test case 202 - {\"and\":[{\"<\":[{\"var\":\"temp\"},110]},{\"==\":[{\"var\":\"pie.filling\"},\"apple\"]}]} - {\"temp\":100,\"pie\":{\"filling\":\"apple\"}} - true",
      "logic": {
        "and": [
          {
            "<": [
              {
                "var": "temp"
              },
              110
            ]
          },
          {
            "==": [
              {
                "var": "pie.filling"
              },
              "apple"
            ]
          }
        ]
      },
      "data": {
        "temp": 100,
        "pie": {
          "filling": "apple"
        }
      },
      "exp": true
    },
    {
      "title": "test case 203 - {\"var\":[{\"?:\":[{\"<\":[{\"var\":\"temp\"},110]},\"pie.filling\",\"pie.eta\"]}]} - {\"temp\":100,\"pie\":{\"filling\":\"apple\",\"eta\":\"60s\"}} - \"apple\"",
      "logic": {
        "var": [
          {
            "?:": [
              {
                "<": [
                  {
                    "var": "temp"
                  },
                  110
                ]
              },
              "pie.filling",
              "pie.eta"
            ]
          }
        ]
      },
      "data": {
        "temp": 100,
        "pie": {
          "filling": "apple",
          "eta": "60s"
        }
      },
      "exp": "apple"
    },
    {
      "title": "test case 204 - {\"in\":[{\"var\":\"filling\"},[\"apple\",\"cherry\"]]} - {\"filling\":\"apple\"} - true",
      "logic": {
        "in": [
          {
            "var": "filling"
          },
          [
            "apple",
            "cherry"
          ]
        ]
      },
      "data": {
        "filling": "apple"
      },
      "exp": true
    },
    {
      "title": "test case 205 - {\"var\":\"a.b.c\"} - null - null",
      "logic": {
        "var": "a.b.c"
      },
      "data": null,
      "exp": null
    },
    {
      "title": "test case 206 - {\"var\":\"a.b.c\"} - {\"a\":null} - null",
      "logic": {
        "var": "a.b.c"
      },
      "data": {
        "a": null
      },
      "exp": null
    },
    {
      "title": "test case 207 - {\"var\":\"a.b.c\"} - {\"a\":{\"b\":null}} - null",
      "logic": {
        "var": "a.b.c"
      },
      "data": {
        "a": {
          "b": null
        }
      },
      "exp": null
    },
    {
      "title": "test case 208 - {\"var\":\"\"} - 1 - 1",
      "logic": {
        "var": ""
      },
      "data": 1,
      "exp": 1
    },
    {
      "title": "test case 209 - {\"var\":null} - 1 - 1",
      "logic": {
        "var": null
      },
      "data": 1,
      "exp": 1
    },
    {
      "title": "test case 21 - {\">\":[1,2]} - {} - false",
      "logic": {
        ">": [
          1,
          2
        ]
      },
      "data": {},
      "exp": false
    },
    {
      "title": "test case 210 - {\"var\":[]} - 1 - 1",
      "logic": {
        "var": []
      },
      "data": 1,
      "exp": 1
    },
    {
      "title": "test case 211 - {\"missing\":[]} - null - []",
      "logic": {
        "missing": []
      },
      "data": null,
      "exp": []
    },
    {
      "title": "test case 212 - {\"missing\":[\"a\"]} - null - [\"a\"]",
      "logic": {
        "missing": [
          "a"
        ]
      },
      "data": null,
      "exp": [
        "a"
      ]
    },
    {
      "title": "test case 213 - {\"missing\":\"a\"} - null - [\"a\"]",
      "logic": {
        "missing": "a"
      },
      "data": null,
      "exp": [
        "a"
      ]
    },
    {
      "title": "test case 214 - {\"missing\":\"a\"} - {\"a\":\"apple\"} - []",
      "logic": {
        "missing": "a"
      },
      "data": {
        "a": "apple"
      },
      "exp": []
    },
    {
      "title": "test case 215 - {\"missing\":[\"a\"]} - {\"a\":\"apple\"} - []",
      "logic": {
        "missing": [
          "a"
        ]
      },
      "data": {
        "a": "apple"
      },
      "exp": []
    },
    {
      "title": "test case 216 - {\"missing\":[\"a\",\"b\"]} - {\"a\":\"apple\"} - [\"b\"]",
      "logic": {
        "missing": [
          "a",
          "b"
        ]
      },
      "data": {
        "a": "apple"
      },
      "exp": [
        "b"
      ]
    },
    {
      "title": "test case 217 - {\"missing\":[\"a\",\"b\"]} - {\"b\":\"banana\"} - [\"a\"]",
      "logic": {
        "missing": [
          "a",
          "b"
        ]
      },
      "data": {
        "b": "banana"
      },
      "exp": [
        "a"
      ]
    },
    {
      "title": "test case 218 - {\"missing\":[\"a\",\"b\"]} - {\"a\":\"apple\",\"b\":\"banana\"} - []",
      "logic": {
        "missing": [
          "a",
          "b"
        ]
      },
      "data": {
        "a": "apple",
        "b": "banana"
      },
      "exp": []
    },
    {
      "title": "test case 219 - {\"missing\":[\"a\",\"b\"]} - {} - [\"a\",\"b\"]",
      "logic": {
        "missing": [
          "a",
          "b"
        ]
      },
      "data": {},
      "exp": [
        "a",
        "b"
      ]
    },
    {
      "title": "test case 22 - {\">\":[\"2\",1]} - {} - true",
      "logic": {
        ">": [
          "2",
          1
        ]
      },
      "data": {},
      "exp": true
    },
    {
      "title": "test case 220 - {\"missing\":[\"a\",\"b\"]} - null - [\"a\",\"b\"]",
      "logic": {
        "missing": [
          "a",
          "b"
        ]
      },
      "data": null,
      "exp": [
        "a",
        "b"
      ]
    },
    {
      "title": "test case 221 - {\"missing\":[\"a.b\"]} - null - [\"a.b\"]",
      "logic": {
        "missing": [
          "a.b"
        ]
      },
      "data": null,
      "exp": [
        "a.b"
      ]
    },
    {
      "title": "test case 222 - {\"missing\":[\"a.b\"]} - {\"a\":\"apple\"} - [\"a.b\"]",
      "logic": {
        "missing": [
          "a.b"
        ]
      },
      "data": {
        "a": "apple"
      },
      "exp": [
        "a.b"
      ]
    },
    {
      "title": "test case 223 - {\"missing\":[\"a.b\"]} - {\"a\":{\"c\":\"apple cake\"}} - [\"a.b\"]",
      "logic": {
        "missing": [
          "a.b"
        ]
      },
      "data": {
        "a": {
          "c": "apple cake"
        }
      },
      "exp": [
        "a.b"
      ]
    },
    {
      "title": "test case 224 - {\"missing\":[\"a.b\"]} - {\"a\":{\"b\":\"apple brownie\"}} - []",
      "logic": {
        "missing": [
          "a.b"
        ]
      },
      "data": {
        "a": {
          "b": "apple brownie"
        }
      },
      "exp": []
    },
    {
      "title": "test case 225 - {\"missing\":[\"a.b\",\"a.c\"]} - {\"a\":{\"b\":\"apple brownie\"}} - [\"a.c\"]",
      "logic": {
        "missing": [
          "a.b",
          "a.c"
        ]
      },
      "data": {
        "a": {
          "b": "apple brownie"
        }
      },
      "exp": [
        "a.c"
      ]
    },
    {
      "title": "test case 226 - {\"missing_some\":[1,[\"a\",\"b\"]]} - {\"a\":\"apple\"} - []",
      "logic": {
        "missing_some": [
          1,
          [
            "a",
            "b"
          ]
        ]
      },
      "data": {
        "a": "apple"
      },
      "exp": []
    },
    {
      "title": "test case 227 - {\"missing_some\":[1,[\"a\",\"b\"]]} - {\"b\":\"banana\"} - []",
      "logic": {
        "missing_some": [
          1,
          [
            "a",
            "b"
          ]
        ]
      },
      "data": {
        "b": "banana"
      },
      "exp": []
    },
    {
      "title": "test case 228 - {\"missing_some\":[1,[\"a\",\"b\"]]} - {\"a\":\"apple\",\"b\":\"banana\"} - []",
      "logic": {
        "missing_some": [
          1,
          [
            "a",
            "b"
          ]
        ]
      },
      "data": {
        "a": "apple",
        "b": "banana"
      },
      "exp": []
    },
    {
      "title": "test case 229 - {\"missing_some\":[1,[\"a\",\"b\"]]} - {\"c\":\"carrot\"} - [\"a\",\"b\"]",
      "logic": {
        "missing_some": [
          1,
          [
            "a",
            "b"
          ]
        ]
      },
      "data": {
        "c": "carrot"
      },
      "exp": [
        "a",
        "b"
      ]
    },
    {
      "title": "test case 23 - {\">=\":[2,1]} - {} - true",
      "logic": {
        ">=": [
          2,
          1
        ]
      },
      "data": {},
      "exp": true
    },
    {
      "title": "test case 230 - {\"missing_some\":[2,[\"a\",\"b\",\"c\"]]} - {\"a\":\"apple\",\"b\":\"banana\"} - []",
      "logic": {
        "missing_some": [
          2,
          [
            "a",
            "b",
            "c"
          ]
        ]
      },
      "data": {
        "a": "apple",
        "b": "banana"
      },
      "exp": []
    },
    {
      "title": "test case 231 - {\"missing_some\":[2,[\"a\",\"b\",\"c\"]]} - {\"a\":\"apple\",\"c\":\"carrot\"} - []",
      "logic": {
        "missing_some": [
          2,
          [
            "a",
            "b",
            "c"
          ]
        ]
      },
      "data": {
        "a": "apple",
        "c": "carrot"
      },
      "exp": []
    },
    {
      "title": "test case 232 - {\"missing_some\":[2,[\"a\",\"b\",\"c\"]]} - {\"a\":\"apple\",\"b\":\"banana\",\"c\":\"carrot\"} - []",
      "logic": {
        "missing_some": [
          2,
          [
            "a",
            "b",
            "c"
          ]
        ]
      },
      "data": {
        "a": "apple",
        "b": "banana",
        "c": "carrot"
      },
      "exp": []
    },
    {
      "title": "test case 233 - {\"missing_some\":[2,[\"a\",\"b\",\"c\"]]} - {\"a\":\"apple\",\"d\":\"durian\"} - [\"b\",\"c\"]",
      "logic": {
        "missing_some": [
          2,
          [
            "a",
            "b",
            "c"
          ]
        ]
      },
      "data": {
        "a": "apple",
        "d": "durian"
      },
      "exp": [
        "b",
        "c"
      ]
    },
    {
      "title": "test case 234 - {\"missing_some\":[2,[\"a\",\"b\",\"c\"]]} - {\"d\":\"durian\",\"e\":\"eggplant\"} - [\"a\",\"b\",\"c\"]",
      "logic": {
        "missing_some": [
          2,
          [
            "a",
            "b",
            "c"
          ]
        ]
      },
      "data": {
        "d": "durian",
        "e": "eggplant"
      },
      "exp": [
        "a",
        "b",
        "c"
      ]
    },
    {
      "title": "test case 235 - {\"if\":[{\"missing\":\"a\"},\"missed it\",\"found it\"]} - {\"a\":\"apple\"} - \"found it\"",
      "logic": {
        "if": [
          {
            "missing": "a"
          },
          "missed it",
          "found it"
        ]
      },
      "data": {
        "a": "apple"
      },
      "exp": "found it"
    },
    {
      "title": "test case 236 - {\"if\":[{\"missing\":\"a\"},\"missed it\",\"found it\"]} - {\"b\":\"banana\"} - \"missed it\"",
      "logic": {
        "if": [
          {
            "missing": "a"
          },
          "missed it",
          "found it"
        ]
      },
      "data": {
        "b": "banana"
      },
      "exp": "missed it"
    },
    {
      "title": "test case 237 - {\"missing\":{\"merge\":[\"vin\",{\"if\":[{\"var\":\"financing\"},[\"apr\"],[]]}]}} - {\"financing\":true} - [\"vin\",\"apr\"]",
      "logic": {
        "missing": {
          "merge": [
            "vin",
            {
              "if": [
                {
                  "var": "financing"
                },
                [
                  "apr"
                ],
                []
              ]
            }
          ]
        }
      },
      "data": {
        "financing": true
      },
      "exp": [
        "vin",
        "apr"
      ]
    },
    {
      "title": "test case 238 - {\"missing\":{\"merge\":[\"vin\",{\"if\":[{\"var\":\"financing\"},[\"apr\"],[]]}]}} - {\"financing\":false} - [\"vin\"]",
      "logic": {
        "missing": {
          "merge": [
            "vin",
            {
              "if": [
                {
                  "var": "financing"
                },
                [
                  "apr"
                ],
                []
              ]
            }
          ]
        }
      },
      "data": {
        "financing": false
      },
      "exp": [
        "vin"
      ]
    },
    {
      "title": "test case 239 - {\"filter\":[{\"var\":\"integers\"},true]} - {\"integers\":[1,2,3]} - [1,2,3]",
      "logic": {
        "filter": [
          {
            "var": "integers"
          },
          true
        ]
      },
      "data": {
        "integers": [
          1,
          2,
          3
        ]
      },
      "exp": [
        1,
        2,
        3
      ]
    },
    {
      "title": "test case 24 - {\">=\":[1,1]} - {} - true",
      "logic": {
        ">=": [
          1,
          1
        ]
      },
      "data": {},
      "exp": true
    },
    {
      "title": "test case 240 - {\"filter\":[{\"var\":\"integers\"},false]} - {\"integers\":[1,2,3]} - []",
      "logic": {
        "filter": [
          {
            "var": "integers"
          },
          false
        ]
      },
      "data": {
        "integers": [
          1,
          2,
          3
        ]
      },
      "exp": []
    },
    {
      "title": "test case 241 - {\"filter\":[{\"var\":\"integers\"},{\">=\":[{\"var\":\"\"},2]}]} - {\"integers\":[1,2,3]} - [2,3]",
      "logic": {
        "filter": [
          {
            "var": "integers"
          },
          {
            ">=": [
              {
                "var": ""
              },
              2
            ]
          }
        ]
      },
      "data": {
        "integers": [
          1,
          2,
          3
        ]
      },
      "exp": [
        2,
        3
      ]
    },
    {
      "title": "test case 242 - {\"filter\":[{\"var\":\"integers\"},{\"%\":[{\"var\":\"\"},2]}]} - {\"integers\":[1,2,3]} - [1,3]",
      "logic": {
        "filter": [
          {
            "var": "integers"
          },
          {
            "%": [
              {
                "var": ""
              },
              2
            ]
          }
        ]
      },
      "data": {
        "integers": [
          1,
          2,
          3
        ]
      },
      "exp": [
        1,
        3
      ]
    },
    {
      "title": "test case 243 - {\"map\":[{\"var\":\"integers\"},{\"*\":[{\"var\":\"\"},2]}]} - {\"integers\":[1,2,3]} - [2,4,6]",
      "logic": {
        "map": [
          {
            "var": "integers"
          },
          {
            "*": [
              {
                "var": ""
              },
              2
            ]
          }
        ]
      },
      "data": {
        "integers": [
          1,
          2,
          3
        ]
      },
      "exp": [
        2,
        4,
        6
      ]
    },
    {
      "title": "test case 244 - {\"map\":[{\"var\":\"integers\"},{\"*\":[{\"var\":\"\"},2]}]} - null - []",
      "logic": {
        "map": [
          {
            "var": "integers"
          },
          {
            "*": [
              {
                "var": ""
              },
              2
            ]
          }
        ]
      },
      "data": null,
      "exp": []
    },
    {
      "title": "test case 245 - {\"map\":[{\"var\":\"desserts\"},{\"var\":\"qty\"}]} - {\"desserts\":[{\"name\":\"apple\",\"qty\":1},{\"name\":\"brownie\",\"qty\":2},{\"name\":\"cupcake\",\"qty\":3}]} - [1,2,3]",
      "logic": {
        "map": [
          {
            "var": "desserts"
          },
          {
            "var": "qty"
          }
        ]
      },
      "data": {
        "desserts": [
          {
            "name": "apple",
            "qty": 1
          },
          {
            "name": "brownie",
            "qty": 2
          },
          {
            "name": "cupcake",
            "qty": 3
          }
        ]
      },
      "exp": [
        1,
        2,
        3
      ]
    },
    {
      "title": "test case 246 - {\"reduce\":[{\"var\":\"integers\"},{\"+\":[{\"var\":\"current\"},{\"var\":\"accumulator\"}]},0]} - {\"integers\":[1,2,3,4]} - 10",
      "logic": {
        "reduce": [
          {
            "var": "integers"
          },
          {
            "+": [
              {
                "var": "current"
              },
              {
                "var": "accumulator"
              }
            ]
          },
          0
        ]
      },
      "data": {
        "integers": [
          1,
          2,
          3,
          4
        ]
      },
      "exp": 10
    },
    {
      "title": "test case 247 - {\"reduce\":[{\"var\":\"integers\"},{\"+\":[{\"var\":\"current\"},{\"var\":\"accumulator\"}]},0]} - null - 0",
      "logic": {
        "reduce": [
          {
            "var": "integers"
          },
          {
            "+": [
              {
                "var": "current"
              },
              {
                "var": "accumulator"
              }
            ]
          },
          0
        ]
      },
      "data": null,
      "exp": 0
    },
    {
      "title": "test case 248 - {\"reduce\":[{\"var\":\"integers\"},{\"*\":[{\"var\":\"current\"},{\"var\":\"accumulator\"}]},1]} - {\"integers\":[1,2,3,4]} - 24",
      "logic": {
        "reduce": [
          {
            "var": "integers"
          },
          {
            "*": [
              {
                "var": "current"
              },
              {
                "var": "accumulator"
              }
            ]
          },
          1
        ]
      },
      "data": {
        "integers": [
          1,
          2,
          3,
          4
        ]
      },
      "exp": 24
    },
    {
      "title": "test case 249 - {\"reduce\":[{\"var\":\"integers\"},{\"*\":[{\"var\":\"current\"},{\"var\":\"accumulator\"}]},0]} - {\"integers\":[1,2,3,4]} - 0",
      "logic": {
        "reduce": [
          {
            "var": "integers"
          },
          {
            "*": [
              {
                "var": "current"
              },
              {
                "var": "accumulator"
              }
            ]
          },
          0
        ]
      },
      "data": {
        "integers": [
          1,
          2,
          3,
          4
        ]
      },
      "exp": 0
    },
    {
      "title": "test case 25 - {\">=\":[1,2]} - {} - false",
      "logic": {
        ">=": [
          1,
          2
        ]
      },
      "data": {},
      "exp": false
    },
    {
      "title": "test case 250 - {\"reduce\":[{\"var\":\"desserts\"},{\"+\":[{\"var\":\"accumulator\"},{\"var\":\"current.qty\"}]},0]} - {\"desserts\":[{\"name\":\"apple\",\"qty\":1},{\"name\":\"brownie\",\"qty\":2},{\"name\":\"cupcake\",\"qty\":3}]} - 6",
      "logic": {
        "reduce": [
          {
            "var": "desserts"
          },
          {
            "+": [
              {
                "var": "accumulator"
              },
              {
                "var": "current.qty"
              }
            ]
          },
          0
        ]
      },
      "data": {
        "desserts": [
          {
            "name": "apple",
            "qty": 1
          },
          {
            "name": "brownie",
            "qty": 2
          },
          {
            "name": "cupcake",
            "qty": 3
          }
        ]
      },
      "exp": 6
    },
    {
      "title": "test case 251 - {\"all\":[{\"var\":\"integers\"},{\">=\":[{\"var\":\"\"},1]}]} - {\"integers\":[1,2,3]} - true",
      "logic": {
        "all": [
          {
            "var": "integers"
          },
          {
            ">=": [
              {
                "var": ""
              },
              1
            ]
          }
        ]
      },
      "data": {
        "integers": [
          1,
          2,
          3
        ]
      },
      "exp": true
    },
    {
      "title": "test case 252 - {\"all\":[{\"var\":\"integers\"},{\"==\":[{\"var\":\"\"},1]}]} - {\"integers\":[1,2,3]} - false",
      "logic": {
        "all": [
          {
            "var": "integers"
          },
          {
            "==": [
              {
                "var": ""
              },
              1
            ]
          }
        ]
      },
      "data": {
        "integers": [
          1,
          2,
          3
        ]
      },
      "exp": false
    },
    {
      "title": "test case 253 - {\"all\":[{\"var\":\"integers\"},{\"<\":[{\"var\":\"\"},1]}]} - {\"integers\":[1,2,3]} - false",
      "logic": {
        "all": [
          {
            "var": "integers"
          },
          {
            "<": [
              {
                "var": ""
              },
              1
            ]
          }
        ]
      },
      "data": {
        "integers": [
          1,
          2,
          3
        ]
      },
      "exp": false
    },
    {
      "title": "test case 254 - {\"all\":[{\"var\":\"integers\"},{\"<\":[{\"var\":\"\"},1]}]} - {\"integers\":[]} - false",
      "logic": {
        "all": [
          {
            "var": "integers"
          },
          {
            "<": [
              {
                "var": ""
              },
              1
            ]
          }
        ]
      },
      "data": {
        "integers": []
      },
      "exp": false
    },
    {
      "title": "test case 255 - {\"all\":[{\"var\":\"items\"},{\">=\":[{\"var\":\"qty\"},1]}]} - {\"items\":[{\"qty\":1,\"sku\":\"apple\"},{\"qty\":2,\"sku\":\"banana\"}]} - true",
      "logic": {
        "all": [
          {
            "var": "items"
          },
          {
            ">=": [
              {
                "var": "qty"
              },
              1
            ]
          }
        ]
      },
      "data": {
        "items": [
          {
            "qty": 1,
            "sku": "apple"
          },
          {
            "qty": 2,
            "sku": "banana"
          }
        ]
      },
      "exp": true
    },
    {
      "title": "test case 256 - {\"all\":[{\"var\":\"items\"},{\">\":[{\"var\":\"qty\"},1]}]} - {\"items\":[{\"qty\":1,\"sku\":\"apple\"},{\"qty\":2,\"sku\":\"banana\"}]} - false",
      "logic": {
        "all": [
          {
            "var": "items"
          },
          {
            ">": [
              {
                "var": "qty"
              },
              1
            ]
          }
        ]
      },
      "data": {
        "items": [
          {
            "qty": 1,
            "sku": "apple"
          },
          {
            "qty": 2,
            "sku": "banana"
          }
        ]
      },
      "exp": false
    },
    {
      "title": "test case 257 - {\"all\":[{\"var\":\"items\"},{\"<\":[{\"var\":\"qty\"},1]}]} - {\"items\":[{\"qty\":1,\"sku\":\"apple\"},{\"qty\":2,\"sku\":\"banana\"}]} - false",
      "logic": {
        "all": [
          {
            "var": "items"
          },
          {
            "<": [
              {
                "var": "qty"
              },
              1
            ]
          }
        ]
      },
      "data": {
        "items": [
          {
            "qty": 1,
            "sku": "apple"
          },
          {
            "qty": 2,
            "sku": "banana"
          }
        ]
      },
      "exp": false
    },
    {
      "title": "test case 258 - {\"all\":[{\"var\":\"items\"},{\">=\":[{\"var\":\"qty\"},1]}]} - {\"items\":[]} - false",
      "logic": {
        "all": [
          {
            "var": "items"
          },
          {
            ">=": [
              {
                "var": "qty"
              },
              1
            ]
          }
        ]
      },
      "data": {
        "items": []
      },
      "exp": false
    },
    {
      "title": "test case 259 - {\"none\":[{\"var\":\"integers\"},{\">=\":[{\"var\":\"\"},1]}]} - {\"integers\":[1,2,3]} - false",
      "logic": {
        "none": [
          {
            "var": "integers"
          },
          {
            ">=": [
              {
                "var": ""
              },
              1
            ]
          }
        ]
      },
      "data": {
        "integers": [
          1,
          2,
          3
        ]
      },
      "exp": false
    },
    {
      "title": "test case 26 - {\">=\":[\"2\",1]} - {} - true",
      "logic": {
        ">=": [
          "2",
          1
        ]
      },
      "data": {},
      "exp": true
    },
    {
      "title": "test case 260 - {\"none\":[{\"var\":\"integers\"},{\"==\":[{\"var\":\"\"},1]}]} - {\"integers\":[1,2,3]} - false",
      "logic": {
        "none": [
          {
            "var": "integers"
          },
          {
            "==": [
              {
                "var": ""
              },
              1
            ]
          }
        ]
      },
      "data": {
        "integers": [
          1,
          2,
          3
        ]
      },
      "exp": false
    },
    {
      "title": "test case 261 - {\"none\":[{\"var\":\"integers\"},{\"<\":[{\"var\":\"\"},1]}]} - {\"integers\":[1,2,3]} - true",
      "logic": {
        "none": [
          {
            "var": "integers"
          },
          {
            "<": [
              {
                "var": ""
              },
              1
            ]
          }
        ]
      },
      "data": {
        "integers": [
          1,
          2,
          3
        ]
      },
      "exp": true
    },
    {
      "title": "test case 262 - {\"none\":[{\"var\":\"integers\"},{\"<\":[{\"var\":\"\"},1]}]} - {\"integers\":[]} - true",
      "logic": {
        "none": [
          {
            "var": "integers"
          },
          {
            "<": [
              {
                "var": ""
              },
              1
            ]
          }
        ]
      },
      "data": {
        "integers": []
      },
      "exp": true
    },
    {
      "title": "test case 263 - {\"none\":[{\"var\":\"items\"},{\">=\":[{\"var\":\"qty\"},1]}]} - {\"items\":[{\"qty\":1,\"sku\":\"apple\"},{\"qty\":2,\"sku\":\"banana\"}]} - false",
      "logic": {
        "none": [
          {
            "var": "items"
          },
          {
            ">=": [
              {
                "var": "qty"
              },
              1
            ]
          }
        ]
      },
      "data": {
        "items": [
          {
            "qty": 1,
            "sku": "apple"
          },
          {
            "qty": 2,
            "sku": "banana"
          }
        ]
      },
      "exp": false
    },
    {
      "title": "test case 264 - {\"none\":[{\"var\":\"items\"},{\">\":[{\"var\":\"qty\"},1]}]} - {\"items\":[{\"qty\":1,\"sku\":\"apple\"},{\"qty\":2,\"sku\":\"banana\"}]} - false",
      "logic": {
        "none": [
          {
            "var": "items"
          },
          {
            ">": [
              {
                "var": "qty"
              },
              1
            ]
          }
        ]
      },
      "data": {
        "items": [
          {
            "qty": 1,
            "sku": "apple"
          },
          {
            "qty": 2,
            "sku": "banana"
          }
        ]
      },
      "exp": false
    },
    {
      "title": "test case 265 - {\"none\":[{\"var\":\"items\"},{\"<\":[{\"var\":\"qty\"},1]}]} - {\"items\":[{\"qty\":1,\"sku\":\"apple\"},{\"qty\":2,\"sku\":\"banana\"}]} - true",
      "logic": {
        "none": [
          {
            "var": "items"
          },
          {
            "<": [
              {
                "var": "qty"
              },
              1
            ]
          }
        ]
      },
      "data": {
        "items": [
          {
            "qty": 1,
            "sku": "apple"
          },
          {
            "qty": 2,
            "sku": "banana"
          }
        ]
      },
      "exp": true
    },
    {
      "title": "test case 266 - {\"none\":[{\"var\":\"items\"},{\">=\":[{\"var\":\"qty\"},1]}]} - {\"items\":[]} - true",
      "logic": {
        "none": [
          {
            "var": "items"
          },
          {
            ">=": [
              {
                "var": "qty"
              },
              1
            ]
          }
        ]
      },
      "data": {
        "items": []
      },
      "exp": true
    },
    {
      "title": "test case 267 - {\"some\":[{\"var\":\"integers\"},{\">=\":[{\"var\":\"\"},1]}]} - {\"integers\":[1,2,3]} - true",
      "logic": {
        "some": [
          {
            "var": "integers"
          },
          {
            ">=": [
              {
                "var": ""
              },
              1
            ]
          }
        ]
      },
      "data": {
        "integers": [
          1,
          2,
          3
        ]
      },
      "exp": true
    },
    {
      "title": "test case 268 - {\"some\":[{\"var\":\"integers\"},{\"==\":[{\"var\":\"\"},1]}]} - {\"integers\":[1,2,3]} - true",
      "logic": {
        "some": [
          {
            "var": "integers"
          },
          {
            "==": [
              {
                "var": ""
              },
              1
            ]
          }
        ]
      },
      "data": {
        "integers": [
          1,
          2,
          3
        ]
      },
      "exp": true
    },
    {
      "title": "test case 269 - {\"some\":[{\"var\":\"integers\"},{\"<\":[{\"var\":\"\"},1]}]} - {\"integers\":[1,2,3]} - false",
      "logic": {
        "some": [
          {
            "var": "integers"
          },
          {
            "<": [
              {
                "var": ""
              },
              1
            ]
          }
        ]
      },
      "data": {
        "integers": [
          1,
          2,
          3
        ]
      },
      "exp": false
    },
    {
      "title": "test case 27 - {\"<\":[2,1]} - {} - false",
      "logic": {
        "<": [
          2,
          1
        ]
      },
      "data": {},
      "exp": false
    },
    {
      "title": "test case 270 - {\"some\":[{\"var\":\"integers\"},{\"<\":[{\"var\":\"\"},1]}]} - {\"integers\":[]} - false",
      "logic": {
        "some": [
          {
            "var": "integers"
          },
          {
            "<": [
              {
                "var": ""
              },
              1
            ]
          }
        ]
      },
      "data": {
        "integers": []
      },
      "exp": false
    },
    {
      "title": "test case 271 - {\"some\":[{\"var\":\"items\"},{\">=\":[{\"var\":\"qty\"},1]}]} - {\"items\":[{\"qty\":1,\"sku\":\"apple\"},{\"qty\":2,\"sku\":\"banana\"}]} - true",
      "logic": {
        "some": [
          {
            "var": "items"
          },
          {
            ">=": [
              {
                "var": "qty"
              },
              1
            ]
          }
        ]
      },
      "data": {
        "items": [
          {
            "qty": 1,
            "sku": "apple"
          },
          {
            "qty": 2,
            "sku": "banana"
          }
        ]
      },
      "exp": true
    },
    {
      "title": "test case 272 - {\"some\":[{\"var\":\"items\"},{\">\":[{\"var\":\"qty\"},1]}]} - {\"items\":[{\"qty\":1,\"sku\":\"apple\"},{\"qty\":2,\"sku\":\"banana\"}]} - true",
      "logic": {
        "some": [
          {
            "var": "items"
          },
          {
            ">": [
              {
                "var": "qty"
              },
              1
            ]
          }
        ]
      },
      "data": {
        "items": [
          {
            "qty": 1,
            "sku": "apple"
          },
          {
            "qty": 2,
            "sku": "banana"
          }
        ]
      },
      "exp": true
    },
    {
      "title": "test case 273 - {\"some\":[{\"var\":\"items\"},{\"<\":[{\"var\":\"qty\"},1]}]} - {\"items\":[{\"qty\":1,\"sku\":\"apple\"},{\"qty\":2,\"sku\":\"banana\"}]} - false",
      "logic": {
        "some": [
          {
            "var": "items"
          },
          {
            "<": [
              {
                "var": "qty"
              },
              1
            ]
          }
        ]
      },
      "data": {
        "items": [
          {
            "qty": 1,
            "sku": "apple"
          },
          {
            "qty": 2,
            "sku": "banana"
          }
        ]
      },
      "exp": false
    },
    {
      "title": "test case 274 - {\"some\":[{\"var\":\"items\"},{\">=\":[{\"var\":\"qty\"},1]}]} - {\"items\":[]} - false",
      "logic": {
        "some": [
          {
            "var": "items"
          },
          {
            ">=": [
              {
                "var": "qty"
              },
              1
            ]
          }
        ]
      },
      "data": {
        "items": []
      },
      "exp": false
    },
    {
      "title": "test case 28 - {\"<\":[1,1]} - {} - false",
      "logic": {
        "<": [
          1,
          1
        ]
      },
      "data": {},
      "exp": false
    },
    {
      "title": "test case 29 - {\"<\":[1,2]} - {} - true",
      "logic": {
        "<": [
          1,
          2
        ]
      },
      "data": {},
      "exp": true
    },
    {
      "title": "test case 3 - 3.14 - {} - 3.14",
      "logic": 3.14,
      "data": {},
      "exp": 3.14
    },
    {
      "title": "test case 30 - {\"<\":[\"1\",2]} - {} - true",
      "logic": {
        "<": [
          "1",
          2
        ]
      },
      "data": {},
      "exp": true
    },
    {
      "title": "test case 31 - {\"<\":[1,2,3]} - {} - true",
      "logic": {
        "<": [
          1,
          2,
          3
        ]
      },
      "data": {},
      "exp": true
    },
    {
      "title": "test case 32 - {\"<\":[1,1,3]} - {} - false",
      "logic": {
        "<": [
          1,
          1,
          3
        ]
      },
      "data": {},
      "exp": false
    },
    {
      "title": "test case 33 - {\"<\":[1,4,3]} - {} - false",
      "logic": {
        "<": [
          1,
          4,
          3
        ]
      },
      "data": {},
      "exp": false
    },
    {
      "title": "test case 34 - {\"<=\":[2,1]} - {} - false",
      "logic": {
        "<=": [
          2,
          1
        ]
      },
      "data": {},
      "exp": false
    },
    {
      "title": "test case 35 - {\"<=\":[1,1]} - {} - true",
      "logic": {
        "<=": [
          1,
          1
        ]
      },
      "data": {},
      "exp": true
    },
    {
      "title": "test case 36 - {\"<=\":[1,2]} - {} - true",
      "logic": {
        "<=": [
          1,
          2
        ]
      },
      "data": {},
      "exp": true
    },
    {
      "title": "test case 37 - {\"<=\":[\"1\",2]} - {} - true",
      "logic": {
        "<=": [
          "1",
          2
        ]
      },
      "data": {},
      "exp": true
    },
    {
      "title": "test case 38 - {\"<=\":[1,2,3]} - {} - true",
      "logic": {
        "<=": [
          1,
          2,
          3
        ]
      },
      "data": {},
      "exp": true
    },
    {
      "title": "test case 39 - {\"<=\":[1,4,3]} - {} - false",
      "logic": {
        "<=": [
          1,
          4,
          3
        ]
      },
      "data": {},
      "exp": false
    },
    {
      "title": "test case 4 - \"apple\" - {} - \"apple\"",
      "logic": "apple",
      "data": {},
      "exp": "apple"
    },
    {
      "title": "test case 40 - {\"!\":[false]} - {} - true",
      "logic": {
        "!": [
          false
        ]
      },
      "data": {},
      "exp": true
    },
    {
      "title": "test case 41 - {\"!\":false} - {} - true",
      "logic": {
        "!": false
      },
      "data": {},
      "exp": true
    },
    {
      "title": "test case 42 - {\"!\":[true]} - {} - false",
      "logic": {
        "!": [
          true
        ]
      },
      "data": {},
      "exp": false
    },
    {
      "title": "test case 43 - {\"!\":true} - {} - false",
      "logic": {
        "!": true
      },
      "data": {},
      "exp": false
    },
    {
      "title": "test case 44 - {\"!\":0} - {} - true",
      "logic": {
        "!": 0
      },
      "data": {},
      "exp": true
    },
    {
      "title": "test case 45 - {\"!\":1} - {} - false",
      "logic": {
        "!": 1
      },
      "data": {},
      "exp": false
    },
    {
      "title": "test case 46 - {\"or\":[true,true]} - {} - true",
      "logic": {
        "or": [
          true,
          true
        ]
      },
      "data": {},
      "exp": true
    },
    {
      "title": "test case 47 - {\"or\":[false,true]} - {} - true",
      "logic": {
        "or": [
          false,
          true
        ]
      },
      "data": {},
      "exp": true
    },
    {
      "title": "test case 48 - {\"or\":[true,false]} - {} - true",
      "logic": {
        "or": [
          true,
          false
        ]
      },
      "data": {},
      "exp": true
    },
    {
      "title": "test case 49 - {\"or\":[false,false]} - {} - false",
      "logic": {
        "or": [
          false,
          false
        ]
      },
      "data": {},
      "exp": false
    },
    {
      "title": "test case 5 - null - {} - null",
      "logic": null,
      "data": {},
      "exp": null
    },
    {
      "title": "test case 50 - {\"or\":[false,false,true]} - {} - true",
      "logic": {
        "or": [
          false,
          false,
          true
        ]
      },
      "data": {},
      "exp": true
    },
    {
      "title": "test case 51 - {\"or\":[false,false,false]} - {} - false",
      "logic": {
        "or": [
          false,
          false,
          false
        ]
      },
      "data": {},
      "exp": false
    },
    {
      "title": "test case 52 - {\"or\":[false]} - {} - false",
      "logic": {
        "or": [
          false
        ]
      },
      "data": {},
      "exp": false
    },
    {
      "title": "test case 53 - {\"or\":[true]} - {} - true",
      "logic": {
        "or": [
          true
        ]
      },
      "data": {},
      "exp": true
    },
    {
      "title": "test case 54 - {\"or\":[1,3]} - {} - 1",
      "logic": {
        "or": [
          1,
          3
        ]
      },
      "data": {},
      "exp": 1
    },
    {
      "title": "test case 55 - {\"or\":[3,false]} - {} - 3",
      "logic": {
        "or": [
          3,
          false
        ]
      },
      "data": {},
      "exp": 3
    },
    {
      "title": "test case 56 - {\"or\":[false,3]} - {} - 3",
      "logic": {
        "or": [
          false,
          3
        ]
      },
      "data": {},
      "exp": 3
    },
    {
      "title": "test case 57 - {\"and\":[true,true]} - {} - true",
      "logic": {
        "and": [
          true,
          true
        ]
      },
      "data": {},
      "exp": true
    },
    {
      "title": "test case 58 - {\"and\":[false,true]} - {} - false",
      "logic": {
        "and": [
          false,
          true
        ]
      },
      "data": {},
      "exp": false
    },
    {
      "title": "test case 59 - {\"and\":[true,false]} - {} - false",
      "logic": {
        "and": [
          true,
          false
        ]
      },
      "data": {},
      "exp": false
    },
    {
      "title": "test case 6 - [\"a\",\"b\"] - {} - [\"a\",\"b\"]",
      "logic": [
        "a",
        "b"
      ],
      "data": {},
      "exp": [
        "a",
        "b"
      ]
    },
    {
      "title": "test case 60 - {\"and\":[false,false]} - {} - false",
      "logic": {
        "and": [
          false,
          false
        ]
      },
      "data": {},
      "exp": false
    },
    {
      "title": "test case 61 - {\"and\":[true,true,true]} - {} - true",
      "logic": {
        "and": [
          true,
          true,
          true
        ]
      },
      "data": {},
      "exp": true
    },
    {
      "title": "test case 62 - {\"and\":[true,true,false]} - {} - false",
      "logic": {
        "and": [
          true,
          true,
          false
        ]
      },
      "data": {},
      "exp": false
    },
    {
      "title": "test case 63 - {\"and\":[false]} - {} - false",
      "logic": {
        "and": [
          false
        ]
      },
      "data": {},
      "exp": false
    },
    {
      "title": "test case 64 - {\"and\":[true]} - {} - true",
      "logic": {
        "and": [
          true
        ]
      },
      "data": {},
      "exp": true
    },
    {
      "title": "test case 65 - {\"and\":[1,3]} - {} - 3",
      "logic": {
        "and": [
          1,
          3
        ]
      },
      "data": {},
      "exp": 3
    },
    {
      "title": "test case 66 - {\"and\":[3,false]} - {} - false",
      "logic": {
        "and": [
          3,
          false
        ]
      },
      "data": {},
      "exp": false
    },
    {
      "title": "test case 67 - {\"and\":[false,3]} - {} - false",
      "logic": {
        "and": [
          false,
          3
        ]
      },
      "data": {},
      "exp": false
    },
    {
      "title": "test case 68 - {\"?:\":[true,1,2]} - {} - 1",
      "logic": {
        "?:": [
          true,
          1,
          2
        ]
      },
      "data": {},
      "exp": 1
    },
    {
      "title": "test case 69 - {\"?:\":[false,1,2]} - {} - 2",
      "logic": {
        "?:": [
          false,
          1,
          2
        ]
      },
      "data": {},
      "exp": 2
    },
    {
      "title": "test case 7 - {\"==\":[1,1]} - {} - true",
      "logic": {
        "==": [
          1,
          1
        ]
      },
      "data": {},
      "exp": true
    },
    {
      "title": "test case 70 - {\"in\":[\"Bart\",[\"Bart\",\"Homer\",\"Lisa\",\"Marge\",\"Maggie\"]]} - {} - true",
      "logic": {
        "in": [
          "Bart",
          [
            "Bart",
            "Homer",
            "Lisa",
            "Marge",
            "Maggie"
          ]
        ]
      },
      "data": {},
      "exp": true
    },
    {
      "title": "test case 71 - {\"in\":[\"Milhouse\",[\"Bart\",\"Homer\",\"Lisa\",\"Marge\",\"Maggie\"]]} - {} - false",
      "logic": {
        "in": [
          "Milhouse",
          [
            "Bart",
            "Homer",
            "Lisa",
            "Marge",
            "Maggie"
          ]
        ]
      },
      "data": {},
      "exp": false
    },
    {
      "title": "test case 72 - {\"in\":[\"Spring\",\"Springfield\"]} - {} - true",
      "logic": {
        "in": [
          "Spring",
          "Springfield"
        ]
      },
      "data": {},
      "exp": true
    },
    {
      "title": "test case 73 - {\"in\":[\"i\",\"team\"]} - {} - false",
      "logic": {
        "in": [
          "i",
          "team"
        ]
      },
      "data": {},
      "exp": false
    },
    {
      "title": "test case 74 - {\"cat\":\"ice\"} - {} - \"ice\"",
      "logic": {
        "cat": "ice"
      },
      "data": {},
      "exp": "ice"
    },
    {
      "title": "test case 75 - {\"cat\":[\"ice\"]} - {} - \"ice\"",
      "logic": {
        "cat": [
          "ice"
        ]
      },
      "data": {},
      "exp": "ice"
    },
    {
      "title": "test case 76 - {\"cat\":[\"ice\",\"cream\"]} - {} - \"icecream\"",
      "logic": {
        "cat": [
          "ice",
          "cream"
        ]
      },
      "data": {},
      "exp": "icecream"
    },
    {
      "title": "test case 77 - {\"cat\":[1,2]} - {} - \"12\"",
      "logic": {
        "cat": [
          1,
          2
        ]
      },
      "data": {},
      "exp": "12"
    },
    {
      "title": "test case 78 - {\"cat\":[\"Robocop\",2]} - {} - \"Robocop2\"",
      "logic": {
        "cat": [
          "Robocop",
          2
        ]
      },
      "data": {},
      "exp": "Robocop2"
    },
    {
      "title": "test case 79 - {\"cat\":[\"we all scream for \",\"ice\",\"cream\"]} - {} - \"we all scream for icecream\"",
      "logic": {
        "cat": [
          "we all scream for ",
          "ice",
          "cream"
        ]
      },
      "data": {},
      "exp": "we all scream for icecream"
    },
    {
      "title": "test case 8 - {\"==\":[1,\"1\"]} - {} - true",
      "logic": {
        "==": [
          1,
          "1"
        ]
      },
      "data": {},
      "exp": true
    },
    {
      "title": "test case 80 - {\"%\":[1,2]} - {} - 1",
      "logic": {
        "%": [
          1,
          2
        ]
      },
      "data": {},
      "exp": 1
    },
    {
      "title": "test case 81 - {\"%\":[2,2]} - {} - 0",
      "logic": {
        "%": [
          2,
          2
        ]
      },
      "data": {},
      "exp": 0
    },
    {
      "title": "test case 82 - {\"%\":[3,2]} - {} - 1",
      "logic": {
        "%": [
          3,
          2
        ]
      },
      "data": {},
      "exp": 1
    },
    {
      "title": "test case 83 - {\"max\":[1,2,3]} - {} - 3",
      "logic": {
        "max": [
          1,
          2,
          3
        ]
      },
      "data": {},
      "exp": 3
    },
    {
      "title": "test case 84 - {\"max\":[1,3,3]} - {} - 3",
      "logic": {
        "max": [
          1,
          3,
          3
        ]
      },
      "data": {},
      "exp": 3
    },
    {
      "title": "test case 85 - {\"max\":[3,2,1]} - {} - 3",
      "logic": {
        "max": [
          3,
          2,
          1
        ]
      },
      "data": {},
      "exp": 3
    },
    {
      "title": "test case 86 - {\"max\":[1]} - {} - 1",
      "logic": {
        "max": [
          1
        ]
      },
      "data": {},
      "exp": 1
    },
    {
      "title": "test case 87 - {\"min\":[1,2,3]} - {} - 1",
      "logic": {
        "min": [
          1,
          2,
          3
        ]
      },
      "data": {},
      "exp": 1
    },
    {
      "title": "test case 88 - {\"min\":[1,1,3]} - {} - 1",
      "logic": {
        "min": [
          1,
          1,
          3
        ]
      },
      "data": {},
      "exp": 1
    },
    {
      "title": "test case 89 - {\"min\":[3,2,1]} - {} - 1",
      "logic": {
        "min": [
          3,
          2,
          1
        ]
      },
      "data": {},
      "exp": 1
    },
    {
      "title": "test case 9 - {\"==\":[1,2]} - {} - false",
      "logic": {
        "==": [
          1,
          2
        ]
      },
      "data": {},
      "exp": false
    },
    {
      "title": "test case 90 - {\"min\":[1]} - {} - 1",
      "logic": {
        "min": [
          1
        ]
      },
      "data": {},
      "exp": 1
    },
    {
      "title": "test case 91 - {\"+\":[1,2]} - {} - 3",
      "logic": {
        "+": [
          1,
          2
        ]
      },
      "data": {},
      "exp": 3
    },
    {
      "title": "test case 92 - {\"+\":[2,2,2]} - {} - 6",
      "logic": {
        "+": [
          2,
          2,
          2
        ]
      },
      "data": {},
      "exp": 6
    },
    {
      "title": "test case 93 - {\"+\":[1]} - {} - 1",
      "logic": {
        "+": [
          1
        ]
      },
      "data": {},
      "exp": 1
    },
    {
      "title": "test case 94 - {\"+\":[\"1\",1]} - {} - 2",
      "logic": {
        "+": [
          "1",
          1
        ]
      },
      "data": {},
      "exp": 2
    },
    {
      "title": "test case 95 - {\"*\":[3,2]} - {} - 6",
      "logic": {
        "*": [
          3,
          2
        ]
      },
      "data": {},
      "exp": 6
    },
    {
      "title": "test case 96 - {\"*\":[2,2,2]} - {} - 8",
      "logic": {
        "*": [
          2,
          2,
          2
        ]
      },
      "data": {},
      "exp": 8
    },
    {
      "title": "test case 97 - {\"*\":[1]} - {} - 1",
      "logic": {
        "*": [
          1
        ]
      },
      "data": {},
      "exp": 1
    },
    {
      "title": "test case 98 - {\"*\":[\"1\",1]} - {} - 1",
      "logic": {
        "*": [
          "1",
          1
        ]
      },
      "data": {},
      "exp": 1
    },
    {
      "title": "test case 99 - {\"-\":[2,3]} - {} - -1",
      "logic": {
        "-": [
          2,
          3
        ]
      },
      "data": {},
      "exp": -1
    },
    {
      "title": "toLowerCase - data types - if parameter is a boolean (false), treats it as a string",
      "logic": {
        "toLowerCase": [
          {
            "var": "name"
          }
        ]
      },
      "data": {
        "name": false
      },
      "exp": "false"
    },
    {
      "title": "toLowerCase - data types - if parameter is a boolean (true), treats it as a string",
      "logic": {
        "toLowerCase": [
          {
            "var": "name"
          }
        ]
      },
      "data": {
        "name": true
      },
      "exp": "true"
    },
    {
      "title": "toLowerCase - data types - if parameter is a number (float), treats it as a string",
      "logic": {
        "toLowerCase": [
          {
            "var": "name"
          }
        ]
      },
      "data": {
        "name": 5.5
      },
      "exp": "5.5"
    },
    {
      "title": "toLowerCase - data types - if parameter is a number (integer), treats it as a string",
      "logic": {
        "toLowerCase": [
          {
            "var": "name"
          }
        ]
      },
      "data": {
        "name": 5
      },
      "exp": "5"
    },
    {
      "title": "toLowerCase - data types - if parameter is an array, treats it as an empty string",
      "logic": {
        "toLowerCase": [
          {
            "var": "name"
          }
        ]
      },
      "data": {
        "name": [
          "hello"
        ]
      },
      "exp": ""
    },
    {
      "title": "toLowerCase - data types - if parameter is an object, treats it as an empty string",
      "logic": {
        "toLowerCase": [
          {
            "var": "name"
          }
        ]
      },
      "data": {
        "name": {
          "hello": "World"
        }
      },
      "exp": ""
    },
    {
      "title": "toLowerCase - data types - if parameter is null, treats it as an empty string",
      "logic": {
        "toLowerCase": [
          {
            "var": "name"
          }
        ]
      },
      "data": {
        "name": null
      },
      "exp": ""
    },
    {
      "title": "toLowerCase - handles German SS as ss",
      "logic": {
        "toLowerCase": [
          {
            "var": "name"
          }
        ]
      },
      "data": {
        "name": "SS"
      },
      "exp": "ss"
    },
    {
      "title": "toLowerCase - handles German umlaut",
      "logic": {
        "toLowerCase": [
          {
            "var": "name"
          }
        ]
      },
      "data": {
        "name": "ÜÄÖ"
      },
      "exp": "üäö"
    },
    {
      "title": "toLowerCase - handles German ß as ß",
      "logic": {
        "toLowerCase": [
          {
            "var": "name"
          }
        ]
      },
      "data": {
        "name": "ß"
      },
      "exp": "ß"
    },
    {
      "title": "toLowerCase - returns the string in upper case characters",
      "logic": {
        "toLowerCase": [
          {
            "var": "name"
          }
        ]
      },
      "data": {
        "name": "JOHN DOE"
      },
      "exp": "john doe"
    },
    {
      "title": "toUpperCase - data types - if parameter is a boolean (false), treats it as a string",
      "logic": {
        "toUpperCase": [
          {
            "var": "name"
          }
        ]
      },
      "data": {
        "name": false
      },
      "exp": "FALSE"
    },
    {
      "title": "toUpperCase - data types - if parameter is a boolean (true), treats it as a string",
      "logic": {
        "toUpperCase": [
          {
            "var": "name"
          }
        ]
      },
      "data": {
        "name": true
      },
      "exp": "TRUE"
    },
    {
      "title": "toUpperCase - data types - if parameter is a number (float), treats it as a string",
      "logic": {
        "toUpperCase": [
          {
            "var": "name"
          }
        ]
      },
      "data": {
        "name": 5.5
      },
      "exp": "5.5"
    },
    {
      "title": "toUpperCase - data types - if parameter is a number (integer), treats it as a string",
      "logic": {
        "toUpperCase": [
          {
            "var": "name"
          }
        ]
      },
      "data": {
        "name": 5
      },
      "exp": "5"
    },
    {
      "title": "toUpperCase - data types - if parameter is an array, treats it as an empty string",
      "logic": {
        "toUpperCase": [
          {
            "var": "name"
          }
        ]
      },
      "data": {
        "name": [
          "hello"
        ]
      },
      "exp": ""
    },
    {
      "title": "toUpperCase - data types - if parameter is an object, treats it as an empty string",
      "logic": {
        "toUpperCase": [
          {
            "var": "name"
          }
        ]
      },
      "data": {
        "name": {
          "hello": "World"
        }
      },
      "exp": ""
    },
    {
      "title": "toUpperCase - data types - if parameter is null, treats it as an empty string",
      "logic": {
        "toUpperCase": [
          {
            "var": "name"
          }
        ]
      },
      "data": {
        "name": null
      },
      "exp": ""
    },
    {
      "title": "toUpperCase - handles German umlaut",
      "logic": {
        "toUpperCase": [
          {
            "var": "name"
          }
        ]
      },
      "data": {
        "name": "üäö"
      },
      "exp": "ÜÄÖ"
    },
    {
      "title": "toUpperCase - handles German ß as SS",
      "logic": {
        "toUpperCase": [
          {
            "var": "name"
          }
        ]
      },
      "data": {
        "name": "ß"
      },
      "exp": "SS"
    },
    {
      "title": "toUpperCase - returns the string in upper case characters",
      "logic": {
        "toUpperCase": [
          {
            "var": "name"
          }
        ]
      },
      "data": {
        "name": "john doe"
      },
      "exp": "JOHN DOE"
    },
    {
      "title": "trim - data types - if parameter is a boolean (false), treats it as a string",
      "logic": {
        "trim": [
          {
            "var": "name"
          }
        ]
      },
      "data": {
        "name": false
      },
      "exp": "false"
    },
    {
      "title": "trim - data types - if parameter is a boolean (true), treats it as a string",
      "logic": {
        "trim": [
          {
            "var": "name"
          }
        ]
      },
      "data": {
        "name": true
      },
      "exp": "true"
    },
    {
      "title": "trim - data types - if parameter is a number (float), treats it as a string",
      "logic": {
        "trim": [
          {
            "var": "name"
          }
        ]
      },
      "data": {
        "name": 5.5
      },
      "exp": "5.5"
    },
    {
      "title": "trim - data types - if parameter is a number (integer), treats it as a string",
      "logic": {
        "trim": [
          {
            "var": "name"
          }
        ]
      },
      "data": {
        "name": 5
      },
      "exp": "5"
    },
    {
      "title": "trim - data types - if parameter is an array, treats it as an empty string",
      "logic": {
        "trim": [
          {
            "var": "name"
          }
        ]
      },
      "data": {
        "name": [
          "hello",
          "world"
        ]
      },
      "exp": ""
    },
    {
      "title": "trim - data types - if parameter is an object, treats it as an empty string",
      "logic": {
        "trim": [
          {
            "var": "name"
          }
        ]
      },
      "data": {
        "name": {
          "hello": "World"
        }
      },
      "exp": ""
    },
    {
      "title": "trim - data types - if parameter is null, treats it as an empty string",
      "logic": {
        "trim": [
          {
            "var": "name"
          }
        ]
      },
      "data": {
        "name": null
      },
      "exp": ""
    },
    {
      "title": "trim - trims leading and trailing whitespace",
      "logic": {
        "trim": [
          {
            "var": "name"
          }
        ]
      },
      "data": {
        "name": "  John Doe  "
      },
      "exp": "John Doe"
    },
    {
      "title": "var operation - determine #array <= 1 - #1 with null",
      "logic": {
        "!": [
          {
            "var": "1"
          }
        ]
      },
      "data": null,
      "exp": true
    },
    {
      "title": "var operation - determine #array <= 1 - #2 with []",
      "logic": {
        "!": [
          {
            "var": "1"
          }
        ]
      },
      "data": [],
      "exp": true
    },
    {
      "title": "var operation - determine #array <= 1 - #3 with [null]",
      "logic": {
        "!": [
          {
            "var": "1"
          }
        ]
      },
      "data": [
        null
      ],
      "exp": true
    },
    {
      "title": "var operation - determine #array <= 1 - #4 with [null,null]",
      "logic": {
        "!": [
          {
            "var": "1"
          }
        ]
      },
      "data": [
        null,
        null
      ],
      "exp": true
    },
    {
      "title": "var operation - determine #array <= 1 - #5 with [1]",
      "logic": {
        "!": [
          {
            "var": "1"
          }
        ]
      },
      "data": [
        1
      ],
      "exp": true
    },
    {
      "title": "var operation - should drill into data (1) - #1 with {\"x\":1}",
      "logic": {
        "var": "x"
      },
      "data": {
        "x": 1
      },
      "exp": 1
    },
    {
      "title": "var operation - should drill into data (2) - #1 with {\"x\":[1]}",
      "logic": {
        "var": "x.0"
      },
      "data": {
        "x": [
          1
        ]
      },
      "exp": 1
    },
    {
      "title": "var operation - should drill into data (3) - #1 with {\"xxx\":[{\"yyy\":1}]}",
      "logic": {
        "var": "xxx.0.yyy"
      },
      "data": {
        "xxx": [
          {
            "yyy": 1
          }
        ]
      },
      "exp": 1
    },
    {
      "title": "var operation - should return data context on \"\" - #1 with {\"foo\":\"bar\"}",
      "logic": {
        "var": ""
      },
      "data": {
        "foo": "bar"
      },
      "exp": {
        "foo": "bar"
      }
    },
    {
      "title": "var operation - should return null on null - #1 with null",
      "logic": {
        "var": "x"
      },
      "data": null,
      "exp": null
    },
    {
      "title": "var operation - should return null on undrillables (1) - #1 with {\"x\":{\"z\":1}}",
      "logic": {
        "var": "x.y"
      },
      "data": {
        "x": {
          "z": 1
        }
      },
      "exp": null
    },
    {
      "title": "var operation - should return null on undrillables (2) - #1 with {\"x\":{\"z\":1}}",
      "logic": {
        "var": "x.0"
      },
      "data": {
        "x": {
          "z": 1
        }
      },
      "exp": null
    },
    {
      "title": "var operation - should return null on undrillables (3) - #1 with {\"y\":{\"z\":1}}",
      "logic": {
        "var": "x.0"
      },
      "data": {
        "y": {
          "z": 1
        }
      },
      "exp": null
    },
    {
      "title": "var operation - should return null on undrillables (4) - #1 with {\"x\":{\"z\":1}}",
      "logic": {
        "var": "x.y.z"
      },
      "data": {
        "x": {
          "z": 1
        }
      },
      "exp": null
    },
    {
      "title": "var operation - var-ing non-existing array elements - #1 with null",
      "logic": {
        "var": "1"
      },
      "data": null,
      "exp": null
    },
    {
      "title": "var operation - var-ing non-existing array elements - #2 with []",
      "logic": {
        "var": "1"
      },
      "data": [],
      "exp": null
    },
    {
      "title": "var operation - var-ing non-existing array elements - #3 with [1]",
      "logic": {
        "var": "1"
      },
      "data": [
        1
      ],
      "exp": null
    },
    {
      "title": "var operation - var-ing non-existing array elements - #4 with [1,2]",
      "logic": {
        "var": "1"
      },
      "data": [
        1,
        2
      ],
      "exp": 2
    }
  ]
}
